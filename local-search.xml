<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>矩阵理论与计算复习章</title>
    <link href="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/"/>
    <url>/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-代数与矩阵运算"><a href="#1-代数与矩阵运算" class="headerlink" title="1. 代数与矩阵运算"></a>1. 代数与矩阵运算</h1><h2 id="1-1-向量范数与矩阵范数"><a href="#1-1-向量范数与矩阵范数" class="headerlink" title="1.1 向量范数与矩阵范数"></a>1.1 向量范数与矩阵范数</h2><h3 id="1-1-1-向量范数"><a href="#1-1-1-向量范数" class="headerlink" title="1.1.1 向量范数"></a>1.1.1 向量范数</h3><h3 id="1-1-2-矩阵范数"><a href="#1-1-2-矩阵范数" class="headerlink" title="1.1.2 矩阵范数"></a>1.1.2 矩阵范数</h3><ul><li><p><strong>向量范数 与 矩阵范数 相容</strong> ：</p><p>$||Ax|| \leq ||A|| ||x||$</p><p>如：矩阵范数$m_1$与向量范数$l_1$相容 ； 矩阵范数$m_2$与向量范数$l_2$相容 </p></li><li><p>对于一个向量范数，一定能找到一个<strong>与之相容的矩阵范数</strong>：</p><p>$||A|| &#x3D; \underset{||x||&#x3D;1}{\max} ||Ax||$</p></li><li><p>两种矩阵范数：</p><ul><li>非从属矩阵范数：$m_1$, $m_2$等</li><li>算子范数：由向量范数诱导得到的矩阵范数<ul><li>极大的列和范数：$||A||<em>{1} &#x3D; \underset{1 \leq j \leq n}{\max} \sum</em>{i&#x3D;1}^{m} |a_{ij}|$ 所有列和里面最大的</li><li>谱范数：$||A||_2 &#x3D; (\lambda ^{\frac{1}{2}} (A^HA))$  （取$A^HA$的最大的特征值）</li><li>极大的行和范数：$||A||<em>{\infty} &#x3D; \underset{1 \leq i \leq m}{\max} \sum</em>{j&#x3D;1}^{n} |a_{ij}|$</li></ul></li></ul><p>两者的区别：非从属矩阵范数有$||I|| \geq 1$ ； 而算子范数 $||I|| &#x3D; 1$</p><p><strong>例题</strong></p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/caf3bc8d946a744e02432eee6913c831_720.png" alt="img"></p></li><li><p>F范数的酉不变性：$A$普通矩阵，$P,Q$都是酉矩阵($P^HP &#x3D; I$)</p><p>$||A|| &#x3D; ||PA|| &#x3D; ||AQ|| &#x3D; ||PAQ||$</p></li><li><p>矩阵范数等价性：如果能找到$C_1, C_2$</p><p>$C_1||A||_s \leq ||A||_t \leq C_2||A||_s$ ， 则$||\cdot||_s $与$||\cdot||$等价</p><p>比如 $\frac{1}{\sqrt{n}}||A||_F \leq ||A||_2 \leq ||A||_F$</p></li><li><p><strong>谱半径</strong>：</p><ul><li>定义：$\rho(A) &#x3D; \underset{1 \leq i \leq n}{\max} | \lambda_i| $ ， 其中$\lambda$为$A$的特征值</li><li>与矩阵范数的关系：$\rho(A) \leq ||A||$  但是，存在一种矩阵范数使得$||A||_{\epsilon} &lt; \rho(A) + \epsilon$</li></ul></li><li><p>谱范数的性质：</p><ul><li>$||A||_2 &#x3D; \underset{||x||_2 &#x3D; 1, ||y||_2 &#x3D; 1}{\max} ||y^HAx|| $ </li><li>$||A^H||_2 &#x3D; ||A||_2 &#x3D; ||A^T||_2$</li><li>$||A^HA|| &#x3D; ||A||_2^{2}$</li><li>对正规矩阵A有：$\rho(A) &#x3D; ||A||_2$</li><li>对非奇异矩阵A有：$||A||_2 &#x3D; \rho(A^HA)^{\frac{1}{2}}$</li></ul></li></ul><h3 id="1-1-3-范数的应用"><a href="#1-1-3-范数的应用" class="headerlink" title="1.1.3 范数的应用"></a>1.1.3 范数的应用</h3><ul><li><p>衡量 $A^{-1}$与$(A + \delta A)$的误差：</p><p>要求 $||A^{-1} \delta A || &lt; 1$， 则。。。</p></li><li><p><strong>条件数</strong>：$cond(A) &#x3D; ||A||||A^{-1}||$</p></li><li><p>病态方程：$Ax&#x3D;b$如果$A$发生微小变化时，解发生巨大变化</p></li><li></li></ul><h1 id="2-特殊矩阵"><a href="#2-特殊矩阵" class="headerlink" title="2. 特殊矩阵"></a>2. 特殊矩阵</h1><h2 id="2-1-置换矩阵"><a href="#2-1-置换矩阵" class="headerlink" title="2.1 置换矩阵"></a>2.1 置换矩阵</h2><h3 id="2-1-1-Hermite矩阵"><a href="#2-1-1-Hermite矩阵" class="headerlink" title="2.1.1 Hermite矩阵"></a>2.1.1 Hermite矩阵</h3><ul><li>对称矩阵：$A^T &#x3D; A, A \in R^{n \times n}$</li><li>Hermite矩阵：$A^H &#x3D; A, A \in C^{n \times n}$<ul><li>A为Hermite矩阵，$A+A^H, AA^H, A^HA ，A^{-1}$也是Hermite矩阵</li><li>A,B为Hermite矩阵， $\alpha A + \beta B$也是Hermite矩阵</li></ul></li><li>Hermite矩阵正定的条件：<ul><li>A所有特征值大于0</li><li>存在一个非奇异R，使得$A &#x3D; R^HR$</li><li>对任意非奇异P，有$P^HAP$正定</li></ul></li></ul><h3 id="2-1-2-置换矩阵"><a href="#2-1-2-置换矩阵" class="headerlink" title="2.1.2 置换矩阵"></a>2.1.2 置换矩阵</h3><ul><li>置换矩阵：方阵，每行每列只有一个1，其余全为0</li><li>性质：<ul><li>$P^T$也是置换矩阵</li><li>$P^T  P &#x3D; PP^T &#x3D; I$</li><li>$P^T &#x3D; P^{-1}$</li></ul></li><li>移位矩阵：$p_{i, i+1} &#x3D; 1, p_{n1} &#x3D; 1$，其余为0， $P_n &#x3D; (e_n, e_1, ..,e_{n-1})$</li></ul><h3 id="2-1-3-广义置换矩阵"><a href="#2-1-3-广义置换矩阵" class="headerlink" title="2.1.3 广义置换矩阵"></a>2.1.3 广义置换矩阵</h3><ul><li><p>定义：每行每列仅有一个非0元素</p></li><li><p>$G &#x3D; P D$,$G$为广义置换矩阵，$P$为置换矩阵，$D$为非奇异的对角阵</p></li><li><p>选择矩阵：对矩阵的某些行或者某些列进行选择</p><p>$J_1 &#x3D; (I_{m-1}, 0_{m-1}), J_1x &#x3D; (x_1, x_2,..,x_{m-1})^T$， 选择了前m-1行</p></li></ul><h2 id="2-2-正交矩阵与酉矩阵"><a href="#2-2-正交矩阵与酉矩阵" class="headerlink" title="2.2 正交矩阵与酉矩阵"></a>2.2 正交矩阵与酉矩阵</h2><ul><li>正交矩阵：$Q^TQ &#x3D; QQ^T &#x3D; I$</li><li>酉矩阵：$U^H U &#x3D; U U^H &#x3D; I$</li><li>A与B酉相似：$B &#x3D; U^HAU &#x3D; U^{-1}AU$</li><li>性质：</li></ul><h2 id="2-3-三角矩阵"><a href="#2-3-三角矩阵" class="headerlink" title="2.3 三角矩阵"></a>2.3 三角矩阵</h2><ul><li>性质：<ul><li>上三角矩阵乘积为上三角矩阵</li><li>上三角矩阵行列式是对角线元素乘积</li><li>上三角矩阵逆也是上三角矩阵</li><li>正定的Hermite矩阵，能$A &#x3D; T^H DT$, $T$单位上三角</li><li>正定矩阵A ，能有$AA &#x3D; L L^T$</li></ul></li><li></li></ul><h2 id="2-4-Hardmard矩阵"><a href="#2-4-Hardmard矩阵" class="headerlink" title="2.4 Hardmard矩阵"></a>2.4 Hardmard矩阵</h2><h2 id="2-5-Toplitz矩阵与Hankel矩阵"><a href="#2-5-Toplitz矩阵与Hankel矩阵" class="headerlink" title="2.5 Toplitz矩阵与Hankel矩阵"></a>2.5 Toplitz矩阵与Hankel矩阵</h2><h1 id="3-矩阵变换与分解"><a href="#3-矩阵变换与分解" class="headerlink" title="3. 矩阵变换与分解"></a>3. 矩阵变换与分解</h1><h2 id="3-1-酉变换（正交变换）"><a href="#3-1-酉变换（正交变换）" class="headerlink" title="3.1 酉变换（正交变换）"></a>3.1 酉变换（正交变换）</h2><h3 id="3-1-1-酉等价（酉相似）"><a href="#3-1-1-酉等价（酉相似）" class="headerlink" title="3.1.1 酉等价（酉相似）"></a>3.1.1 酉等价（酉相似）</h3><ul><li>定义：</li><li>性质：<ul><li>酉等价 —&gt; 相似</li><li>对酉变换$y &#x3D; Ux$ ，不改变向量长度</li></ul></li></ul><h3 id="3-1-2-Givens变换（初等旋转变换）"><a href="#3-1-2-Givens变换（初等旋转变换）" class="headerlink" title="3.1.2 Givens变换（初等旋转变换）"></a>3.1.2 Givens变换（初等旋转变换）</h3><ul><li><p>定义</p></li><li><p>性质</p></li><li><p>求Givens矩阵</p></li><li><p>例题</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/2b2d3f532265eb0beaa1d516ea836540_720.png" alt="img"></p></li></ul><h3 id="3-1-3-Householder变换（初等反射变换）"><a href="#3-1-3-Householder变换（初等反射变换）" class="headerlink" title="3.1.3 Householder变换（初等反射变换）"></a>3.1.3 Householder变换（初等反射变换）</h3><ul><li><p>定义</p></li><li><p>性质</p></li><li><p>求取Householder矩阵</p></li><li><p>例题</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/64c876c6634ccee3a8edb90e99743f46_720.png" alt="img"></p></li><li><p>Givens变换 是 两个 Householder变换 的乘积</p></li></ul><h2 id="3-2-QR分解"><a href="#3-2-QR分解" class="headerlink" title="3.2 QR分解"></a>3.2 QR分解</h2><ul><li><p>定义：把矩阵分解成 正交矩阵 和 上三角矩阵 的乘积</p></li><li><p>使用Givens变换做矩阵的QR分解</p></li><li><p>使用Householder变换做矩阵QR分解</p></li><li><p>例题1</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/864fde8af3042ee5036de17e9ebe479b_720.png" alt="img"></p></li><li><p>例题2</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/b34b717194808c3a3730a78bf54d2506_720.png" alt="img"></p></li><li><p><strong>Hessenberg正交相似</strong>：</p></li><li><p>上H矩阵：对任意的$i\geq j+2$， $h_{ij} &#x3D; 0$</p></li><li><p>对任意方阵$A$，存在正交矩阵$P$，使得$P^{-1}AP &#x3D; H$</p></li></ul><h2 id="3-3-Schur分解"><a href="#3-3-Schur分解" class="headerlink" title="3.3 Schur分解"></a>3.3 Schur分解</h2><ul><li><p>Schur定理： 矩阵A 能 酉相似于 上三角矩阵   即（$U^H A U &#x3D; T$）</p></li><li><p>正规矩阵：$AA^H &#x3D; A^HA$</p><p>与正规矩阵酉等价的矩阵都是正规矩阵</p><p>如：Hermite矩阵 、反Hermit矩阵、 酉矩阵</p></li><li><p>定理1： A酉相似于对角矩阵 等价于 A是正规矩阵</p></li><li><p>各类正规矩阵的特征值：</p><ul><li>Hermite矩阵（$A^H &#x3D; A$）：实数</li><li>反Hermite矩阵（$A^H &#x3D;-A$）：0或者纯虚数</li><li>实对称矩阵（$A^T &#x3D; A$）：实数</li><li>反实对称矩阵（$A^T &#x3D;-A$）：0或者纯虚数</li></ul></li><li><p>正规矩阵$A^H$的特征值为$\bar{\lambda}$，特征向量为$x$</p></li><li><p>正规矩阵的特征向量两两正交</p></li><li><p>正规矩阵的相似对角化：利用原理$Au_i &#x3D; \lambda_iu_i$，$U$的每列就是$A$的特征值对应的特征向量</p><p>例题：</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/8c4e7ec05dc521ab289fbeb1e9ed4bb4.png" alt="img"></p></li></ul><h2 id="3-4-Jordan标准型与谱分解"><a href="#3-4-Jordan标准型与谱分解" class="headerlink" title="3.4 Jordan标准型与谱分解"></a>3.4 Jordan标准型与谱分解</h2><h3 id="3-4-1-预备知识"><a href="#3-4-1-预备知识" class="headerlink" title="3.4.1 预备知识"></a>3.4.1 预备知识</h3><ul><li>特征值与特征向量<ul><li>-A的特征值为$-\lambda$，特征向量为$x$</li><li>设$B$与$A$相似，有$P^{-1}AP &#x3D;B$，则B的特征值也是$\lambda$，特征向量为$P^{-1}x$</li><li>AB 与 BA 具有相同的特征值</li></ul></li><li>若A能相似对角化 等价于 A与对角阵 相似</li></ul><h3 id="3-4-2-Jordan标准型"><a href="#3-4-2-Jordan标准型" class="headerlink" title="3.4.2 Jordan标准型"></a>3.4.2 Jordan标准型</h3><ul><li><p>Jordan标准型定义：对矩阵$A \in C^{n * n}$，存在非奇异的$P$，使得$P^{-1}AP &#x3D; diag(J_1, J_2,…,J_s)$，$J_i$为Jordan块。</p><p>若 $J_i$都是一阶的，则A非亏损，否则 亏损</p></li><li><p>$\lambda$矩阵与特征矩阵：</p><p>$\lambda$矩阵：$A(\lambda)&#x3D;(a_{ij}(\lambda))$</p><p>特征矩阵：$\lambda I - A$</p><ul><li><p>$\lambda$矩阵的秩：$\lambda$矩阵的不为0的子式的最大阶数</p></li><li><p>$\lambda$矩阵的三种初等变换：</p><ul><li>任意两行或者两列位置互换</li><li>某一列或行 乘以 非0常数</li><li>某一列或行 乘以 $\phi(\lambda)$加到某列或行</li></ul></li><li><p>$\lambda$矩阵的等价：$A(\lambda)$可以经过一系列初等变换为$B(\lambda)$</p></li><li><p>$\lambda$矩阵的标准形：把$A(\lambda)$通过若干初等变换成$diag(d_1(\lambda), d_2(\lambda), …,d_r(\lambda),0,,,0 )$，且$d_i(\lambda)| d_i+1(\lambda)$，$d_i(\lambda)$叫做<strong>不变因子,</strong> 如$d_1(\lambda)&#x3D; 1, d_2(\lambda)&#x3D; \lambda,d_3(\lambda)&#x3D; \lambda^2 + \lambda$</p></li><li><p>例题</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/a5114f595e30d76626bcfc27aaa0fc80_720.png" alt="img"></p></li></ul></li><li><p>$\lambda$矩阵的k阶行列式因子：$\lambda$矩阵的所有$k$阶子式的行列式的首一的最大公因式</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/232fb561112648f255db8dcc2360f336_720.png" alt="img"></p><p>且 $D_k(\lambda) &#x3D; d_1(\lambda)…d_k(\lambda)$， $d_k(\lambda) &#x3D; \frac{D_k(\lambda)}{D_{k-1}(\lambda)}$</p></li><li><p>$A(\lambda)$等价于$B(\lambda)$  当且仅当 两者有<strong>相同的 行列式因子 和 不变因子</strong></p></li><li><p>$\lambda$矩阵的初等因子：把次数大于0的不变因子 分解成 互不相同的首1的不可约因式的乘积</p><p>例题：</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/aff715c5014421fb538f703726993770_720.png" alt="img"></p></li><li><p>Jordan标准型的全部初等因子 等于 每个Jordan块的初等因子 $(\lambda - \lambda_1)^{k_1}, (\lambda - \lambda_2)^{k_2}, ,,,(\lambda - \lambda_s)^{k_s}$</p></li><li><p>已知初等因子 反推其Jordan块：</p><ul><li>求$\lambda I - A$的全部初等因子  $(\lambda - \lambda_1)^{k_1}, (\lambda - \lambda_2)^{k_2}, ,,,(\lambda - \lambda_s)^{k_s}$</li><li>求每一个Jordan块</li><li>组合全部的Jordan块得到Jordan标准型</li></ul></li><li><p>例题</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/dbd3d59fc4c6604e2dc66320cbedec48_720.png" alt="img"></p></li><li><p>谱分解：一个n阶方阵可对角化 等价于 A有n个线性无关特征向量</p><p>$A &#x3D; \sum_{i&#x3D;1}^n \lambda_i x_i y_i^T$  （$x_i$为特征值$\lambda_i$对应右特征向量， $y_i$是左特征向量 $A^T y_i &#x3D; \lambda_i y_i$）</p></li></ul><h2 id="3-5-Gauss变换与三角分解"><a href="#3-5-Gauss变换与三角分解" class="headerlink" title="3.5 Gauss变换与三角分解"></a>3.5 Gauss变换与三角分解</h2><h3 id="3-5-1-Gauss变换"><a href="#3-5-1-Gauss变换" class="headerlink" title="3.5.1 Gauss变换"></a>3.5.1 Gauss变换</h3><ul><li>Gauss向量与Gauss矩阵：<ul><li>Gauss向量：$g^{(k)} &#x3D; (0,0,…0,g_{(k+1)k},..,g_{nk})^T$</li><li>Gauss矩阵：$G_k &#x3D; I - g^{(k)}e_k^{T}$ （初等下三角矩阵）</li><li>Gauss矩阵逆矩阵：$G_k^{-1} &#x3D; I + g^{(k)}e_k^{T}$</li></ul></li><li>性质：<ul><li>$G_k x &#x3D; (x_1, x_2,…,x_k,0,…,0)$</li></ul></li></ul><h3 id="3-5-2-Gauss消元与三角分解"><a href="#3-5-2-Gauss消元与三角分解" class="headerlink" title="3.5.2 Gauss消元与三角分解"></a>3.5.2 Gauss消元与三角分解</h3><ul><li><p>Gauss消元：</p><p>$Ax &#x3D; b$ </p><ul><li>step1：$L_1 &#x3D; I - l^{(1)}e_1^{T} ， (l_{i1} &#x3D; \frac{a_{i1}^{(1)}}{a_{11}^{(1)}})$， $A^{(2)} &#x3D; L_1 A^{(1)}$， $b^{(2)} &#x3D; L_1 b^{(1)}$  此时$A^{(2)}$的第一列的对角线下方全为0</li><li>step2：$L_2 &#x3D; I - l^{(2)}e_2^{T} ， (l_{i2} &#x3D; \frac{a_{i2}^{(2)}}{a_{22}^{(2)}})$， $A^{(3)} &#x3D; L_2 A^{(2)}$， $b^{(3)} &#x3D; L_2 b^{(2)}$  此时$A^{(3)}$的第一，二列的对角线下方全为0</li><li>一直做n-1次</li></ul></li><li><p>三角分解：n阶方阵分解成一个下三角矩阵L和一个上三角矩阵U的乘积 $A &#x3D; LU$</p><ul><li>分类：<ul><li>Doolittle分解：$A &#x3D; LU$ （$L$是单位下三角，U上三角）</li><li>Crout分解：$A &#x3D; LU$ （$L$是下三角，U单位上三角）</li></ul></li><li>LU分解不唯一 $A &#x3D; LU &#x3D; LDD^{-1}U &#x3D; L^{‘}U^{‘}$， $D$为对角矩阵  </li><li>定理1：对非奇异的n阶方阵，其各阶顺序主子式不为0，则A可以做三角分解，且分解唯一 ， $A &#x3D; LDU$， $d_k &#x3D; \frac{\triangle_k}{\triangle_{k-1}}$</li></ul></li><li><p>例题：</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/7ddd7a2276d7326e0253d2508cfb24dd_720.png" alt="img"></p></li><li><p>Cholesky（平方根分解）</p><ul><li><p>定理：对对称正定的$A$，存在唯一的对角线为正的下三角矩阵$L$，使得$A &#x3D; L L ^T$</p></li><li><p>例题：</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/7ddd7a2276d7326e0253d2508cfb24dd_720-17328696385191.png" alt="img"></p></li></ul></li></ul><h2 id="3-6-最大秩分解"><a href="#3-6-最大秩分解" class="headerlink" title="3.6 最大秩分解"></a>3.6 最大秩分解</h2><ul><li><p>最大秩矩阵：$A &#x3D; (a_{ij})_{m \cdot n}$， 若$m \leq n, Rank(A) &#x3D; m$，被称作行最大秩矩阵； 若$m \geq n, Rank(A) &#x3D; n$，被称作列最大秩矩阵</p></li><li><p>满秩分解：$A &#x3D; (a_{ij})_{m \cdot n}, rank(A) &#x3D; r$，一定存在$B \in C^{m \cdot r}_r, C \in C^{r \cdot n}_r$，使得$A &#x3D; BC$</p></li><li><p>举例：</p><p><img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/ad2c9397b594d4e5a3e8161a60a4ce30_720.png" alt="img"></p></li></ul><h2 id="3-7-奇异值分解"><a href="#3-7-奇异值分解" class="headerlink" title="3.7 奇异值分解"></a>3.7 奇异值分解</h2><ul><li>定义：对矩阵$A$，存在正交矩阵或酉矩阵$U,V$，使得$$A &#x3D; U \begin{bmatrix} \Sigma_r &amp; 0 \ 0 &amp; 0 \end{bmatrix} V^{T}$$, 其中$\Sigma_r &#x3D; diag(\sigma_1,..,\sigma_r)$</li><li>例题：<img src="/2024/11/27/%E7%9F%A9%E9%98%B5%E7%90%86%E8%AE%BA%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0%E7%AB%A0/49a79df4ee74d7fc832e9664cba56790_720.png" alt="img"></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java程序设计复习章</title>
    <link href="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/"/>
    <url>/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-JAVA概述"><a href="#1-JAVA概述" class="headerlink" title="1. JAVA概述"></a>1. JAVA概述</h1><p><strong>JAVA语言的特点</strong></p><ul><li>跨平台性：java源程序被编译后生成的二进制字节码与平台无关，但能被JVM识别。java解释器得到字节码后，对其进行转化，使之能在不同的平台上运行。</li><li>面向对象：面向对象技术使得应用程序开发变得简单应用，节省代码</li><li>安全性：java数据结构是完整的对象，这些封装过的数据类型具有安全性； 编译时要进行java语言和语义的检查</li><li>多线程</li><li>简单性</li><li>解释执行</li><li>分布性</li></ul><p><strong>程序编译执行过程</strong></p><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241126105916764.png" alt="image-20241126105916764"></p><p>一次编译，到处运行</p><p><strong>JVM</strong></p><ul><li>JVM通过在实际的计算机上仿真模拟各种计算机功能来实现</li><li>java程序在不同平台上运行是不用重新编译</li><li>jvm屏蔽看与具体平台相关的信息，只需编译成在jvm上运行的字节码，就能在多种平台上不加修改的运行</li></ul><h1 id="2-JAVA基本语法"><a href="#2-JAVA基本语法" class="headerlink" title="2. JAVA基本语法"></a>2. JAVA基本语法</h1><h2 id="2-1-程序构成"><a href="#2-1-程序构成" class="headerlink" title="2.1 程序构成"></a>2.1 程序构成</h2><ul><li><p>逻辑构成：</p><ol><li><p>程序头包的引用</p></li><li><p>类的定义：可用有多个类定义，但是必须有应该主类，包含main方法，作为程序的入口。主类的名字要同文件名一致。</p></li></ol></li><li><p>物理构成：</p><ol><li>语句：一行以分号”;”结尾的语句</li><li>块：用括号{}界定的语句序列</li><li>空白</li></ol></li><li><p>注释语句</p></li><li><p>标识符、关键字、转义符</p><ol><li><p>标识符：赋予 变量，类，方法等的名称：</p><p><code>myName，My_name，Points，$points,_sys_ta，OK，_23b，_3_</code></p></li><li><p>关键字：自带的用于标志数据类型名 或 程序构造名 等的标识，如 public int</p></li><li><p>转义符：有特殊意义的，很难用一般方法表示 的字符，如 换行 回车</p><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241126111445613.png" alt="image-20241126111445613"></p></li></ol></li></ul><h2 id="2-2-基本数据类型与表达式"><a href="#2-2-基本数据类型与表达式" class="headerlink" title="2.2 基本数据类型与表达式"></a>2.2 基本数据类型与表达式</h2><ul><li><p>常量 与 变量</p></li><li><p>基本数据类型：</p><p>byte(8 bit)  int(32 bit)  long(64 bit) char (16 bit) float(32 bit) double(64 bit)</p><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241126111612400.png" alt="image-20241126111612400"></p><ol><li>文字量：直接出现在程序中并被编译器直接使用的值</li><li>整数类： 如<code>long N = 2209050101L</code></li><li>浮点类：如果数字包含小数点 或在 数字后带字母F 或 D， 为浮点数。如<code>3.14f</code></li><li>逻辑类：<code>boolean flag = true;</code></li><li>文本类：必须包含单引号(‘ ‘)引用的文字</li></ol></li><li><p>字符串String及其文字量</p><p>String是一个类，如<code>String animal = &quot;walrus&quot;</code></p><p>字符串文字量：由0个或者多个字符组成，以双引号括起来</p></li></ul><h2 id="2-3-运算符-与-表达式"><a href="#2-3-运算符-与-表达式" class="headerlink" title="2.3 运算符 与 表达式"></a>2.3 运算符 与 表达式</h2><h3 id="2-3-1-运算符"><a href="#2-3-1-运算符" class="headerlink" title="2.3.1 运算符"></a>2.3.1 运算符</h3><ul><li><p>算术运算符：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">+</span> <span class="hljs-literal">-</span> <span class="hljs-comment">* / %</span> <span class="hljs-literal">++</span> <span class="hljs-literal">--</span><br></code></pre></td></tr></table></figure></li><li><p>赋值运算符:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">=  *=  /=  &lt;&lt;=  &gt;&gt;= </span><br></code></pre></td></tr></table></figure></li><li><p>关系运算符：类型是boolean</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// 算术比较符</span><br>&lt; &lt;= &gt;= &gt;<br><span class="hljs-comment">// 类型比较符</span><br>e <span class="hljs-keyword">instanceof</span> Point <span class="hljs-comment">// Point是一个类</span><br></code></pre></td></tr></table></figure></li><li><p>逻辑运算符：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// 与 &amp;&amp;</span><br><span class="hljs-comment">// 或 ||</span><br><span class="hljs-comment">// 非 !</span><br></code></pre></td></tr></table></figure></li><li><p>条件运算符：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span> 表达式1 ? 表达式2 : 表达式3<br><span class="hljs-string">//</span> 先计算表达式1<br><span class="hljs-string">//</span> 为<span class="hljs-literal">true</span> --&gt; 选择表达式2的值<br><span class="hljs-string">//</span> 为<span class="hljs-literal">false</span> --&gt; 选择表达式3的值<br>result = <span class="hljs-params">(score&gt;60)</span> ? <span class="hljs-string">&quot;通过&quot;</span> : <span class="hljs-string">&quot;不通过&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>位逻辑运算符</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">// &amp; 按位 与</span><br><span class="hljs-comment">// | 按位 或</span><br><span class="hljs-comment">// ^ 按位 异或（不同为1）</span><br><span class="hljs-comment">// ~ 按位取反</span><br></code></pre></td></tr></table></figure></li><li><p>位移运算符</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">// &lt;&lt; 左移 (<span class="hljs-keyword">x</span>&lt;&lt;n  即<span class="hljs-keyword">x</span>乘以<span class="hljs-number">2</span>的n次方)<br>// &gt;&gt; 右移 (<span class="hljs-keyword">x</span>&gt;&gt;n  即<span class="hljs-keyword">x</span>除以。。。。)<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-2-类型转换"><a href="#2-3-2-类型转换" class="headerlink" title="2.3.2 类型转换"></a>2.3.2 类型转换</h3><ul><li>扩展转换：</li></ul><p>​从一种整数类型 到 另一种整数类型  或 从float到double的转换 不损失任何信息</p><p>​从整数类型 到double转化 会损失精度</p><ul><li>窄化转换：</li></ul><p>​窄化转换可能会丢失信息</p><ul><li><p>赋值转换：</p><p>将表达式类型转换为定制变量的类型</p></li><li><p>方法调用转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">float</span> <span class="hljs-variable">prc</span> <span class="hljs-operator">=</span> Float.parseFloat(<span class="hljs-string">&quot;6.0&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>强制转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(<span class="hljs-type">float</span>)<span class="hljs-number">5.0</span><br></code></pre></td></tr></table></figure></li><li><p>字符串转换：任何类型都可以转换成字符串类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>x + <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//转成String</span><br></code></pre></td></tr></table></figure></li><li><p>不能从Double自动转float</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">float f1 <span class="hljs-operator">=</span> <span class="hljs-number">1</span>D<span class="hljs-comment">; //错</span><br>float f2 <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span><span class="hljs-comment">; //错</span><br>float f3 <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span>f<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li><p>宽类型数据 到 窄类型 数据的转换</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">float</span> <span class="hljs-operator">=</span> (float) <span class="hljs-number">1</span>D<span class="hljs-comment">;</span><br><span class="hljs-attribute">float</span> <span class="hljs-operator">=</span> (float) <span class="hljs-number">1.2</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-3-输入输出流"><a href="#2-3-3-输入输出流" class="headerlink" title="2.3.3 输入输出流"></a>2.3.3 输入输出流</h3><ul><li><p>标准输入流 System.in</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>(<span class="hljs-number">10</span>);<br>System.in.read(b); <span class="hljs-comment">// 从输入流中读取字节到b</span><br></code></pre></td></tr></table></figure></li><li><p>标准输出流</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;hello&quot;);<br></code></pre></td></tr></table></figure></li><li><p>从键盘输入数据，并输出到屏幕</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter1;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">scannnerTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scan.next();<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> scan.nextInt();<br>scan.close();<br>System.out.println(name+<span class="hljs-string">&quot;\t&quot;</span> + age);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-4-流程控制"><a href="#2-4-流程控制" class="headerlink" title="2.4 流程控制"></a>2.4 流程控制</h2><p>具体语法不赘述</p><p><strong>变量作用域</strong>：java循环等代码块内部可以访问到外部的变量 但是外部无法访问 内部的变量。内部的变量是局部的</p><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241126133523240.png" alt="image-20241126133523240"></p><h2 id="2-5-数组使用"><a href="#2-5-数组使用" class="headerlink" title="2.5 数组使用"></a>2.5 数组使用</h2><h3 id="2-5-1-概念"><a href="#2-5-1-概念" class="headerlink" title="2.5.1 概念"></a>2.5.1 概念</h3><p>数组：由同一类型的一连串对象或者基本类型数据组成，封装在一个数组名称下</p><p>每个数组都有一个 成员变量 length</p><h3 id="2-5-2-声明"><a href="#2-5-2-声明" class="headerlink" title="2.5.2 声明"></a>2.5.2 声明</h3><p>声明数组无需指定元素个数，也不用分配空间 <code>int[ ] Array1</code>或 <code>int Array2[]</code></p><p>必须经过初始化才能使用</p><h3 id="2-5-3-创建"><a href="#2-5-3-创建" class="headerlink" title="2.5.3 创建"></a>2.5.3 创建</h3><p>通过关键字new构建数组，可以指定类型和元素个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 先申明 后创建</span><br><span class="hljs-type">int</span>[] ai;<br>ai = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">// 初始化为0</span><br>String[] s;<br>s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>];<span class="hljs-comment">// 初始化为null</span><br><br><span class="hljs-comment">// 2， 声明和创建一起做</span><br><span class="hljs-type">int</span> ai[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br><br><span class="hljs-comment">// 3. 一条声明语句创建多个数组</span><br>String s1[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">10</span>], s3[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">9</span>];<br>String[] s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">10</span>], s3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">9</span>];<br><br></code></pre></td></tr></table></figure><h3 id="2-5-4-初始化"><a href="#2-5-4-初始化" class="headerlink" title="2.5.4 初始化"></a>2.5.4 初始化</h3><p>若声明数组名时，给出了初始值，程序就会利用初始值创建数组并左初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">22</span>,<span class="hljs-number">2</span>,<span class="hljs-number">345</span>&#125;;<br></code></pre></td></tr></table></figure><p>若没有指定处置，数组被赋予默认的初始值</p><ul><li>基本类型：0</li><li>boolean：false;</li><li>引用类型：null</li></ul><h3 id="2-5-5-引用"><a href="#2-5-5-引用" class="headerlink" title="2.5.5 引用"></a>2.5.5 引用</h3><p>方法：<code>arrary[indnx]</code></p><p>元素下标最大值：length-1</p><p><strong>数组名 是一个 引用</strong>： <code>int[] a1 = &#123;12,45,2&#125;; int[] a2 = a1</code></p><p>此时，a2 与  a1 引用 同一块内存上的数组， 当两者里面有一个修改时，另一个也对应修改了</p><p>举例：复制数组(arraycopy(源数组， 起始索引， 目标数组， 目标数组起始索引， 拷贝长度))</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span>[] cc = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;;<br><span class="hljs-type">char</span>[] bb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">3</span>];<br>System.arraycopy(cc, <span class="hljs-number">1</span>, bb, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>System.out.println(bb);<br></code></pre></td></tr></table></figure><h3 id="2-5-6-多维数组"><a href="#2-5-6-多维数组" class="headerlink" title="2.5.6 多维数组"></a>2.5.6 多维数组</h3><ul><li><p>二维数组：int[][] gradeTable</p></li><li><p>二维数组构造：<code>int[][] myarrary = new int[2][3];</code> <code>int[][] a2 = &#123;&#123;4,2,1,4&#125;, &#123;3,6,7,1&#125;&#125;;</code></p></li><li><p>二维数组时 引用一维数组的 数组</p></li><li><p>二维数组的长度：<code>array.length </code>值为行数  <code>array[i].length</code>为列数</p></li><li><p>分步构造二维数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] a1;<br>a1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][];<br>a1[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>a1[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br><br><span class="hljs-type">int</span>[] x = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span>[] y = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span>[] z = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>&#125;; <br><br>a1[<span class="hljs-number">0</span>] = y;<br>a1[<span class="hljs-number">1</span>] = x;<br>a1[<span class="hljs-number">2</span>] = z;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] row : a1) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> e : row) &#123;<br>System.out.print(e + <span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-6-作业"><a href="#2-6-作业" class="headerlink" title="2.6 作业"></a>2.6 作业</h2><ol><li><p>统计平均成绩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-type">int</span>[] courseID = &#123;<span class="hljs-number">1001</span>,<span class="hljs-number">2001</span>,<span class="hljs-number">3001</span>&#125;;<br><span class="hljs-type">int</span>[][] scores = &#123;&#123;<span class="hljs-number">90</span>,<span class="hljs-number">79</span>, <span class="hljs-number">96</span>, <span class="hljs-number">88</span>&#125;, &#123;<span class="hljs-number">89</span>,<span class="hljs-number">91</span>, <span class="hljs-number">78</span>, <span class="hljs-number">90</span>&#125;, &#123;<span class="hljs-number">88</span>, <span class="hljs-number">97</span>, <span class="hljs-number">65</span>, <span class="hljs-number">99</span>&#125;&#125;;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>[] score : scores) &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> grade : score) &#123;<br>sum+= grade;<br><br>&#125;<br><span class="hljs-type">double</span> <span class="hljs-variable">average</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)sum / score.length;<br>System.out.println(<span class="hljs-string">&quot;课程编号为：&quot;</span>+courseID[i]+<span class="hljs-string">&quot;的课程的学生平均成绩为：&quot;</span>+average);<br>i++;<br>&#125;<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>输出99乘法表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">worrk2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">9</span> ; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=i; j++) &#123;<br>System.out.print(i +<span class="hljs-string">&quot;*&quot;</span> + j + <span class="hljs-string">&quot;=&quot;</span> +i*j + <span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>利用公式e&#x3D;1&#x2F;0!+1&#x2F;1! + 1&#x2F;2! + … + 1&#x2F;n!，近似计算e的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work3</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-type">double</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>;<br><span class="hljs-type">int</span> n=<span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n;i++ ) &#123;<br>temp *= i;<br><span class="hljs-type">double</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>/temp;<br>res += now;<br><br>&#125;<br><br>System.out.printf(<span class="hljs-string">&quot;%d次迭代计算出来e的近似值为%.10f&quot;</span>, n,res);<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>该问题叙述如下：“鸡翁一，值钱五；鸡母一，值钱三；鸡雏三，值钱一；百钱买百鸡，则翁、母、雏各几何？”试编程求解之。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work4</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-comment">// 翁（5) 母（3） 雏(1/3)</span><br><span class="hljs-comment">// 100 钱  100鸡</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=<span class="hljs-number">100</span>; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;= <span class="hljs-number">100</span>-i; j++) &#123;<br><span class="hljs-comment">// i只翁 j只母  100-i-j只雏</span><br><span class="hljs-keyword">if</span>(( <span class="hljs-number">100</span>-i-j)%<span class="hljs-number">3</span>==<span class="hljs-number">0</span> &amp;&amp; (<span class="hljs-number">5</span>*i + <span class="hljs-number">3</span>*j + (<span class="hljs-number">100</span>-i-j)/<span class="hljs-number">3</span> == <span class="hljs-number">100</span> )) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span> -i -j;<br>System.out.println(i + <span class="hljs-string">&quot;只翁&quot;</span> + <span class="hljs-string">&quot;\t&quot;</span> + j + <span class="hljs-string">&quot;只母\t&quot;</span>+ k + <span class="hljs-string">&quot;只雏\t&quot;</span>);<br><br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>将字符串形式的二进制数转换为十进制数值，并返回。例如，“00000101”对应十进制的5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work5</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Bin2Dec</span><span class="hljs-params">(String binstr)</span> &#123;<br><span class="hljs-comment">// 1010</span><br><span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;binstr.length(); i++) &#123;<br><span class="hljs-type">char</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> binstr.charAt(binstr.length() - i -<span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Integer.parseInt(p+<span class="hljs-string">&quot;&quot;</span>);<br>res += Math.pow(<span class="hljs-number">2</span>, i) * c ;<br><br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br>System.out.println(Bin2Dec(<span class="hljs-string">&quot;10000010&quot;</span>));<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>String取index上的字符 要用 方法<code>charAt(index)</code></li><li>char 变 int 两种方法：<ul><li><code>int c = Integer.parseInt(p+&quot;&quot;);</code></li><li><code>int c = p - &#39;0&#39;;</code></li></ul></li><li>pow方法在Math类里面</li></ul></li></ol><h1 id="3-类与对象"><a href="#3-类与对象" class="headerlink" title="3. 类与对象"></a>3. 类与对象</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>面向对象程序设计 OOP主要涉及 抽象，封装，继承，多态</p><ul><li>对象：万物皆对象，都有其标识，属性和行为</li><li>类：将属性和行为系相同的对象 归为一类，可以看作对象的抽象，每个对象都属于特定的类。</li><li>抽象：忽略问题中与当前目标无关的方面</li><li>封装：使用者不必知道行为的实现细节，只需设计者提供的消息来访问对象</li><li>继承：新的类可以获得已有类的属性和行为</li><li>多态：不同类的对象可以响应同名的方法，具体实现方式不同</li></ul><h2 id="3-2-类与对象"><a href="#3-2-类与对象" class="headerlink" title="3.2 类与对象"></a>3.2 类与对象</h2><ul><li><p>声明方式：<code>public abstract class class_name extends father_name implements 接口名&#123;&#125;</code></p></li><li><p>变量与对象：变量出来能存储基本数据类型的数据外，还可以存储对象的引用</p><ul><li><p>对象的声明：<code>People p1</code>；声明一个引用对象时并没用对象生成</p></li><li><p>对象的创建：<code>p1 = new People();</code> 在内存中为此对象分配内存空间，返回对象的引用。</p></li><li><p>对象数组的创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">People[] P = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;P.length; i++ )&#123;<br>    P[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>自动装箱拆箱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br></code></pre></td></tr></table></figure></li><li><p>变量：</p><ul><li><p>实例变量：没用static修饰的变量，用于存储所有实例都需要的属性信息，不同实例的属性值会 不同</p></li><li><p>类变量：静态变量，需要加<strong>static</strong>修饰</p><ul><li>不管类的对象有多少，<strong>类变量只有一份</strong>，在整个类中只有一个值。静态变量属于类，所有对象都可以访问；而实例变量是仅属于一个对象的</li><li>类初始化的同时被赋值</li><li>在类加载时出现，也就是说在对象还没产生式，就已经出现了。</li><li>适用情况：需要共享的数据</li></ul></li><li><p>举例：Point类：有两个私有变量保存每个点的坐标，一个类变量保存已有点的个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">pointCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br><br><span class="hljs-built_in">this</span>.x = x;<br><span class="hljs-built_in">this</span>.y = y;<br><br>pointCount++;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><br>System.out.println(Point.pointCount);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">4</span>,<span class="hljs-number">8</span>);<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">7</span>,<span class="hljs-number">9</span>).pointCount);<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>final修饰符：一经初始化 就不可改变</p></li><li><p>方法成员：</p><ul><li>定义类的行为</li><li>分类：<ul><li>实例方法：声明式不加static修饰符，表示特定对象的行为</li><li>类方法：当方法成员不依赖于具体实例的属性时，可以将其声明为静态方法。用static修饰</li></ul></li><li>重载：一个类中名字相同的多个方法；其参数列表不同，返回值可以相同也可以不同，通过方法重载能够使得一个方法接收不同数据类型的数据<ul><li>参数个数不同</li><li>参数类型不同</li><li>个数和类型相同，但是顺序不同</li></ul></li></ul></li></ul><h2 id="3-3-访问控制"><a href="#3-3-访问控制" class="headerlink" title="3.3 访问控制"></a>3.3 访问控制</h2><ul><li><p>类的访问控制：只有public和无修饰符两种； 对无修饰符的类，在不同的包里无法问</p><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241128203535571.png" alt="image-20241128203535571"></p></li><li><p>类成员的访问控制：公有，受保护的，无修饰的，私有的 </p><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241128204036596.png" alt="image-20241128204036596"></p><p>对私有数据成员的方法，要设置相应的公有的get和set方法</p></li></ul><h2 id="3-4-包（Package）"><a href="#3-4-包（Package）" class="headerlink" title="3.4 包（Package）"></a>3.4 包（Package）</h2><ul><li>概念：是一组类的集合，把相关的源代码文件组织在一起，利用包来划分名字空间，提供包级别的封装及存取权限</li><li>包名：使用小写字母</li></ul><h2 id="3-5-对象的初始化与回收"><a href="#3-5-对象的初始化与回收" class="headerlink" title="3.5 对象的初始化与回收"></a>3.5 对象的初始化与回收</h2><ul><li>实例对象初始化：在系统生成对象时，会为对象分配内存空间，并自动调用 <strong>构造方法</strong> 对实例变量做初始化。</li><li>构造方法：一种与类同名的特殊方法：用于初始化类的新对象<ul><li>无返回类型，无void</li><li>不能再程序里显示调用</li><li>默认的构造方法，给对象的属性值赋值0或null</li></ul></li><li>内存回收技术：系统通过垃圾收集器周期性释放无用对象所使用的内存</li></ul><h2 id="3-6-枚举类型"><a href="#3-6-枚举类型" class="headerlink" title="3.6 枚举类型"></a>3.6 枚举类型</h2><p>需要一个有限集合，集合中数据为特定值的时候使用枚举类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter2;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Score</span>&#123;<br><span class="hljs-comment">//枚举元素（final static 对象成员）</span><br>GREAT(<span class="hljs-string">&quot;优秀&quot;</span>, <span class="hljs-number">1</span>), PASS(<span class="hljs-string">&quot;通过&quot;</span>, <span class="hljs-number">2</span>), FAILED(<span class="hljs-string">&quot;未通过&quot;</span>,<span class="hljs-number">3</span>);<br><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Score</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-comment">// 构造函数只能是private</span><br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.value = value;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> value;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br><span class="hljs-built_in">this</span>.value = value;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;-&quot;</span> + value;&#125;<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScoreTester</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-type">Score</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> Score.FAILED;<br>System.out.println(s1);<br><br><span class="hljs-type">Score</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> Score.GREAT;<br>System.out.println(s2);<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-7-举例-BankAccount类"><a href="#3-7-举例-BankAccount类" class="headerlink" title="3.7 举例 BankAccount类"></a>3.7 举例 BankAccount类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BankAccount</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">LAST_ACCOUNT_NUMBER</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">private</span> String ownerName;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> accountNumber;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">float</span> balance;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BankAccount</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BankAccount</span><span class="hljs-params">(String ownerName)</span> &#123;<br><span class="hljs-built_in">this</span>(ownerName, <span class="hljs-number">0</span>);<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BankAccount</span><span class="hljs-params">(String ownerName,  <span class="hljs-type">float</span> balance)</span> &#123;<br><br><span class="hljs-built_in">this</span>.ownerName = ownerName;<br><br>accountNumber = ++LAST_ACCOUNT_NUMBER;<br><br><span class="hljs-built_in">this</span>.balance = balance;<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOwnerName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> ownerName;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOwnerName</span><span class="hljs-params">(String ownerName)</span> &#123;<br><span class="hljs-built_in">this</span>.ownerName = ownerName;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> balance;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBalance</span><span class="hljs-params">(<span class="hljs-type">float</span> balance)</span> &#123;<br><span class="hljs-built_in">this</span>.balance = balance;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//return &quot;BankAccount [ownerName=&quot; + ownerName + &quot;, accountNumber=&quot; + new java.text.DecimalFormat(&quot;000000&quot;).format(accountNumber) + &quot;, balance=&quot; + new java.text.DecimalFormat(&quot;$0.00&quot;).format(balance)</span><br><span class="hljs-comment">//+ &quot;]&quot;;</span><br><br><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;BankAccount [ownerName=&quot;</span> + ownerName + <span class="hljs-string">&quot;, accountNumber=&quot;</span> + String.format(<span class="hljs-string">&quot;%1$06d&quot;</span>,accountNumber) + <span class="hljs-string">&quot;, balance=&quot;</span> + String.format(<span class="hljs-string">&quot;$%1$.2f&quot;</span>,balance)<br>+ <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><span class="hljs-comment">// 存款</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">deposit</span><span class="hljs-params">(<span class="hljs-type">float</span> anAmount)</span> &#123;<br>balance += anAmount;<br><span class="hljs-keyword">return</span> balance;<br>&#125;<br><br><span class="hljs-comment">// 取款</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">float</span> anAmount)</span> &#123;<br><span class="hljs-keyword">if</span>(anAmount &lt;= balance) &#123;<br>balance -= anAmount;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-type">BankAccount</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankAccount</span>(<span class="hljs-string">&quot;p1&quot;</span>, <span class="hljs-number">100</span>);<br>System.out.println(b1);<br>b1.deposit(<span class="hljs-number">11.56f</span>);<br>System.out.println(b1);<br>System.out.println(BankAccount.LAST_ACCOUNT_NUMBER);<br><br><br>System.out.println(<span class="hljs-string">&quot;----------------------&quot;</span>);<br><br><span class="hljs-type">BankAccount</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankAccount</span>(<span class="hljs-string">&quot;p2&quot;</span>, <span class="hljs-number">10</span>);<br>System.out.println(b2);<br>b2.withdraw(<span class="hljs-number">13.6f</span>);<br>System.out.println(b2);<br>System.out.println(BankAccount.LAST_ACCOUNT_NUMBER);<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-8-例题"><a href="#3-8-例题" class="headerlink" title="3.8 例题"></a>3.8 例题</h2><ul><li><p><strong>定义一个复数类Complex，具有表示虚部和实部的re和im的私有属性及其相应的get&#x2F;set方法，具有适当的构造方法（包括有参和无参），提供conj()和abs()方法分别用于返回该复数的共轭复数和模，toString( )方法用于返回复数对象形如“1 + 2i”或“1 -2i”的字符串表示, 其中i表示虚数单位。在main( )方法中创建复数x&#x3D;5-6i和y&#x3D;3+4i，然后输出它们及其共轭复数和模。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> re;<br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> im;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Complex</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.re = <span class="hljs-number">0.0</span>;<br><span class="hljs-built_in">this</span>.im = <span class="hljs-number">0.0</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Complex</span><span class="hljs-params">(<span class="hljs-type">double</span> re, <span class="hljs-type">double</span> im)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.re = re;<br><span class="hljs-built_in">this</span>.im = im;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getRe</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> re;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRe</span><span class="hljs-params">(<span class="hljs-type">double</span> re)</span> &#123;<br><span class="hljs-built_in">this</span>.re = re;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getIm</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> im;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIm</span><span class="hljs-params">(<span class="hljs-type">double</span> im)</span> &#123;<br><span class="hljs-built_in">this</span>.im = im;<br>&#125;<br><br><span class="hljs-keyword">public</span> Complex <span class="hljs-title function_">conj</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Complex</span>(getRe(), -getIm());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">abs</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> Math.sqrt(Math.pow(getIm(), <span class="hljs-number">2</span>) + Math.pow(getRe(), <span class="hljs-number">2</span>));<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">im</span> <span class="hljs-operator">=</span>  getIm();<br><span class="hljs-keyword">if</span>(im &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> getRe() + <span class="hljs-string">&quot;+&quot;</span>+im + <span class="hljs-string">&quot;i&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> getRe() + <span class="hljs-string">&quot;-&quot;</span>+Math.abs(im)+<span class="hljs-string">&quot;i&quot;</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-type">Complex</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Complex</span>(<span class="hljs-number">5</span>,-<span class="hljs-number">6</span>);<br><span class="hljs-type">Complex</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Complex</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>System.out.println(<span class="hljs-string">&quot;x的共轭复数：&quot;</span>+ x.conj().toString() + <span class="hljs-string">&quot; x的模：&quot;</span>+x.abs());<br>System.out.println(<span class="hljs-string">&quot;y的共轭复数：&quot;</span>+ y.conj().toString() + <span class="hljs-string">&quot; y的模：&quot;</span>+y.abs());<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>声明一个学生Student及其测试类StudentTester。 </p><p>① Student类数据成员包括学号、姓名、性别、成绩。学号（从2209050101开始）自动维护且不许外部修改，设计适当的构造方法、数据成员的set&#x2F;get方法，重写toString方法用于输出学生信息。</p><p>② 在StudentTester类中创建一个Student类型的数组，并引用动态创建的若干个Student实例。对学生信息进行设置修改和访问输出。</p><p>③ 在StudentTester类中定义一个静态方法printStudents，以表格形式输出学生数组。创建好数组或修改元素后可以调用该方法输出数组，以观察数据变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter2;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span>&#123;<br>Male,<br>Female;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">2209050101l</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> now_number;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> Gender sex;<br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> grade;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, Gender sex, <span class="hljs-type">double</span> grade)</span> &#123;<br><br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.sex = sex;<br><span class="hljs-built_in">this</span>.grade = grade;<br><br>now_number = number++;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> Gender <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> sex;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(Gender sex)</span> &#123;<br><span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getGrade</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> grade;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGrade</span><span class="hljs-params">(<span class="hljs-type">double</span> grade)</span> &#123;<br><span class="hljs-built_in">this</span>.grade = grade;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student [now_number=&quot;</span> + now_number + <span class="hljs-string">&quot;, getSex()=&quot;</span> + getSex() + <span class="hljs-string">&quot;, getGrade()=&quot;</span> + getGrade() + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">package</span> com.tu.chapter2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentTester</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printStudents</span><span class="hljs-params">(Student[] students)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;学号\t\t姓名\t性别\t成绩&quot;</span>);<br><span class="hljs-keyword">for</span>(Student student : students) &#123;<br>System.out.println(student.getNow_number() +<span class="hljs-string">&quot;\t&quot;</span>+ student.getName() +<span class="hljs-string">&quot;\t&quot;</span>+ student.getSex() +<span class="hljs-string">&quot;\t&quot;</span>+ student.getGrade());<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><br>Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">3</span>];<br><br>students[<span class="hljs-number">0</span>]  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;s1&quot;</span>, Gender.Female, <span class="hljs-number">98.3</span>);<br>students[<span class="hljs-number">1</span>]  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;s2&quot;</span>, Gender.Male, <span class="hljs-number">80.3</span>);<br>students[<span class="hljs-number">2</span>]  = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;s3&quot;</span>, Gender.Female, <span class="hljs-number">77.9</span>);<br><br>printStudents(students);<br><br><span class="hljs-comment">// 后续添加 get set方法做测试</span><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="4-继承、接口和多态"><a href="#4-继承、接口和多态" class="headerlink" title="4. 继承、接口和多态"></a>4. 继承、接口和多态</h1><h2 id="4-1-继承"><a href="#4-1-继承" class="headerlink" title="4.1 继承"></a>4.1 继承</h2><ul><li>父类是所有子类的公共属性及方法的集合</li><li>基类（超类）与派生类（子类） 子类 is a 父类</li><li>子类不能直接访问从父类中继承的私有属性及方法，但可使用公有方法进行访问</li><li>属性隐藏：<ul><li>子类又声明了与父类中相同的成员变量名，则从父类继承的变量会被隐藏</li><li>子类执行继承自父类的操作时，处理的是继承自父类的变量；但执行直接自己声明的方法时，所操作的就是它自己声明的变量</li><li>若要访问被隐藏的父类 属性可使用<code>super.属性名</code></li></ul></li><li>方法覆盖：<ul><li>子类不需使用从父类继承来的方法，则可以声明自己的同名方法</li><li>覆盖方法的返回类型，方法名称，参数列表必须一模一样</li></ul></li><li>final方法：<ul><li>防止任何继承类改变它本来的含义</li></ul></li><li>子类的构造方法：<ul><li>子类不能从父类继承构造方法，只可以通过super关键字调用父类构造方法</li><li>子类没用声明构造方法，系统会执行子类的构造方法时调用父类的无参构造方法，相当于super()</li></ul></li></ul><h2 id="4-2-终结类和终结方法"><a href="#4-2-终结类和终结方法" class="headerlink" title="4.2 终结类和终结方法"></a>4.2 终结类和终结方法</h2><ul><li>定义：被final修饰的类或方法</li><li>特性：<ul><li>终结类不能被继承</li><li>不能被当前类的子类重写</li></ul></li></ul><h2 id="4-3-抽象类与抽象方法"><a href="#4-3-抽象类与抽象方法" class="headerlink" title="4.3 抽象类与抽象方法"></a>4.3 抽象类与抽象方法</h2><ul><li>抽象类：用abstract修饰的类，代表一个抽象概念的类</li><li>特性：<ul><li>没有具体实例对象的类，不能用new方法进行实例化</li><li>可以包含常规类能够包含的东西，如构造方法，非抽象方法</li><li>也可包含抽象方法（仅有声明，没有实现）</li></ul></li><li>抽象方法：抽象类中才可以声明抽象方法</li><li>声明语法：仅有方法头，无方法体</li><li>注意：<ul><li>抽象类子类如果不是抽象类，它必须为父类的所有抽象方法书写方法体；否则子类页必须是抽象类。</li><li>只有抽象类才能又抽象方法</li></ul></li><li>优点：当一个抽象类的所有子类都使用同样一个方法时，可能每个子类的行为是不一样的</li><li>类的组合：类中可以又其他类的对象作为成员， 可以用”has a”描述</li></ul><h2 id="4-4-图形类举例"><a href="#4-4-图形类举例" class="headerlink" title="4.4 图形类举例"></a>4.4 图形类举例</h2><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241130154041158.png" alt="image-20241130154041158"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-type">double</span> centerX;<br><span class="hljs-keyword">protected</span> <span class="hljs-type">double</span> centerY;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Shape</span><span class="hljs-params">(<span class="hljs-type">double</span> centerX, <span class="hljs-type">double</span> centerY)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.centerX = centerX;<br><span class="hljs-built_in">this</span>.centerY = centerY;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getCenterX</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> centerX;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCenterX</span><span class="hljs-params">(<span class="hljs-type">double</span> centerX)</span> &#123;<br><span class="hljs-built_in">this</span>.centerX = centerX;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getCenterY</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> centerY;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCenterY</span><span class="hljs-params">(<span class="hljs-type">double</span> centerY)</span> &#123;<br><span class="hljs-built_in">this</span>.centerY = centerY;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span>;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Shape [centerX=&quot;</span> + centerX + <span class="hljs-string">&quot;, centerY=&quot;</span> + centerY + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-type">double</span> radius;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> centerX, <span class="hljs-type">double</span> centerY, <span class="hljs-type">double</span> radius)</span> &#123;<br><span class="hljs-built_in">super</span>(centerX, centerY);<br><span class="hljs-built_in">this</span>.radius = radius;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getRadius</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> radius;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRadius</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span> &#123;<br><span class="hljs-built_in">this</span>.radius = radius;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-keyword">return</span> Math.pow(getRadius(), <span class="hljs-number">2</span>)* <span class="hljs-number">3.14</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Circle [radius=&quot;</span> + radius + <span class="hljs-string">&quot;, centerX=&quot;</span> + centerX + <span class="hljs-string">&quot;, centerY=&quot;</span> + centerY + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-type">double</span> width;<br><span class="hljs-keyword">protected</span> <span class="hljs-type">double</span> length;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Rectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> centerX, <span class="hljs-type">double</span> centerY, <span class="hljs-type">double</span> width, <span class="hljs-type">double</span> length)</span> &#123;<br><span class="hljs-built_in">super</span>(centerX, centerY);<br><span class="hljs-built_in">this</span>.width = width;<br><span class="hljs-built_in">this</span>.length = length;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getWidth</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> width;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWidth</span><span class="hljs-params">(<span class="hljs-type">double</span> width)</span> &#123;<br><span class="hljs-built_in">this</span>.width = width;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getLength</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLength</span><span class="hljs-params">(<span class="hljs-type">double</span> length)</span> &#123;<br><span class="hljs-built_in">this</span>.length = length;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-keyword">return</span> getLength() * getWidth();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Rectangle [width=&quot;</span> + width + <span class="hljs-string">&quot;, length=&quot;</span> + length + <span class="hljs-string">&quot;, centerX=&quot;</span> + centerX + <span class="hljs-string">&quot;, centerY=&quot;</span> + centerY<br>+ <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestShaper</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><br>Shape[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>[<span class="hljs-number">2</span>];<br>s[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">10.0</span>, <span class="hljs-number">20.0</span>,<span class="hljs-number">5.0</span>);<br>s[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>(<span class="hljs-number">10.3</span>, <span class="hljs-number">39.2</span>, <span class="hljs-number">5.9</span>, <span class="hljs-number">7.0</span>);<br><br><span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;s.length; i++) &#123;<br>System.out.println(s[i]);<br>sum += s[i].area();<br>System.out.println(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;个形状的面积：&quot;</span>+ String.format(<span class="hljs-string">&quot;%.2f&quot;</span>,s[i].area()));<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;总面积：&quot;</span>+ String.format(<span class="hljs-string">&quot;%.2f&quot;</span>, sum));&#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-5-接口"><a href="#4-5-接口" class="headerlink" title="4.5 接口"></a>4.5 接口</h2><ul><li><p>接口：与抽象类一样定义了多个类的共同属性，是一个“纯”抽象类，只提供了一种形式，不提供实现</p></li><li><p>与抽象类的异同：</p><ul><li>接口本质上是一种特殊的抽象类，用于实现多继承；与抽象类都是声明多个类的共同属性</li><li>接口允许看起来不相干的类之间定义共同行为。而抽象类还是要被其他类共同继承的！相当于 is a  和 like的区别</li></ul></li><li><p>接口的语法：<code>interface in1 &#123;public static int const = 3; public abstarct int area();&#125;</code></p><ul><li>数据成员必须赋初值，此值不能再更改</li><li>方法必须是抽象方法，关键字可以省略</li></ul></li><li><p>对象与接口之间的转型：</p><ul><li><p>对象被转型成 其所属类实现的接口类型 （窄 –&gt; 宽 ）</p></li><li><p>对象转换后接口也可以转回原类 （宽 –&gt; 窄）</p></li><li><pre><code class="java">Car jetta = new Car();Insurable item = jetta; // 转成接口类型(Car)item).getMileage(); //转回原类<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><br>- 接口的拓展：接口通过扩展的技术派生处新的接口<br><br>  ```java<br>  <span class="hljs-keyword">interface</span> 子接口 <span class="hljs-symbol">extends</span> 父接口<span class="hljs-symbol">1</span>, 父接口<span class="hljs-symbol">2</span>&#123;<br>      加入新接口成员<br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>塑型（类型转换）：隐式&#x2F;显式的类型转换</p><ul><li><p>隐式类型转换：</p><ul><li>基本数据类型：存储容量低的自动向存储容量高的转换</li><li>引用变量：被塑型为更一般的类或其接口类型</li></ul></li><li><p>显式类型转换：</p><ul><li>基本数据类型：(int)871.34,  (char)65,</li><li>引用变量：还原为本来的类型</li></ul></li></ul></li></ul><h2 id="4-6-多态"><a href="#4-6-多态" class="headerlink" title="4.6 多态"></a>4.6 多态</h2><ul><li><p>多态：不同类型的对象可以响应相同的消息</p></li><li><p>绑定：一个方法调用同一个方法主体连接到一起</p></li><li><p>内部类：在一个类或者方法的定义中定义的类，可以访问其外层类中所有数据成员和方法</p></li><li><p>匿名内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//new 父类名 或 接口名()&#123;</span><br><span class="hljs-comment">//    类体</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-type">FatherClass</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FatherClass</span>()&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showFC</span><span class="hljs-params">(sout(<span class="hljs-string">&quot;调用了匿名子类重写的父类FatherClass的方法！&quot;</span>)</span>);<br>&#125;<br>f.showFC();<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-7-带有接口的Shape类"><a href="#4-7-带有接口的Shape类" class="headerlink" title="4.7 带有接口的Shape类"></a>4.7 带有接口的Shape类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPrint</span> &#123;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPrint</span> &#123;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-type">double</span> radius;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> centerX, <span class="hljs-type">double</span> centerY, <span class="hljs-type">double</span> radius)</span> &#123;<br><span class="hljs-built_in">super</span>(centerX, centerY);<br><span class="hljs-built_in">this</span>.radius = radius;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getRadius</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> radius;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRadius</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span> &#123;<br><span class="hljs-built_in">this</span>.radius = radius;<br>&#125;<br><br><br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-keyword">return</span> Math.pow(getRadius(), <span class="hljs-number">2</span>)* <span class="hljs-number">3.14</span>;<br>&#125;<br><br><br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Circle [radius=&quot;</span> + radius + <span class="hljs-string">&quot;, centerX=&quot;</span> + centerX + <span class="hljs-string">&quot;, centerY=&quot;</span> + centerY + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Circle  radius: &quot;</span>+getRadius() + <span class="hljs-string">&quot; centerX: &quot;</span> + getCenterX()+ <span class="hljs-string">&quot; centerY: &quot;</span>+ getCenterY()+ <span class="hljs-string">&quot; area: &quot;</span>+ String.format(<span class="hljs-string">&quot;%.2f&quot;</span>,area()));<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestShaper</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><br>Shape[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>[<span class="hljs-number">2</span>];<br>s[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">10.0</span>, <span class="hljs-number">20.0</span>,<span class="hljs-number">5.0</span>);<br>s[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>(<span class="hljs-number">10.3</span>, <span class="hljs-number">39.2</span>, <span class="hljs-number">5.9</span>, <span class="hljs-number">7.0</span>);<br><br><br><br><br><span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;s.length; i++) &#123;<br><span class="hljs-comment">//System.out.println(s[i]);</span><br>sum += s[i].area();<br><span class="hljs-comment">//System.out.println(&quot;第&quot;+i+&quot;个形状的面积：&quot;+ String.format(&quot;%.2f&quot;,s[i].area()));</span><br><span class="hljs-type">IPrint</span> <span class="hljs-variable">print</span> <span class="hljs-operator">=</span>(IPrint) s[i];<br>print.display();<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;总面积：&quot;</span>+ String.format(<span class="hljs-string">&quot;%.2f&quot;</span>, sum));&#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="5-常用Java类库"><a href="#5-常用Java类库" class="headerlink" title="5. 常用Java类库"></a>5. 常用Java类库</h1><h2 id="5-1-Java-API"><a href="#5-1-Java-API" class="headerlink" title="5.1 Java API"></a>5.1 Java API</h2><p>java提供的包主要有：java.lang, java.util, java.io, java.awt, java.swing,java.net</p><h2 id="5-2-Object类"><a href="#5-2-Object类" class="headerlink" title="5.2 Object类"></a>5.2 Object类</h2><ul><li><p>Object类式所有类的直接或间接父类，处在类层次最高点</p></li><li><p>主要方法：</p><ul><li><code>public final Class getClass()</code> 返回Class对象</li><li><code>public String toString() </code>返回当前对象本身的有关信息</li><li><code>public boolean equals(Object obj)</code>比较两个对象是否式同一个对象</li><li><code>protected Object clone()</code>生成当前对象的一个拷贝</li><li><code>public int hashCode()</code>返回该对象的哈希代码值</li></ul></li><li><p>相等 与 同一 的概念：</p><ul><li>相等：两个对象具有相同类型，相同属性</li><li>同一：两个引用变量指向同一个对象</li><li>两个对象相等，并不一定同一！</li><li>可以使用“&#x3D;&#x3D;”判断这两个对象是否同一</li></ul></li><li><p>equals方法</p><ul><li><p>Object类中定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object x)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span> == x;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>equals重写（只需判断两个对象各个属性域的值是否相同）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object x)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.getClass() != x.getClass())&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">Circle</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (Circle)x;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getRadius() == b.getRadius();<br>&#125;   <br></code></pre></td></tr></table></figure></li></ul></li><li><p>clone方法</p><ul><li><p>根据已存在的对象构造一个新的对象，覆盖为public,要实现接口Cloneable里的Clone方法</p></li><li><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">public</span> Obejct <span class="hljs-title function_">Clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.clone();<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>浅拷贝与深拷贝：浅拷贝是两者引用一个对象。深拷贝是创建了一个新对象</p></li></ul></li><li><p>getClass方法</p><ul><li><p>final方法，返回一个Class对象，通过这个对象可以查询Class的各种信息，如getName, getSuperClass, getInterfaces</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">PrintClassInfo</span><span class="hljs-params">(Object obj)</span>&#123;<br>    sout(<span class="hljs-string">&quot;The Object&#x27;s class is &quot;</span>+ obj.getClass().getName());<br>    sout(<span class="hljs-string">&quot;The Object&#x27;s super class is &quot;</span>+ obj.getClass().getSuperclass().getName());<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="5-3-语言包（java-lang）"><a href="#5-3-语言包（java-lang）" class="headerlink" title="5.3 语言包（java.lang）"></a>5.3 语言包（java.lang）</h2><p>语言包中提供了java最基础的类，包括数据类型包装类，字符串类，数学类，系统和运行类，类操作类</p><ul><li><p>数据类型包装类：基本数据类型都有一个数据包装类，为final类型</p><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241130184216262.png" alt="image-20241130184216262"></p><ul><li><p>生成数据类型包括类对象的方法</p><ul><li><p>基本类型 生成包装类对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">1.23</span>);<br></code></pre></td></tr></table></figure></li><li><p>从字符串生成包装类对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-string">&quot;1234&quot;</span>);<br><span class="hljs-type">Double</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-string">&quot;-34.5&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>已知字符串对象，使用valueOf方法将其转成包装类对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer.valueOf(<span class="hljs-string">&quot;125&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>自动装箱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Inteher</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>得到基本数据类型数据的方法</p><ul><li><pre><code class="java">int c = Integer.parseInt(&quot;234&quot;);<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-operator">-</span> ```java<br>  <span class="hljs-type">Integer</span> a <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">3</span>);<br>  <span class="hljs-type">int</span> i <span class="hljs-operator">=</span> a;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>常量字符串String类</p><ul><li><p>常量字符串：String字符串的值和长度都不可变</p></li><li><p>生成String类对象的方法：</p><ul><li><pre><code class="java">String aString = &quot;This is a string&quot;;<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><br>- ```<span class="language-javascript">java</span><br><span class="language-javascript">  <span class="hljs-title class_">String</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;dhk&quot;</span>);</span><br><span class="language-javascript">  char[] cc = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;</span><br><span class="language-javascript">  <span class="hljs-title class_">String</span> c2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cc) ;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>常用方法：</p><ul><li><p>返回字符串里字符个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcd&quot;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();<br></code></pre></td></tr></table></figure></li><li><p>返回序号index处的字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure></li><li><p>在原字符串值查找是否包含子字符串s1, 如果包含，返回匹配的第一个字符的位置序号，否则返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> s.indexOf(<span class="hljs-string">&quot;bc&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>返回接收者对象中从begin开始到end-1的子字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> s.subString(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></li><li><p>以指定字符为分隔符，分割字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] ss = s.split(<span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">//以空格划分</span><br><span class="hljs-comment">// split(&quot;//.&quot;) 以&quot;.&quot;分割</span><br></code></pre></td></tr></table></figure></li><li><p>拼接字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span>  <span class="hljs-operator">=</span> s.concat(<span class="hljs-string">&quot;sf4f&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>把原字符替换成新字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">s.repalce(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p>把字符串两端空字符串去掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">s.trim();<br></code></pre></td></tr></table></figure></li><li><p>转大&#x2F;小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">s.toLowerCase();<br>s.toUpperCase();<br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用正则表达式拆分和替换字符串</p><ul><li><p>基本方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AA,BB CC:DD&quot;</span>;<br>String[] words = s.split(<span class="hljs-string">&quot;[, :]&quot;</span>);<br><span class="hljs-keyword">for</span>(String word : words)&#123;<br>    System.out.println(word);<br>&#125;    <br></code></pre></td></tr></table></figure></li><li><p>使用正则表达式包util.regex匹配字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Pattern对象，其matches方法用于字符串形式的模式匹配目标字符串</span><br><span class="hljs-type">Pattern</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;^[1-9]\\d&#123;5&#125;$&quot;</span>);<span class="hljs-comment">// ^开始 [1-9]的单个数字  \\d十进制的整数 &#123;5&#125;重复5次  $结束</span><br><span class="hljs-type">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> p.matcher(<span class="hljs-string">&quot;266580&quot;</span>);<br>System.out.println(m.matches());<br><br>System.out.println(Pattern.matches(<span class="hljs-string">&quot;^[1-9]\\d&#123;5&#125;$&quot;</span>, <span class="hljs-string">&quot;018374&quot;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> . 匹配任意一个字符<br><span class="hljs-regexp">//</span> \d 匹配一个或多个数字<br><span class="hljs-regexp">//</span> \. 匹配<span class="hljs-string">&quot;.&quot;</span><br><span class="hljs-regexp">//</span> (\d)?  ?表示括号内的选项是可选的<br><span class="hljs-regexp">//</span> \s+ 可以匹配多个空格<br><span class="hljs-regexp">//</span> 在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>可变字符串StringBuffer类</p><ul><li><p>可变字符串，其字符个数叫做对象的长度length，其分配的存储空间称为对象的容量capacity</p></li><li><pre><code class="java">StringBuffer sb = new StringBuffer();String s = null;String s2 = &quot;ccc&quot;;sb.append(&quot;aaa&quot;);ab.append(s);sb.append(s2);sb.append(&quot;bbb&quot;);System.out.println(sb); // aaanullaaabbb<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>- 常用方法<br><br>  ```java<br>  StringBuffer sb = <span class="hljs-built_in">new</span> StringBuffer(&quot;aab&quot;);<br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;length: &quot;+ sb.length());<br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;capacity: &quot;+ sb.capacity());<br>  <span class="hljs-type">char</span> c = sb.charAt(<span class="hljs-number">2</span>);<br>  sb.setCharAt(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;v&#x27;</span>);//将<span class="hljs-keyword">index</span>位置的字符设置为<br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(sb);<br>  <br>  <span class="hljs-type">char</span>[] cc = <span class="hljs-built_in">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">10</span>];<br>  sb.getChars(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, cc, <span class="hljs-number">0</span>); //把原字符串的从<span class="hljs-number">0</span>到<span class="hljs-number">2</span>位置的字符拷贝到cc中<br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(cc);<br>  <br>  StringBuffer ss =sb.<span class="hljs-keyword">insert</span>(<span class="hljs-number">0</span>,&quot;ab&quot; );<br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ss);<br>  <br>  StringBuffer ss1 = sb.append(ss);<br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ss1);<br></code></pre></td></tr></table></figure></code></pre></li><li><p>已知一个字符串，返回将字符串中的非字母字符都删除后的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">aBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(original.length());<br><span class="hljs-type">char</span> ch;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;original.length(); i++)&#123;<br>    ch = original.charAt(i);<br>    <span class="hljs-keyword">if</span>(Character.isLetter(ch))&#123;<br>        aBuffer.append(ch);<br>    &#125;<br>   <br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(aBuffer);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>数学Math类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Math.E;<br>Math.PI;<br>Math.sqrt(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">//对4开方</span><br>Math.pow(x, n);<br>Math.sin()/cos/asin/acos/sinh/cosh;<br>Math.min/max();<br>Math.exp(x);<br>Math.log(x);<br>Math.round/ceil/floor();<br>Math.random();<br><br><br>    <br></code></pre></td></tr></table></figure></li><li><p>System类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">arrarycopy();<span class="hljs-comment">//复制一个数组</span><br>currentTimeMillis();<span class="hljs-comment">//获取系统当前日期和时间</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="5-4-实用包（java-util）"><a href="#5-4-实用包（java-util）" class="headerlink" title="5.4 实用包（java.util）"></a>5.4 实用包（java.util）</h2><p>StringTokenizer, Scanner, 集合类，日期类</p><ul><li><p>StringTokenizer：允许以某种分隔标准将字符串分割成单独子字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;数学::英语::语文::化学&quot;</span>;<br><span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(str, <span class="hljs-string">&quot;::&quot;</span>);<span class="hljs-comment">//默认是按空白格分割</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> st.countTokens();<br><span class="hljs-keyword">while</span>(st.hasMoreTokens())&#123;<br>    System.out.println(st.nextToken());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Scanner：文本扫描器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 从键盘输入</span><br>String name; <span class="hljs-type">int</span> age;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">while</span>(scan.hasNext())&#123;<br>    name = scan.next();<br>    <span class="hljs-keyword">if</span>(name.toUpperCase().equals(<span class="hljs-string">&quot;Q&quot;</span>))&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    age = scan.nextInt();<br>    <br>&#125;<br>scan.close();<br></code></pre></td></tr></table></figure></li><li><p>Vector<E>类：向量中元素必须为引用类型</E></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">Vector&lt;String&gt; v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;String&gt;();<br><span class="hljs-comment">// 添加元素</span><br>v.addElement(<span class="hljs-string">&quot;wendy&quot;</span>);<br>v.add(<span class="hljs-string">&quot;Frank&quot;</span>);<br>System.out.println(v);<br>v.insertElementAt(<span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//在1位置插入，后面的元素往后移</span><br>System.out.println(v);<br><br><span class="hljs-comment">// 删除元素</span><br>v.remove(<span class="hljs-number">0</span>);<br>System.out.println(v);<br><span class="hljs-comment">//v.removeAllElements();//移除所有元素</span><br><br><span class="hljs-comment">// 修改元素</span><br>v.setElementAt(<span class="hljs-string">&quot;Lain&quot;</span>, <span class="hljs-number">1</span>);<br>System.out.println(v);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> v.set(<span class="hljs-number">0</span>,  <span class="hljs-string">&quot;Paul&quot;</span>);<span class="hljs-comment">//i修改0位置的元素，返回被替代的元素</span><br>System.out.println(v);<br>System.out.println(s);<br><br><span class="hljs-comment">//访问元素</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> v.elementAt(<span class="hljs-number">0</span>);<br>System.out.println(s1);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> v.get(<span class="hljs-number">0</span>);<br>System.out.println(s2);<br><span class="hljs-type">String</span> <span class="hljs-variable">s_first</span> <span class="hljs-operator">=</span> v.firstElement();<br><span class="hljs-type">String</span> <span class="hljs-variable">s_end</span> <span class="hljs-operator">=</span> v.lastElement();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> v.isEmpty();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">is_contain</span> <span class="hljs-operator">=</span> v.contains(<span class="hljs-string">&quot;wendy&quot;</span>);<br>System.out.println(is_contain);<br><br><span class="hljs-comment">// 查找向量中的元素</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index1</span> <span class="hljs-operator">=</span> v.indexOf(<span class="hljs-string">&quot;Paul&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">index2</span> <span class="hljs-operator">=</span> v.indexOf(<span class="hljs-string">&quot;Paul&quot;</span>,<span class="hljs-number">1</span>);<br>System.out.println(index1 + <span class="hljs-string">&quot;\t&quot;</span> + index2);<br></code></pre></td></tr></table></figure></li><li><p>Enumeration接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Vector&lt;String&gt; v1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;String&gt;();<br>v1.add(<span class="hljs-string">&quot;ab&quot;</span>); v1.add(<span class="hljs-string">&quot;vb&quot;</span>); v1.add(<span class="hljs-string">&quot;tu&quot;</span>);<br>Enumeration&lt;String&gt; e = v1.elements();<br><span class="hljs-keyword">while</span>(e.hasMoreElements())&#123;<br>    System.out.println(e.nextElement());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Iterator接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Vector&lt;String&gt; v1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;String&gt;();<br>v1.add(<span class="hljs-string">&quot;ab&quot;</span>); v1.add(<span class="hljs-string">&quot;vb&quot;</span>); v1.add(<span class="hljs-string">&quot;tu&quot;</span>);<br><span class="hljs-keyword">for</span>(Iterator&lt;String&gt; e = v1.iterator(); e.hasNext(); )&#123;<br>    c=e.next();<br>    System.out.println(c);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ArrayList类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>System.out.println(list.size());<br>list.add(<span class="hljs-number">5</span>);<span class="hljs-comment">//在末尾添加元素</span><br>list.add(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>);<span class="hljs-comment">//在0索引处加元素</span><br>list.add(<span class="hljs-number">3</span>);<br>System.out.println(list);<br>list.remove(<span class="hljs-number">1</span>);<span class="hljs-comment">//移除第2个元素</span><br>System.out.println(list);<br><span class="hljs-type">int</span> <span class="hljs-variable">ele</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">e1</span> <span class="hljs-operator">=</span> list.set(<span class="hljs-number">0</span>, <span class="hljs-number">88</span>);<br>System.out.println(list);<br></code></pre></td></tr></table></figure></li><li><p>Comparable接口和Comparator接口</p><ul><li><p>Comparable接口用于定义对元素做<strong>自然排序</strong>的方法<code>int compareTo(T o)</code>，在元素所属类中实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter4;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Circle&gt; &#123;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-type">float</span> r;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">float</span> r)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.r = r;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getR</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setR</span><span class="hljs-params">(<span class="hljs-type">float</span> r)</span> &#123;<br><span class="hljs-built_in">this</span>.r = r;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Circle [r=&quot;</span> + r + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Circle o)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><span class="hljs-comment">// 从小到大排序</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.r &gt; o.r) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.r == o.r) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//return Double.compare(this.r, o.r);</span><br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><br>ArrayList&lt;Circle&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Circle&gt;();<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">5</span>));<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">9</span>));<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">1</span>));<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">3</span>));<br>System.out.println(list);<br><span class="hljs-comment">// 自然排序后：</span><br>Collections.sort(list);<br>System.out.println(list);<br><br><br><br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>Comparator接口：定义强行对某个对象collection进行整体排序的比较器，实现<code>int compare(T o1, T o2)</code>， 做定制排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.chapter4;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle_Comparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Circle&gt;&#123;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br>ArrayList&lt;Circle&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Circle&gt;();<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">5</span>));<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">9</span>));<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">1</span>));<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">3</span>));<br>System.out.println(list);<br><br><span class="hljs-type">Circle_Comparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle_Comparator</span>();<br><br><br>Collections.sort(list, comparator);<br>System.out.println(list);<br><br><br><br>&#125;<br><br><br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Circle o1, Circle o2)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br><br><span class="hljs-keyword">return</span> Double.compare(o1.getR(), o2.getR());<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Circle&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Circle o1, Circle o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Double.compare(o1.getR(), o2.getR());<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Collections.sort(list, (o1, o2)-&gt;Double.compare(o1.getR(), o2.getR()));<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Collections类：提供静态方法，反转，排序，获得最大最小元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Vector&lt;Integer&gt; v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;Integer&gt;();<br>v.add(<span class="hljs-number">5</span>);<br>v.add(<span class="hljs-number">7</span>);<br>v.add(<span class="hljs-number">9</span>);<br>v.add(<span class="hljs-number">4</span>);<br><br>System.out.println(Collections.max(v));<br><br>Collections.reverse(v);<br>System.out.println(v);<br><br><span class="hljs-comment">// 升序</span><br>Collections.sort(v);<br>System.out.println(v);<br><span class="hljs-comment">// 降序 （先升序后再翻转列表）</span><br>Collections.reverse(v);<br>System.out.println(v);<br></code></pre></td></tr></table></figure></li><li><p>Arrays类：操作普通数组，排序，搜索</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> []a = &#123; <span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>&#125;;<br>Arrays.sort(a);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x : a) &#123;<br>System.out.println(x);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(a, <span class="hljs-number">6</span>);<br>System.out.println(index);<br></code></pre></td></tr></table></figure></li><li><p>Date类：获取系统当前日期和时间值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>System.out.println(date1.toString());<br><span class="hljs-type">long</span> <span class="hljs-variable">time1</span> <span class="hljs-operator">=</span> date1.getTime(); <span class="hljs-comment">//以ms为单位</span><br>System.out.println(time1);<br><br>System.out.println(date1.after(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time1+<span class="hljs-number">5</span>)));<br></code></pre></td></tr></table></figure></li><li><p>Calendar类：能将date对象转换成一系列单个的日期整形数据集，如YEAR,MONTH,DAY,HOUR等常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Calendar</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GregorianCalendar</span>();<br>System.out.println(time.getTime());<span class="hljs-comment">//返回Date对象，显示日历</span><br>System.out.println(time.get(Calendar.YEAR));<span class="hljs-comment">//获取特定对象信息</span><br>System.out.println(time.get(Calendar.DAY_OF_WEEK));<br>time.add(Calendar.MONTH, -<span class="hljs-number">4</span>); <span class="hljs-comment">//从当前日期减去4个月</span><br>System.out.println(time.getTime());<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-5-文本包（java-text）"><a href="#5-5-文本包（java-text）" class="headerlink" title="5.5 文本包（java.text）"></a>5.5 文本包（java.text）</h2><p>添加String.format的用法</p><ul><li><p><strong>+</strong> 为整数或者负数添加符号, <code>%+d</code></p></li><li><p><strong>-</strong> 左对齐，<code>%-5d</code></p></li><li><p><strong>0</strong> 数字前补0，<code>&quot;%04d&quot;, 99</code>  0099</p></li><li><p><strong>空格</strong> 在整数之前添加指定数量空格，<code>&quot;% 4d&quot;, 99</code>  |  99|</p></li><li><p><strong>,</strong> 以“，”对数字分组， <code>&quot;%,f&quot;, 9999.99</code> 9.999.990000</p></li><li><p><strong>.</strong> 在小数点后规定多少个数字， <code>&quot;%.2f&quot;, 99.45224</code></p></li><li><pre><code class="java">int n = 46;System.out.println(String.format(&quot;%#o&quot;, n)); // 056System.out.println(String.format(&quot;%#x&quot;, n)); // 0x2e<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>  <br><br><span class="hljs-meta">## 5.6 例题</span><br><br>**建立两个类及并进行相应测试：**<br><br>**① 建立一个学生类Student，数据成员包括学号、姓名、性别，成绩等，方法成员包括构造方法、<span class="hljs-keyword">set</span>/<span class="hljs-keyword">get</span>方法、toString( )方法等。**<br><br>**②** **建立一个管理学生对象的类StudentManager。在其中定义向量（或列表）成员，用于存储学生对象；提供若干方法，分别用于向量（或列表）进行学生对象的 ** 插入、移除、修改、排序（按成绩升序）、浏览、查找（按姓名）、统计人数等操作。请对这些方法进行必要的测试，其中，查找到某个学生后将其成绩修正为<span class="hljs-number">99</span>分。<br><br>```java<br>package com.tu.chapter4;<br><br><span class="hljs-built_in">enum</span> Sex&#123;<br>Female, Male;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> &#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> number;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> Fixnumber = <span class="hljs-number">000001</span>;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> Sex sex;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> grade;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span>(<span class="hljs-params"> String name, Sex sex, <span class="hljs-built_in">double</span> grade</span>)</span> &#123;<br>super();<br><br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.sex = sex;<br><span class="hljs-keyword">this</span>.grade = grade;<br><br><span class="hljs-keyword">this</span>.number = Fixnumber++;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getNumber</span>()</span> &#123;<br><span class="hljs-keyword">return</span> number;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNumber</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> number</span>)</span> &#123;<br><span class="hljs-keyword">this</span>.number = number;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span>()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span>(<span class="hljs-params">String name</span>)</span> &#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Sex <span class="hljs-title">getSex</span>()</span> &#123;<br><span class="hljs-keyword">return</span> sex;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span>(<span class="hljs-params">Sex sex</span>)</span> &#123;<br><span class="hljs-keyword">this</span>.sex = sex;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getGrade</span>()</span> &#123;<br><span class="hljs-keyword">return</span> grade;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGrade</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> grade</span>)</span> &#123;<br><span class="hljs-keyword">this</span>.grade = grade;<br>&#125;<br>@Override<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span>()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student [number=&quot;</span> + String.format(<span class="hljs-string">&quot;%1$06d&quot;</span>, number) + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;, sex=&quot;</span> + sex + <span class="hljs-string">&quot;, grade=&quot;</span> +grade + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br><br><br>&#125;<br><br>package com.tu.chapter4;<br><br>import java.util.Collections;<br>import java.util.Vector;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StudentManager</span> &#123;<br><br><span class="hljs-keyword">private</span> Vector&lt;Student&gt; v;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StudentManager</span>()</span> &#123;<br>super();<br>v = <span class="hljs-keyword">new</span> Vector&lt;Student&gt;();<br>&#125;<br><span class="hljs-comment">// 插入</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">Student stu</span>)</span> &#123;<br>v.<span class="hljs-keyword">add</span>(stu);<br>&#125;<br><span class="hljs-comment">// 移除1</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">remove</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i</span>)</span> &#123;<br><span class="hljs-built_in">int</span> len = v.size();<br><span class="hljs-keyword">if</span>(i  &gt; len - <span class="hljs-number">1</span> || i&lt;= <span class="hljs-number">-1</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>v.<span class="hljs-keyword">remove</span>(i);<br><span class="hljs-keyword">return</span> v.elementAt(i);<br>&#125;<br><br>&#125;<br><br><br><span class="hljs-comment">// 移除2</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">remove</span>(<span class="hljs-params">Student stu</span>)</span> &#123;<br>boolean res =  v.<span class="hljs-keyword">remove</span>(stu);<br><span class="hljs-keyword">if</span>(res) &#123;<br><span class="hljs-keyword">return</span> stu;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 获取i</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i</span>)</span> &#123;<br><span class="hljs-built_in">int</span> len = v.size();<br><span class="hljs-keyword">if</span>(i  &gt; len - <span class="hljs-number">1</span> || i&lt;= <span class="hljs-number">-1</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> v.elementAt(i);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 修改</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i, Student stu</span>)</span> &#123;<br><span class="hljs-built_in">int</span> len = v.size();<br><span class="hljs-keyword">if</span>(i  &gt; len - <span class="hljs-number">1</span> || i&lt;= <span class="hljs-number">-1</span>) &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;超出索引，无法修改i位置的元素&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>v.setElementAt(stu, i);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 按照成绩升序</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span>()</span> &#123;<br>Collections.sort(v, (s1,s2)-&gt;Double.compare(s1.getGrade(), s2.getGrade()));<br>&#125;<br><br><span class="hljs-comment">// 浏览</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span>()</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;姓名\t学号\t性别\t成绩&quot;</span>);<br><span class="hljs-keyword">for</span>(Student stu : v) &#123;<br>System.<span class="hljs-keyword">out</span>.println(stu.getName()+<span class="hljs-string">&quot;\t&quot;</span>+String.format(<span class="hljs-string">&quot;%1$06d&quot;</span>,  stu.getNumber()) + <span class="hljs-string">&quot;\t&quot;</span> + stu.getSex()+ <span class="hljs-string">&quot;\t&quot;</span> + stu.getGrade());<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 按姓名查找</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">search</span>(<span class="hljs-params">String name</span>)</span> &#123;<br><span class="hljs-keyword">for</span>(Student stu : v) &#123;<br><span class="hljs-keyword">if</span>(stu.getName() == name) &#123;<br><span class="hljs-keyword">return</span> stu;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">//统计人数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">size</span>()</span> &#123;<br><span class="hljs-keyword">return</span> v.size();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br><span class="hljs-comment">// TODO 自动生成的方法存根</span><br>StudentManager sm = <span class="hljs-keyword">new</span> StudentManager();<br>sm.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;wendy&quot;</span>, Sex.Female, <span class="hljs-number">99</span>));<br>sm.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Mike&quot;</span>, Sex.Male, <span class="hljs-number">93</span>));<br>sm.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Paul&quot;</span>, Sex.Male, <span class="hljs-number">96</span>));<br>sm.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Mike&quot;</span>, Sex.Female, <span class="hljs-number">90</span>));<br>sm.display();<br><br><span class="hljs-comment">// 找个某个学生，修正成绩为99</span><br>Student s1 = sm.search(<span class="hljs-string">&quot;wendy&quot;</span>);<br>System.<span class="hljs-keyword">out</span>.println(s1);<br>s1.setGrade(<span class="hljs-number">99</span>);<br>sm.display();<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul><h1 id="6-异常处理"><a href="#6-异常处理" class="headerlink" title="6. 异常处理"></a>6. 异常处理</h1><h2 id="6-1-简介"><a href="#6-1-简介" class="headerlink" title="6.1 简介"></a>6.1 简介</h2><ul><li>异常：java中声明了很多异常类，每个异常类都代表一种运行错误，类中包含该运行错误的信息及其获取方法</li><li>处理异常的机制：<ul><li>抛出throw：如果发生了异常，该方法生成一个代表该异常的对象并把他交给运行时系统，运行时系统便寻找相应代码处理</li><li>捕获catch：从生成异常的方法开始进行回溯，知道找到包含相应异常处理的方法为之。</li></ul></li></ul><h2 id="6-2-异常处理方法"><a href="#6-2-异常处理方法" class="headerlink" title="6.2 异常处理方法"></a>6.2 异常处理方法</h2><ul><li><p>声明抛出异常：如果不想再当前方法内处理异常，可以使用throws子句声明将异常抛出到调用方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fn</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java.txt&quot;</span>;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(fn);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>捕获异常：try{}catch(E e){}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Enter the first number:&quot;</span>);<br>    <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in);<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> Integer.valueOf(br.readLine());<br>    System.out.println(<span class="hljs-string">&quot;Enter the next number:&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> Integer.valueOf(br.readLine());<br><br>&#125;<span class="hljs-keyword">catch</span>(NumberFormatException | IOException e) &#123;<br>    System.out.println(<span class="hljs-string">&quot;Those are not proper Integers&quot;</span>);<br>    System.exit(-<span class="hljs-number">1</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h1 id="7-IO流与文件读写"><a href="#7-IO流与文件读写" class="headerlink" title="7. IO流与文件读写"></a>7. IO流与文件读写</h1><h2 id="7-1-File类"><a href="#7-1-File类" class="headerlink" title="7.1 File类"></a>7.1 File类</h2><ul><li><p>File类：表示一个文件，目录，或一个文件和目录的组合，用于获取文件，目录的各种信息，并对其进行管理</p></li><li><pre><code class="java">// 文件的获取File file  = new File(&quot;Doc&quot;, &quot;学校简介.txt&quot;);if(file.exists()) &#123;    System.out.println(&quot;文件名：&quot;+ file.getName());    System.out.println(&quot;绝对路径：&quot;+ file.getAbsolutePath());    System.out.println(&quot;文件路径：&quot;+ file.getPath());    System.out.println(&quot;大小：&quot;+ file.length()+ &quot; 字节&quot;);&#125;else &#123;    System.out.println(&quot;文件路径不存在&quot;);&#125;<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stata"><br>- ```java<br>  <span class="hljs-comment">// 获取目录下的子目录和文件信息</span><br>  <span class="hljs-keyword">File</span> <span class="hljs-keyword">dir</span> = new <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;Doc&quot;</span>);<br>  String dirs=<span class="hljs-string">&quot;&quot;</span>,files=<span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">File</span>[] <span class="hljs-keyword">list</span> = <span class="hljs-keyword">dir</span>.listFiles();<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">File</span> f : <span class="hljs-keyword">list</span>) &#123;<br>      <span class="hljs-keyword">if</span>(f.isFile()) &#123;<br>          files += <span class="hljs-string">&quot;\t&quot;</span> + f.getName() + <span class="hljs-string">&quot;\n&quot;</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>          dirs += <span class="hljs-string">&quot;\t&quot;</span> + f.getName() + <span class="hljs-string">&quot;\n&quot;</span>;<br>      &#125;<br>  <br>  &#125;<br>  System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">dir</span>.getAbsolutePath() + <span class="hljs-string">&quot;下的目录：&quot;</span>+dirs );<br>  System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">dir</span>.getAbsolutePath() + <span class="hljs-string">&quot;下的文件：&quot;</span>+files);<br></code></pre></td></tr></table></figure></code></pre></li></ul><h2 id="7-2-I-O流"><a href="#7-2-I-O流" class="headerlink" title="7.2 I&#x2F;O流"></a>7.2 I&#x2F;O流</h2><ul><li><p>I&#x2F;O流：信息的输入和输出；</p><ul><li><p>一个流就是一个从源流向目的地的数据序列</p></li><li><p>输入流：程序打开一个输入流，程序可从输入流读取数据</p><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241203205045977.png" alt="image-20241203205045977"></p></li><li><p>输出流：打开一个输出流，程序通过输出流向这个目标位置写信息</p><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241203205155703.png" alt="image-20241203205155703"></p></li><li><p>读写数据方法：打开一个流 —&gt; 从流中读取信息&#x2F;将信息写入流 –&gt; 关闭流</p></li><li><p>分类：</p><ul><li>面向字符的流：专门用于字符数据 FileReader&#x2F;FileWriter</li><li>面向字节的流：用于一般目的,读写图片，声音等二进制的数据 InputStream&#x2F;OutputStream</li></ul></li><li><p>标准输入输出流：</p><ul><li>System.in：InputStream类型，代表标准输入流，默认状态对于键盘输入</li><li>System.out：PrintStream类型，代表标准输出流，对于屏幕输出</li></ul></li><li><p>举例：从键盘读入信息并显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();<br><span class="hljs-keyword">while</span>(s.length() !=<span class="hljs-number">0</span>) &#123;<br>    System.out.println(s);<br>    s = br.readLine();<br>&#125;<br>br.close();<br></code></pre></td></tr></table></figure><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241203211520341.png" alt="image-20241203211520341"></p></li></ul></li><li><p>文本文件读写：</p><ul><li><p>FileWriter类(父类时 OutputStreamWriter)：将字符按默认的字符集写入文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Doc\\Hello.txt&quot;</span>;<br><span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(fName);<br>fw.write(<span class="hljs-string">&quot;Hello!\n&quot;</span>);<br>fw.write(<span class="hljs-string">&quot;This is my first text file.\n&quot;</span>);<br>fw.write(<span class="hljs-string">&quot;你好，世界！\n&quot;</span>);<br>fw.close();<br></code></pre></td></tr></table></figure></li><li><p>BufferedWriter类（把OutputStreamWriter包装到BufferedWriter中，避免频繁调用转换器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Doc\\Hello1.txt&quot;</span>;<br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>( <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(fName));<br>bw.write(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>bw.newLine();<br>bw.write(<span class="hljs-string">&quot;This is my first text file.\n&quot;</span>);<br>bw.write(<span class="hljs-string">&quot;你好，世界！\n&quot;</span>);<br>bw.close();<br></code></pre></td></tr></table></figure></li><li><p>FileReader类：从文件读取字符</p></li><li><p>BufferedReader类：给输入字符流增加一个内部缓冲区，实现高效读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Doc\\Hello1.txt&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(fName));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine();<span class="hljs-comment">// int ch = br.read();逐个字符读取，返回Unicode编码</span><br>    <span class="hljs-keyword">while</span>(line != <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(line);<br>        line = br.readLine();<br>    &#125;<br>    br.close();<br><br><br>&#125;<span class="hljs-keyword">catch</span>(IOException e) &#123;<br>    System.out.println(e.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>文本文件的复制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Doc\\学校简介.txt&quot;</span>, des= <span class="hljs-string">&quot;Doc\\\\学校简介_copy.txt&quot;</span>, line;<br><span class="hljs-keyword">try</span> &#123;<br>    BufferedReader br=  <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(source));<br>    <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(des));<br>    line = br.readLine();<br>    <span class="hljs-keyword">while</span>(line != <span class="hljs-literal">null</span>) &#123;<br>        bw.write(line);<br>        bw.newLine();<br>        line = br.readLine();<br>    &#125;<br>    br.close();<br>    bw.close();<br>&#125;<span class="hljs-keyword">catch</span>(IOException e) &#123;<br>    e.getMessage();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>二进制文件读写</p><ul><li><p>写入文件</p><ul><li><p>OutputStream(输出字节流)：</p><p>FileOutputStream（文件输出字节流）：wtrite(byte[] b, int off, int len)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Doc\\\\Hello.txt&quot;</span>, line=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(fName);<br><br>    line = <span class="hljs-string">&quot;Hello!\r\n&quot;</span>;<br>    fos.write(line.getBytes());<br>    line = <span class="hljs-string">&quot;你好！\r\n&quot;</span>;<br>    fos.write(line.getBytes());<br>    fos.close();<br><br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>    <span class="hljs-comment">// TODO 自动生成的 catch 块</span><br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    <span class="hljs-comment">// TODO 自动生成的 catch 块</span><br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>OutputStreamWriter与FileOutputStream写文本文件（可指定字符编码方式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">BufferedWriter bw;<br><span class="hljs-keyword">try</span> &#123;<br>    bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(fn), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    bw.write(<span class="hljs-string">&quot;中国石油大学（华东&quot;</span>);<br>    bw.newLine();<br>    bw.write(<span class="hljs-string">&quot;1953-2024&quot;</span>);<br>    bw.close();<br><br>&#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>    <span class="hljs-comment">// TODO 自动生成的 catch 块</span><br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>    <span class="hljs-comment">// TODO 自动生成的 catch 块</span><br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    <span class="hljs-comment">// TODO 自动生成的 catch 块</span><br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>DataOutputStream（数据输出流，将基本类型数据转成字节流），BufferedOutputStream（对输出流进行缓冲）</p></li><li><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241206204219454.png" alt="image-20241206204219454"></p></li></ul></li><li><p>读取文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fn</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Doc//upc.txt&quot;</span>;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(fn), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br.readLine();<br><span class="hljs-keyword">while</span>(line != <span class="hljs-literal">null</span>) &#123;<br>    System.out.println(line);<br>    line = br.readLine();<br>&#125;<br>br.close();<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="7-3-例题"><a href="#7-3-例题" class="headerlink" title="7.3 例题"></a>7.3 例题</h2><ul><li><p>文本文件的读写（BufferedReader 做缓冲，FileReader读入） </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Doc\\学校简介.txt&quot;</span>, des= <span class="hljs-string">&quot;Doc\\\\学校简介_copy.txt&quot;</span>, line;<br><span class="hljs-keyword">try</span> &#123;<br>    BufferedReader br=  <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(source));<br>    <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(des));<br>    line = br.readLine();<br>    <span class="hljs-keyword">while</span>(line != <span class="hljs-literal">null</span>) &#123;<br>        bw.write(line);<br>        bw.newLine();<br>        line = br.readLine();<br>    &#125;<br>    br.close();<br>    bw.close();<br>&#125;<span class="hljs-keyword">catch</span>(IOException e) &#123;<br>    e.getMessage();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>二进制文件读写（BufferedInputStream + FileInputStream) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Doc\\学校简介.txt&quot;</span>, des= <span class="hljs-string">&quot;Doc\\\\学校简介_copy.txt&quot;</span>, line;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(source));<br>    <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(des));<br>    <span class="hljs-type">byte</span>[] buffer =<span class="hljs-keyword">new</span>  <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span>((len = bis.read(buffer))!= -<span class="hljs-number">1</span>)&#123;<br>        bos.write(buffer, <span class="hljs-number">0</span>, len);<br><br>    &#125;<br>    bos.close();<br>    bis.close();<br>    System.out.println(<span class="hljs-string">&quot;复制成功&quot;</span>);<br><br>&#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>    e.getMessage();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>BufferedReader + InputStreamReader+FileInputStream + 指定编码方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(source), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(des), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <span class="hljs-keyword">while</span>((line = br.readLine())!= <span class="hljs-literal">null</span>) &#123;<br>        System.out.println(line);<br>        bw.write(line);<br>        bw.newLine();<br>    &#125;<br>    bw.close();<br>    br.close();<br>&#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>    e.getMessage();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="8-基于Swing的图形用户界面"><a href="#8-基于Swing的图形用户界面" class="headerlink" title="8. 基于Swing的图形用户界面"></a>8. 基于Swing的图形用户界面</h1><h2 id="8-1-Swing容器"><a href="#8-1-Swing容器" class="headerlink" title="8.1 Swing容器"></a>8.1 Swing容器</h2><ul><li><p>Swing组件归为三个层次：</p><ul><li>顶层容器：表示一个窗体、对话框或applet显示区域，有一个内容面板（contentPane）用于容纳中间中层容器和基本组件</li><li>中间层容器：容纳其他组件，JPanel，JScrollPane</li><li>原子组件（基本组件）：直接向用户展示信息或获取用户输入JButton,JLabel,JTextField,JCheckBox</li></ul></li><li><p>Swing容器</p><ul><li><p>顶层容器窗体类JFrame：可设置窗体Title, 位置，大小，默认关闭操作，添加组件</p></li><li><p>顶层窗体对话窗体类JDialog</p></li><li><p>中间层容器面板类JPanel：燃原子组件和组件层面板，作为一个整体加入JFrame等顶层容器里，可设置绝对布局</p></li><li><p>中间层容器滚动面板类JScrollPane：用于滚动显示面板里的组件，如滚动显示文本区域，只允许加入一个组件；若有多个组件，先将他们放入一个JPane里，如何把JPane放入JScrollPane</p><p>（做 记事本： JScrollPane + TextArea）</p></li></ul></li></ul><h2 id="8-3-原子组件"><a href="#8-3-原子组件" class="headerlink" title="8.3 原子组件"></a>8.3 原子组件</h2><ul><li><p>JButton</p></li><li><p>JRadioButton：有选中和未选中两种状态，吧多个单选按钮添加在一个按钮组ButtonGroup（用户只能选择一个）</p><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241205193214882.png" alt="image-20241205193214882"></p></li><li><p>JCheckBox：多选</p></li><li><p>JComBox：组合框，文本框与下拉列表组合的组件</p><p><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241205195101298.png" alt="image-20241205195101298"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] schools = &#123;<span class="hljs-string">&quot;中国石油大学&quot;</span>,<span class="hljs-string">&quot;中国地质大学&quot;</span>,<span class="hljs-string">&quot;中国海洋大学&quot;</span>&#125;;<br>comboBox_1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JComboBox</span>&lt;String&gt;(schools);<br>comboBox_1.setBounds(<span class="hljs-number">79</span>, <span class="hljs-number">196</span>, <span class="hljs-number">32</span>, <span class="hljs-number">21</span>);<br>contentPane.add(comboBox_1);<br><span class="hljs-comment">//方法</span><br>getSelectedItem();<br>getSelectedIndex();<br>    <br><br></code></pre></td></tr></table></figure></li><li><p>JList列表类（可一次多选）</p><p>需要JSCrollPane+JList</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">crollPane = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JScrollPane</span>();<br>scrollPane.setBounds(<span class="hljs-number">314</span>, <span class="hljs-number">153</span>, <span class="hljs-number">88</span>, <span class="hljs-number">40</span>);<br>contentPane.add(scrollPane);<br><br>list_1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JList</span>();<br>list_1.setListData(schools);<br>scrollPane.setViewportView(list_1);<br><span class="hljs-comment">// getSelectedValues()返回所有选择项</span><br><span class="hljs-comment">// getSelectedValue() 返回第一个选择项</span><br></code></pre></td></tr></table></figure></li><li><p>TextArea 文本框 （一般是JSCrollPane+ta)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">ta.setForeground(Color.BLACK);<br><span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> ta.getDocument();<br>doc.addDocumentListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DocumentListener</span>() &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changedUpdate</span><span class="hljs-params">(DocumentEvent e)</span> &#123;<br>        setTitle(APP_NAME + <span class="hljs-string">&quot;-&quot;</span> + file + <span class="hljs-string">&quot;(*)&quot;</span>);<br>        isTextModified = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br>                        <br>                        <br>                        <br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> br.readLine();<br>    <span class="hljs-keyword">while</span>(str != <span class="hljs-literal">null</span>) &#123;<br>         sb.append(str + <span class="hljs-string">&quot;\n&quot;</span>);<br>         str = br.readLine();<br>&#125;<br><span class="hljs-keyword">if</span>(sb.length() &gt; <span class="hljs-number">0</span>) sb.deleteCharAt(sb.length()-<span class="hljs-number">1</span>);<br> br.close();<br>ta.setText(sb.toString());<br>setTitle(APP_NAME+<span class="hljs-string">&quot;-&quot;</span>+file);<br>isTextModified = <span class="hljs-literal">false</span>;<br> &#125;<span class="hljs-keyword">catch</span>(Exception e1) &#123;<br>   e1.getMessage();<br>&#125;               <br></code></pre></td></tr></table></figure></li></ul><h2 id="8-3-菜单"><a href="#8-3-菜单" class="headerlink" title="8.3 菜单"></a>8.3 菜单</h2><ul><li>菜单栏JMenuBar + 多个菜单JMenu + 每个餐单的选项JMenuItem</li><li><img src="/2024/11/26/java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0%E7%AB%A0/image-20241205224912692.png" alt="image-20241205224912692"></li><li>弹出式菜单：JPopupMenu</li></ul><h2 id="8-4-对话框"><a href="#8-4-对话框" class="headerlink" title="8.4 对话框"></a>8.4 对话框</h2><ul><li><p>标准对话框：</p><p>showConfirmDialog 显示确认对话框，询问有关确认问题，如yes&#x2F;no&#x2F;canel</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowColsing</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br>        <span class="hljs-type">JFrame</span> <span class="hljs-variable">frm</span> <span class="hljs-operator">=</span> (JFrame)e.getWindow();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultDlg</span> <span class="hljs-operator">=</span> JOptionPane.showConfirmDialog(frm, <span class="hljs-string">&quot;确定要退出程序吗？&quot;</span>,<span class="hljs-string">&quot;操作确认&quot;</span>, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);<br>        <span class="hljs-keyword">if</span>(resultDlg  == JOptionPane.YES_OPTION) &#123;<br>            System.exit(<span class="hljs-number">0</span>);<br>        &#125;<br><br>    &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>showMessageDialog：显示一个消息对话框，告知用户某事已发生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">JOptionPane.showMessageDiaglog(JFrame, <span class="hljs-string">&quot;输入用户名和密码不正确，请重试！&quot;</span>, <span class="hljs-string">&quot;系统提示&quot;</span>,JOptionPane.ERROR_MESSAGE );<br></code></pre></td></tr></table></figure><p>showInputDialog:</p></li><li><p>文件选择器JFileChooser</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JFileChooser</span> <span class="hljs-variable">fc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFileChooser</span>();<span class="hljs-comment">//文件选择器</span><br><span class="hljs-type">FileNameExtensionFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNameExtensionFilter</span>(<span class="hljs-string">&quot;文本文件(*.txt)&quot;</span>, <span class="hljs-string">&quot;txt&quot;</span>);<br>fc.addChoosableFileFilter(filter);<br>filter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNameExtensionFilter</span>(<span class="hljs-string">&quot;HTML文件(*.htm,*.html)&quot;</span>, <span class="hljs-string">&quot;htm&quot;</span>, <span class="hljs-string">&quot;html&quot;</span>);<br>fc.addChoosableFileFilter(filter);<br><span class="hljs-type">int</span> <span class="hljs-variable">returnVal</span> <span class="hljs-operator">=</span> fc.showOpenDialog(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">if</span>(returnVal != JFileChooser.APPROVE_OPTION) &#123;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> fc.getSelectedFile().getAbsolutePath();<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filename));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> br.readLine();<br>    <span class="hljs-keyword">while</span>(str!=<span class="hljs-literal">null</span>) &#123;<br>        sb.append(str+<span class="hljs-string">&quot;\n&quot;</span>);<br>        str = br.readLine();<br><br>    &#125;<br>    br.close();<br>    ta.setText(sb.toString());<br>    setTitle(APP_NAME + <span class="hljs-string">&quot;-&quot;</span> + filename);<br>    isTextModified = <span class="hljs-literal">false</span>;<br><br><br><br>&#125;<span class="hljs-keyword">catch</span>(Exception e1) &#123;<br>    ta.setText(e1.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>颜色选择器JColorChooser</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Color</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> JColorChooser.showDialog(ta, <span class="hljs-string">&quot;请选择颜色&quot;</span>, Color.RED);<br><span class="hljs-keyword">if</span>(color != <span class="hljs-literal">null</span>)&#123;<br>    ta.setForeground(color);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="8-5-例题"><a href="#8-5-例题" class="headerlink" title="8.5 例题"></a>8.5 例题</h2><ul><li><p>计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Double.parseDouble(t1.getText());<br><span class="hljs-comment">//num = Math.toRadians(num);//变弧度 </span><br>num = num *  Math.PI / <span class="hljs-number">180</span> ;<br><br><span class="hljs-keyword">if</span>(method == <span class="hljs-string">&quot;正弦&quot;</span>) &#123;<br>    res = Math.sin(num);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(method == <span class="hljs-string">&quot;余弦&quot;</span>) &#123;<br>    res = Math.cos(num);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(method == <span class="hljs-string">&quot;正切&quot;</span>) &#123;<br>    res = Math.tan(num);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    res = <span class="hljs-number">1</span> / Math.tan(num);<br>&#125;<br>t2.setText(String.format(<span class="hljs-string">&quot;%.4f&quot;</span>, res));<br></code></pre></td></tr></table></figure></li><li><p>简易文本编辑器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JMenu_Tester</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JFrame</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">JMenu_Tester</span><span class="hljs-params">()</span> &#123;<br>setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>setBounds(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">450</span>, <span class="hljs-number">300</span>);<br><span class="hljs-comment">// 退出窗体</span><br><span class="hljs-built_in">this</span>.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowColsing</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br><span class="hljs-type">JFrame</span> <span class="hljs-variable">frm</span> <span class="hljs-operator">=</span> (JFrame)e.getWindow();<br><span class="hljs-type">int</span> <span class="hljs-variable">resultDlg</span> <span class="hljs-operator">=</span> JOptionPane.showConfirmDialog(frm, <span class="hljs-string">&quot;确定要退出程序吗？&quot;</span>,<span class="hljs-string">&quot;操作确认&quot;</span>, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);<br><span class="hljs-keyword">if</span>(resultDlg  == JOptionPane.YES_OPTION) &#123;<br>System.exit(<span class="hljs-number">0</span>);<br>&#125;<br><br>&#125;<br>&#125;);<br><br>menuBar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuBar</span>();<br>setJMenuBar(menuBar);<br><br>mnNewMenu = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenu</span>(<span class="hljs-string">&quot;\u6587\u4EF6&quot;</span>);<br>menuBar.add(mnNewMenu);<br><br>mntmNewMenuItem = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u6253\u5F00&quot;</span>); <span class="hljs-comment">//打开文件</span><br>mntmNewMenuItem.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent arg0)</span> &#123;<br><span class="hljs-type">JFileChooser</span> <span class="hljs-variable">fc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFileChooser</span>();<span class="hljs-comment">//文件选择器</span><br><span class="hljs-type">FileNameExtensionFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNameExtensionFilter</span>(<span class="hljs-string">&quot;文本文件(*.txt)&quot;</span>, <span class="hljs-string">&quot;txt&quot;</span>);<br>fc.addChoosableFileFilter(filter);<br>filter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNameExtensionFilter</span>(<span class="hljs-string">&quot;HTML文件(*.htm,*.html)&quot;</span>, <span class="hljs-string">&quot;htm&quot;</span>, <span class="hljs-string">&quot;html&quot;</span>);<br>fc.addChoosableFileFilter(filter);<br><span class="hljs-type">int</span> <span class="hljs-variable">returnVal</span> <span class="hljs-operator">=</span> fc.showOpenDialog(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">if</span>(returnVal != JFileChooser.APPROVE_OPTION) &#123;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>filename = fc.getSelectedFile().getAbsolutePath();<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filename));<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> br.readLine();<br><span class="hljs-keyword">while</span>(str!=<span class="hljs-literal">null</span>) &#123;<br>sb.append(str+<span class="hljs-string">&quot;\n&quot;</span>);<br>str = br.readLine();<br><br>&#125;<br>br.close();<br>ta.setText(sb.toString());<br>setTitle(APP_NAME + <span class="hljs-string">&quot;-&quot;</span> + filename);<br>isTextModified = <span class="hljs-literal">false</span>;<br><br><br><br>&#125;<span class="hljs-keyword">catch</span>(Exception e1) &#123;<br>ta.setText(e1.getMessage());<br>&#125;<br>&#125;<br>&#125;);<br><br>menuItem_11 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u65B0\u5EFA&quot;</span>); <span class="hljs-comment">// 新建文件</span><br>menuItem_11.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br><span class="hljs-keyword">if</span>(isTextModified) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> JOptionPane.showConfirmDialog(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;文档未保存，是否新建？&quot;</span>, <span class="hljs-string">&quot;新建确认&quot;</span>, JOptionPane.YES_NO_OPTION);<br><span class="hljs-keyword">if</span>(result == JOptionPane.YES_OPTION) &#123;<br>ta.setText(<span class="hljs-string">&quot;&quot;</span>);<br>filename = <span class="hljs-literal">null</span>;<br>setTitle(<span class="hljs-string">&quot;简易文本编辑器&quot;</span>);<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br> ta.setText(<span class="hljs-string">&quot;&quot;</span>);<br>             filename = <span class="hljs-literal">null</span>;<br>             isTextModified = <span class="hljs-literal">false</span>;<br>             setTitle(<span class="hljs-string">&quot;简易文本编辑器&quot;</span>);<br>&#125;<br>&#125;<br>&#125;);<br>mnNewMenu.add(menuItem_11);<br>mnNewMenu.add(mntmNewMenuItem);<br><br>menuItem = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u4FDD\u5B58&quot;</span>); <span class="hljs-comment">//保存文件</span><br>menuItem.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br><span class="hljs-keyword">if</span>(filename != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filename));<br>        bw.write(ta.getText());<br>        bw.close();<br>        <span class="hljs-comment">//textArea.setText(&quot;文件已保存&quot;);</span><br>        setTitle(APP_NAME + <span class="hljs-string">&quot;-&quot;</span> + filename);<br>        isTextModified = <span class="hljs-literal">false</span>;<br>&#125;<span class="hljs-keyword">catch</span>(Exception e2) &#123;<br>ta.setText(e2.getMessage());<br><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">JFileChooser</span> <span class="hljs-variable">fileChooser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFileChooser</span>();<br><span class="hljs-keyword">if</span>(fileChooser.showSaveDialog(menuItem) == JFileChooser.APPROVE_OPTION) &#123;<br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> fileChooser.getSelectedFile();<br><span class="hljs-keyword">try</span> &#123;<br><br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file));<br>        bw.write(ta.getText());<br>        bw.close();<br>        <span class="hljs-comment">//textArea.setText(&quot;文件已保存&quot;);</span><br>        setTitle(APP_NAME + <span class="hljs-string">&quot;-&quot;</span> + filename);<br>        isTextModified = <span class="hljs-literal">false</span>;<br>&#125;<span class="hljs-keyword">catch</span>(Exception e2) &#123;<br>ta.setText(e2.getMessage());<br><br>&#125;<br><br>&#125;<br><br>&#125;<br><br><br>&#125;<br>&#125;);<br>mnNewMenu.add(menuItem);<br><br>menuItem_7 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u53E6\u5B58\u4E3A&quot;</span>);<span class="hljs-comment">//另存为</span><br>menuItem_7.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br><span class="hljs-type">JFileChooser</span> <span class="hljs-variable">fc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFileChooser</span>();<span class="hljs-comment">//文件选择器</span><br><span class="hljs-type">FileNameExtensionFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNameExtensionFilter</span>(<span class="hljs-string">&quot;文本文件(*.txt)&quot;</span>, <span class="hljs-string">&quot;txt&quot;</span>);<br>fc.addChoosableFileFilter(filter);<br>filter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileNameExtensionFilter</span>(<span class="hljs-string">&quot;HTML文件(*.htm,*.html)&quot;</span>, <span class="hljs-string">&quot;htm&quot;</span>, <span class="hljs-string">&quot;html&quot;</span>);<br>fc.addChoosableFileFilter(filter);<br><span class="hljs-type">int</span> <span class="hljs-variable">returnVal</span> <span class="hljs-operator">=</span> fc.showOpenDialog(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">if</span>(returnVal != JFileChooser.APPROVE_OPTION) &#123;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">filename1</span> <span class="hljs-operator">=</span> fc.getSelectedFile().getAbsolutePath();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filename1));<br>bw.write(ta.getText());<br>bw.close();<br>&#125;<span class="hljs-keyword">catch</span>(Exception e3) &#123;<br>e3.getMessage();<br>&#125;<br><br>&#125;<br>&#125;);<br>mnNewMenu.add(menuItem_7);<br><br>separator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSeparator</span>();<br>mnNewMenu.add(separator);<br><br>menuItem_1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u9000\u51FA&quot;</span>); <span class="hljs-comment">//退出</span><br>menuItem_1.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">resultDlg</span> <span class="hljs-operator">=</span> JOptionPane.showConfirmDialog(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;确定要退出程序吗？&quot;</span>,<span class="hljs-string">&quot;操作确认&quot;</span>, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);<br><span class="hljs-keyword">if</span>(resultDlg  == JOptionPane.YES_OPTION) &#123;<br>System.exit(<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br>&#125;);<br>mnNewMenu.add(menuItem_1);<br><br>mnNewMenu_1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenu</span>(<span class="hljs-string">&quot;\u7F16\u8F91&quot;</span>);<br>menuBar.add(mnNewMenu_1);<br><br>menuItem_2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u590D\u5236&quot;</span>);<span class="hljs-comment">//复制</span><br>menuItem_2.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>ta.copy();<br>&#125;<br>&#125;);<br>mnNewMenu_1.add(menuItem_2);<br><br>menuItem_3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u7C98\u8D34&quot;</span>);<span class="hljs-comment">//粘贴</span><br>menuItem_3.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>ta.paste();<br>&#125;<br>&#125;);<br>mnNewMenu_1.add(menuItem_3);<br><br>menuItem_4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u526A\u5207&quot;</span>); <span class="hljs-comment">//剪切</span><br>menuItem_4.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>ta.cut();<br>&#125;<br>&#125;);<br>mnNewMenu_1.add(menuItem_4);<br><br>menuItem_5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u6E05\u7A7A&quot;</span>); <span class="hljs-comment">// 清空</span><br>menuItem_5.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>ta.setText(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br>&#125;);<br>mnNewMenu_1.add(menuItem_5);<br><br>separator_1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSeparator</span>();<br>mnNewMenu_1.add(separator_1);<br><br>menuItem_6 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u5168\u9009&quot;</span>); <span class="hljs-comment">//全选</span><br>menuItem_6.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>ta.selectAll();<br>&#125;<br>&#125;);<br>mnNewMenu_1.add(menuItem_6);<br><br>menu = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenu</span>(<span class="hljs-string">&quot;\u6837\u5F0F&quot;</span>);<br>menuBar.add(menu);<br><br>menuItem_8 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u5B57\u4F53&quot;</span>);<span class="hljs-comment">//字体</span><br>menuItem_8.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>String fronts[] = &#123;<span class="hljs-string">&quot;Serif&quot;</span>, <span class="hljs-string">&quot;SansSerif&quot;</span>, <span class="hljs-string">&quot;Monospaced&quot;</span>, <span class="hljs-string">&quot;KaiTi&quot;</span>, <span class="hljs-string">&quot;SimHei&quot;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">selectedFont</span> <span class="hljs-operator">=</span>(String)JOptionPane.showInputDialog(menu, <span class="hljs-string">&quot;请选择字体&quot;</span>,<span class="hljs-string">&quot;字体&quot;</span>, JOptionPane.PLAIN_MESSAGE,<span class="hljs-literal">null</span>,fronts, fronts[<span class="hljs-number">0</span>] );<br>System.out.println(selectedFont);<br>ta.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(selectedFont,ta.getFont().getStyle() ,ta.getFont().getSize()));<br><br>&#125;<br>&#125;);<br>menu.add(menuItem_8);<br><br>menuItem_9 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u5B57\u53F7&quot;</span>);<span class="hljs-comment">//字号</span><br>menuItem_9.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>String size[] = &#123;<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;10&quot;</span>,<span class="hljs-string">&quot;11&quot;</span>,<span class="hljs-string">&quot;12&quot;</span>,<span class="hljs-string">&quot;13&quot;</span>,<span class="hljs-string">&quot;14&quot;</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">selectedsize</span> <span class="hljs-operator">=</span> Integer.parseInt((String)JOptionPane.showInputDialog(menu, <span class="hljs-string">&quot;请选择字号&quot;</span>, <span class="hljs-string">&quot;字号设置&quot;</span>, JOptionPane.PLAIN_MESSAGE, <span class="hljs-literal">null</span>, size, size[<span class="hljs-number">0</span>]));<br>ta.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(ta.getFont().getFamily(), ta.getFont().getStyle(), selectedsize));<br><br>&#125;<br>&#125;);<br>menu.add(menuItem_9);<br><br>menuItem_10 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;\u989C\u8272&quot;</span>); <span class="hljs-comment">//字体颜色</span><br>menuItem_10.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br><span class="hljs-type">Color</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> JColorChooser.showDialog(ta, <span class="hljs-string">&quot;请选择颜色&quot;</span>, Color.RED);<br><span class="hljs-keyword">if</span>(color != <span class="hljs-literal">null</span>)&#123;<br>    ta.setForeground(color);<br>&#125;<br>&#125;<br>&#125;);<br>menu.add(menuItem_10);<br>contentPane = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>contentPane.setBorder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EmptyBorder</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>));<br>contentPane.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BorderLayout</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>setContentPane(contentPane);<br><br>scrollPane = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JScrollPane</span>();<br>contentPane.add(scrollPane, BorderLayout.CENTER);<br><br>ta = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JTextArea</span>();<br>scrollPane.setViewportView(ta);<br><br><span class="hljs-type">Document</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span>  ta.getDocument();<br>doc.addDocumentListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DocumentListener</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changedUpdate</span><span class="hljs-params">(DocumentEvent e)</span> &#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertUpdate</span><span class="hljs-params">(DocumentEvent e)</span> &#123;<br>setTitle(APP_NAME + <span class="hljs-string">&quot;-&quot;</span> + filename + <span class="hljs-string">&quot;(*)&quot;</span>);<br>isTextModified = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeUpdate</span><span class="hljs-params">(DocumentEvent e)</span> &#123;<br>setTitle(APP_NAME + <span class="hljs-string">&quot;-&quot;</span> + filename + <span class="hljs-string">&quot;(*)&quot;</span>);<br>isTextModified = <span class="hljs-literal">true</span>;<br>&#125;<br><br><br>&#125;);<br><br>popupMenu = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPopupMenu</span>();<br>addPopup(ta, popupMenu);<br><br>radioButtonMenuItem = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JRadioButtonMenuItem</span>(<span class="hljs-string">&quot;\u9ED1\u8272&quot;</span>);<br>buttonGroup.add(radioButtonMenuItem);<br>popupMenu.add(radioButtonMenuItem);<br><br>radioButtonMenuItem_1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JRadioButtonMenuItem</span>(<span class="hljs-string">&quot;\u7EA2\u8272&quot;</span>);<br>buttonGroup.add(radioButtonMenuItem_1);<br>popupMenu.add(radioButtonMenuItem_1);<br><br>radioButtonMenuItem_2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JRadioButtonMenuItem</span>(<span class="hljs-string">&quot;\u84DD\u8272&quot;</span>);<br>buttonGroup.add(radioButtonMenuItem_2);<br>popupMenu.add(radioButtonMenuItem_2);<br><br>radioButtonMenuItem_3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JRadioButtonMenuItem</span>(<span class="hljs-string">&quot;\u7EFF\u8272&quot;</span>);<br>buttonGroup.add(radioButtonMenuItem_3);<br>popupMenu.add(radioButtonMenuItem_3);<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>书生大模型实战营——L1G4000（RAG实战）</title>
    <link href="/2024/11/19/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G4000%EF%BC%88RAG%E5%AE%9E%E6%88%98%EF%BC%89/"/>
    <url>/2024/11/19/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G4000%EF%BC%88RAG%E5%AE%9E%E6%88%98%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="1. 前置知识"></a>1. 前置知识</h1><p>给模型注入新知识分两种方式：</p><ul><li>改变模型权重</li><li>给模型注入格外的上下文或者说外部信息，不改变它的的权重。</li></ul><p>对比两种注入知识方式，第二种更容易实现。RAG 正是这种方式。它能够让基础模型实现非参数知识更新，无需训练就可以掌握新领域的知识。</p><p>LlamaIndex 是一个上下文增强的 LLM 框架，旨在通过将其与特定上下文数据集集成，增强大型语言模型（LLMs）的能力。它允许您构建应用程序，既利用 LLMs 的优势，又融入您的私有或领域特定信息。</p><p><strong>RAG原理</strong>：</p><p><img src="/2024/11/19/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G4000%EF%BC%88RAG%E5%AE%9E%E6%88%98%EF%BC%89/image-20241119212100577.png" alt="image-20241119212100577"></p><h1 id="2-浦语-API-LlamaIndex-实践"><a href="#2-浦语-API-LlamaIndex-实践" class="headerlink" title="2.  浦语 API+LlamaIndex 实践"></a>2.  浦语 API+LlamaIndex 实践</h1><h2 id="2-1-不使用RAG"><a href="#2-1-不使用RAG" class="headerlink" title="2.1 不使用RAG"></a>2.1 不使用RAG</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> openai <span class="hljs-keyword">import</span> OpenAI<br><br>base_url = <span class="hljs-string">&quot;https://internlm-chat.intern-ai.org.cn/puyu/api/v1/&quot;</span><br>model=<span class="hljs-string">&quot;internlm2.5-latest&quot;</span><br><br><span class="hljs-comment"># base_url = &quot;https://api.siliconflow.cn/v1&quot;</span><br><span class="hljs-comment"># api_key = &quot;sk-请填写准确的 token！&quot;</span><br><span class="hljs-comment"># model=&quot;internlm/internlm2_5-7b-chat&quot;</span><br><br>client = OpenAI(<br>    api_key=api_key , <br>    base_url=base_url,<br>)<br><br>chat_rsp = client.chat.completions.create(<br>    model=model,<br>    messages=[&#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;xtuner是什么？&quot;</span>&#125;],<br>)<br><br><span class="hljs-keyword">for</span> choice <span class="hljs-keyword">in</span> chat_rsp.choices:<br>    <span class="hljs-built_in">print</span>(choice.message.content)<br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="/2024/11/19/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G4000%EF%BC%88RAG%E5%AE%9E%E6%88%98%EF%BC%89/image-20241125204451714.png" alt="image-20241125204451714"></p><h2 id="2-2-使用LlamaIndex"><a href="#2-2-使用LlamaIndex" class="headerlink" title="2.2 使用LlamaIndex"></a>2.2 使用LlamaIndex</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os <br>os.environ[<span class="hljs-string">&#x27;NLTK_DATA&#x27;</span>] = <span class="hljs-string">&#x27;/root/nltk_data&#x27;</span><br><br><span class="hljs-keyword">from</span> llama_index.core <span class="hljs-keyword">import</span> VectorStoreIndex, SimpleDirectoryReader<br><span class="hljs-keyword">from</span> llama_index.core.settings <span class="hljs-keyword">import</span> Settings<br><span class="hljs-keyword">from</span> llama_index.embeddings.huggingface <span class="hljs-keyword">import</span> HuggingFaceEmbedding<br><span class="hljs-keyword">from</span> llama_index.legacy.callbacks <span class="hljs-keyword">import</span> CallbackManager<br><span class="hljs-keyword">from</span> llama_index.llms.openai_like <span class="hljs-keyword">import</span> OpenAILike<br><br><br><span class="hljs-comment"># Create an instance of CallbackManager</span><br>callback_manager = CallbackManager()<br><br>api_base_url =  <span class="hljs-string">&quot;https://internlm-chat.intern-ai.org.cn/puyu/api/v1/&quot;</span><br>model = <span class="hljs-string">&quot;internlm2.5-latest&quot;</span><br>api_key = <span class="hljs-string">&quot;请填写 API Key&quot;</span><br><br><span class="hljs-comment"># api_base_url =  &quot;https://api.siliconflow.cn/v1&quot;</span><br><span class="hljs-comment"># model = &quot;internlm/internlm2_5-7b-chat&quot;</span><br><span class="hljs-comment"># api_key = &quot;请填写 API Key&quot;</span><br><br><br><br>llm =OpenAILike(model=model, api_base=api_base_url, api_key=api_key, is_chat_model=<span class="hljs-literal">True</span>,callback_manager=callback_manager)<br><br><br><span class="hljs-comment">#初始化一个HuggingFaceEmbedding对象，用于将文本转换为向量表示</span><br>embed_model = HuggingFaceEmbedding(<br><span class="hljs-comment">#指定了一个预训练的sentence-transformer模型的路径</span><br>    model_name=<span class="hljs-string">&quot;/root/model/sentence-transformer&quot;</span><br>)<br><span class="hljs-comment">#将创建的嵌入模型赋值给全局设置的embed_model属性，</span><br><span class="hljs-comment">#这样在后续的索引构建过程中就会使用这个模型。</span><br>Settings.embed_model = embed_model<br><br><span class="hljs-comment">#初始化llm</span><br>Settings.llm = llm<br><br><span class="hljs-comment">#从指定目录读取所有文档，并加载数据到内存中</span><br>documents = SimpleDirectoryReader(<span class="hljs-string">&quot;/root/llamaindex_demo/data&quot;</span>).load_data()<br><span class="hljs-comment">#创建一个VectorStoreIndex，并使用之前加载的文档来构建索引。</span><br><span class="hljs-comment"># 此索引将文档转换为向量，并存储这些向量以便于快速检索。</span><br>index = VectorStoreIndex.from_documents(documents)<br><span class="hljs-comment"># 创建一个查询引擎，这个引擎可以接收查询并返回相关文档的响应。</span><br>query_engine = index.as_query_engine()<br>response = query_engine.query(<span class="hljs-string">&quot;xtuner是什么?&quot;</span>)<br><br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="/2024/11/19/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G4000%EF%BC%88RAG%E5%AE%9E%E6%88%98%EF%BC%89/image-20241125212201057.png" alt="image-20241125212201057"></p><h2 id="2-3-LlamaIndex-Web"><a href="#2-3-LlamaIndex-Web" class="headerlink" title="2.3 LlamaIndex Web"></a>2.3 LlamaIndex Web</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>书生大模型实战营——L1G2000（玩转书生[多模态对话]与[AI搜索]产品）</title>
    <link href="/2024/11/16/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G2000%EF%BC%88%E7%8E%A9%E8%BD%AC%E4%B9%A6%E7%94%9F-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D-%E4%B8%8E-AI%E6%90%9C%E7%B4%A2-%E4%BA%A7%E5%93%81%EF%BC%89/"/>
    <url>/2024/11/16/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G2000%EF%BC%88%E7%8E%A9%E8%BD%AC%E4%B9%A6%E7%94%9F-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D-%E4%B8%8E-AI%E6%90%9C%E7%B4%A2-%E4%BA%A7%E5%93%81%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="1-书生产品矩阵"><a href="#1-书生产品矩阵" class="headerlink" title="1. 书生产品矩阵"></a>1. 书生产品矩阵</h1><h2 id="1-1-书生·浦语"><a href="#1-1-书生·浦语" class="headerlink" title="1.1 书生·浦语"></a>1.1 书生·浦语</h2><p><strong>· 对话</strong></p><p>进入 <a href="https://internlm-chat.intern-ai.org.cn/">书生浦语</a>: 可进行对话</p><p><img src="/2024/11/16/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G2000%EF%BC%88%E7%8E%A9%E8%BD%AC%E4%B9%A6%E7%94%9F-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D-%E4%B8%8E-AI%E6%90%9C%E7%B4%A2-%E4%BA%A7%E5%93%81%EF%BC%89/image-20241122192915548.png" alt="image-20241122192915548"></p><p><strong>· 调用API</strong></p><ul><li><p>API文档</p><p>提供了 API URL, API Auth，调用示例，请求参数、返回参数说明</p></li><li><p>API Tokens</p><p>调用浦语 API 时需要在请求 Header 内传入 Authorization Tokens 参数用于用户身份验证。我们需要在 <a href="https://internlm.intern-ai.org.cn/api/tokens">API Tokens 模块</a>内创建此 API Tokens 。</p></li><li><p>查看API可用Models</p><p>目前 Chat API 仅支持以 <code>internlm2.5-latest</code> 作为 model ID，它将默认指向我们最新的 InternLM2.5 模型 <code>internlm2.5-20b-0719</code> 。</p></li><li><p>查看API Usage 与 API Rate Limits</p><p>在 <a href="https://internlm.intern-ai.org.cn/api/strategy">API 限流策略</a>模块可以查询到我们对这个账户调用 API 频率的流控限制，所有新注册的社区用户默认值为：</p><ul><li>RPM (Requests per Minute)：10</li><li>TPM (Tokens per Minute)：5000</li></ul></li></ul><p>选择逻代码编程、文章创作、灵感创意、角色扮演、语言翻译、逻辑推理以上任意一个场景或者你自己感兴趣的话题与浦语进行对话 (轮次不限)。</p><p>User：帮我创作一个乙女游戏的脚本</p><p><img src="/2024/11/16/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G2000%EF%BC%88%E7%8E%A9%E8%BD%AC%E4%B9%A6%E7%94%9F-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D-%E4%B8%8E-AI%E6%90%9C%E7%B4%A2-%E4%BA%A7%E5%93%81%EF%BC%89/image-20241122195510403.png" alt="image-20241122195510403"></p><p>只有一个男主角，太少啦</p><p><img src="/2024/11/16/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G2000%EF%BC%88%E7%8E%A9%E8%BD%AC%E4%B9%A6%E7%94%9F-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D-%E4%B8%8E-AI%E6%90%9C%E7%B4%A2-%E4%BA%A7%E5%93%81%EF%BC%89/image-20241122195641939.png" alt="image-20241122195641939"></p><h2 id="1-2-MindSearch"><a href="#1-2-MindSearch" class="headerlink" title="1.2 MindSearch"></a>1.2 MindSearch</h2><p><a href="https://internlm-chat.intern-ai.org.cn/suggestion/oVmlpR34V9U6v9KBQ1TN7IpPQh1Z89ONciSGUKmgFFA=">MindSearch</a> 是一个开源的 AI 搜索引擎。它会对你提出的问题进行分析并拆解为数个子问题，在互联网上搜索、总结得到各个子问题的答案，最后通过模型总结得到最终答案。</p><ul><li><p>拆解问题</p><p>问题：目前生成式AI在学术和工业界有什么最新进展？</p><p><img src="/2024/11/16/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G2000%EF%BC%88%E7%8E%A9%E8%BD%AC%E4%B9%A6%E7%94%9F-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D-%E4%B8%8E-AI%E6%90%9C%E7%B4%A2-%E4%BA%A7%E5%93%81%EF%BC%89/image-20241122194209057.png" alt="image-20241122194209057"></p></li><li><p>解决子问题</p><ul><li><p>思考：我需要在互联网上搜索什么资料来回答这个问题？子节点总结搜索关键词调用搜索引擎搜索到海量参考网页。</p><p><img src="/2024/11/16/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G2000%EF%BC%88%E7%8E%A9%E8%BD%AC%E4%B9%A6%E7%94%9F-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D-%E4%B8%8E-AI%E6%90%9C%E7%B4%A2-%E4%BA%A7%E5%93%81%EF%BC%89/image-20241122194459536.png" alt="image-20241122194459536"></p></li><li><p>信息来源：根据首次搜索到的网页摘要，子节点决定知否对网页进行全文精读。</p><p><img src="/2024/11/16/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G2000%EF%BC%88%E7%8E%A9%E8%BD%AC%E4%B9%A6%E7%94%9F-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D-%E4%B8%8E-AI%E6%90%9C%E7%B4%A2-%E4%BA%A7%E5%93%81%EF%BC%89/image-20241122194519466.png" alt="image-20241122194519466"></p></li><li><p>信息整合：整合精读网页的所有信息形成子节点的结论。</p><p><img src="/2024/11/16/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G2000%EF%BC%88%E7%8E%A9%E8%BD%AC%E4%B9%A6%E7%94%9F-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D-%E4%B8%8E-AI%E6%90%9C%E7%B4%A2-%E4%BA%A7%E5%93%81%EF%BC%89/image-20241122194535513.png" alt="image-20241122194535513"></p></li></ul></li><li><p>总结子节点结论</p><p>一般情况下主节点会根据子节点得出的结论，总结形成最终回复</p><p>部分情况下，主节点会根据子节点得到的结论进一步拆解子问题回到步骤 (1) 直到得到最终结论。</p><p><img src="/2024/11/16/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G2000%EF%BC%88%E7%8E%A9%E8%BD%AC%E4%B9%A6%E7%94%9F-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D-%E4%B8%8E-AI%E6%90%9C%E7%B4%A2-%E4%BA%A7%E5%93%81%EF%BC%89/image-20241122194846765.png" alt="image-20241122194846765"></p></li></ul><p>知乎上基础任务中的三个问题回答。</p><ol><li><p><a href="https://www.zhihu.com/question/1841339763">目前生成式AI在学术和工业界有什么最新进展？</a></p><p><a href="https://www.zhihu.com/question/1841339763/answer/38229627072">https://www.zhihu.com/question/1841339763/answer/38229627072</a></p></li><li><p><a href="https://www.zhihu.com/question/1915470960">2024 年诺贝尔物理学奖为何会颁发给人工智能领域，这一举动对这两个领域的从业人员会有什么影响？</a></p><p><a href="https://www.zhihu.com/question/1915470960/answer/38231201353">https://www.zhihu.com/question/1915470960/answer/38231201353</a></p></li><li><p><a href="https://www.zhihu.com/question/1915582405">最近大火的中国 3A 大作《黑神话·悟空》里有什么让你难忘的精彩故事情节？</a></p><p><a href="https://www.zhihu.com/question/1915582405/answer/38232059085">https://www.zhihu.com/question/1915582405/answer/38232059085</a></p></li></ol><h2 id="1-3-书生·万象"><a href="#1-3-书生·万象" class="headerlink" title="1.3 书生·万象"></a>1.3 书生·万象</h2><p><a href="https://internvl.opengvlab.com/">书生·万象</a>是InternVL 开源的视觉语言模型官方的对话产品</p><p>体验书生·万象模型多模态能力，从图片 OCR、图片内容理解等方面与书生·万象展开一次包含图片内容的对话</p><p><img src="/2024/11/16/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G2000%EF%BC%88%E7%8E%A9%E8%BD%AC%E4%B9%A6%E7%94%9F-%E5%A4%9A%E6%A8%A1%E6%80%81%E5%AF%B9%E8%AF%9D-%E4%B8%8E-AI%E6%90%9C%E7%B4%A2-%E4%BA%A7%E5%93%81%EF%BC%89/image-20241122195923690.png" alt="image-20241122195923690"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>青训营X豆包MarsCode-技术训练营——六大核心组件</title>
    <link href="/2024/11/14/%E9%9D%92%E8%AE%AD%E8%90%A5X%E8%B1%86%E5%8C%85MarsCode-%E6%8A%80%E6%9C%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%94%E2%80%94%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/"/>
    <url>/2024/11/14/%E9%9D%92%E8%AE%AD%E8%90%A5X%E8%B1%86%E5%8C%85MarsCode-%E6%8A%80%E6%9C%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%94%E2%80%94%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Model-I-O"><a href="#Model-I-O" class="headerlink" title="Model I&#x2F;O"></a>Model I&#x2F;O</h1><p>模型的使用过程：输入提示 + 调用模型 + 输出解析   （Model I&#x2F;O）</p><p><img src="/2024/11/14/%E9%9D%92%E8%AE%AD%E8%90%A5X%E8%B1%86%E5%8C%85MarsCode-%E6%8A%80%E6%9C%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%94%E2%80%94%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/image-20241114184240348.png" alt="image-20241114184240348"></p><h2 id="1-提示模板"><a href="#1-提示模板" class="headerlink" title="1. 提示模板"></a>1. 提示模板</h2><p>具体原则：</p><ol><li>给予模型清晰明确的指示</li><li>让模型慢慢地思考</li></ol><ul><li><p>提示模板的生成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入LangChain中的提示模板</span><br><span class="hljs-keyword">from</span> langchain.prompts <span class="hljs-keyword">import</span> PromptTemplate<br><span class="hljs-comment"># 创建原始模板</span><br>template = <span class="hljs-string">&quot;&quot;&quot;您是一位专业的鲜花店文案撰写员。\n</span><br><span class="hljs-string">对于售价为 &#123;price&#125; 元的 &#123;flower_name&#125; ，您能提供一个吸引人的简短描述吗？</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 根据原始模板创建LangChain提示模板</span><br>prompt = PromptTemplate.from_template(template) <br><span class="hljs-comment"># 打印LangChain提示模板的内容</span><br><span class="hljs-built_in">print</span>(prompt)<br></code></pre></td></tr></table></figure><p>提示模板输出：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">input_variables</span>=[<span class="hljs-string">&#x27;flower_name&#x27;</span>, <span class="hljs-string">&#x27;price&#x27;</span>] <br><span class="hljs-attr">template</span>=<span class="hljs-string">&#x27;您是一位专业的鲜花店文案撰写员。\n\n对于售价为 &#123;price&#125; 元</span><br><span class="hljs-string">的 &#123;flower_name&#125; ，您能提供一个吸引人的简短描述吗？\n&#x27;</span><br></code></pre></td></tr></table></figure><p>“模板”就是一段描述某种鲜花的文本格式，它是一个 f-string，其中有两个变量 {flower_name} 和 {price} 表示花的名称和价格，这两个值是模板里面的占位符，在实际使用模板生成提示时会被具体的值替换。</p></li></ul><h2 id="2-语言模型"><a href="#2-语言模型" class="headerlink" title="2. 语言模型"></a>2. 语言模型</h2><ol><li>大语言模型：Text Model，这些模型将文本字符串作为输入，并返回文本字符串作为输出。</li><li>聊天模型：Chat Model，主要代表Open AI的ChatGPT系列模型。这些模型通常由语言模型支持，但它们的 API 更加结构化。具体来说，这些模型将聊天消息列表作为输入，并返回聊天消息。</li><li>文本嵌入模型：Embedding Model，这些模型将文本作为输入并返回浮点数列表，也就是Embedding。</li></ol><p>下面调用语言模型，让模型帮助我们写文案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain.prompts <span class="hljs-keyword">import</span> PromptTemplate<br><span class="hljs-keyword">import</span> os <br><span class="hljs-keyword">from</span> langchain_community.llms <span class="hljs-keyword">import</span> HuggingFaceHub<br><br><br>os.environ[<span class="hljs-string">&quot;http_proxy&quot;</span>] = <span class="hljs-string">&quot;http://localhost:7890&quot;</span><br>os.environ[<span class="hljs-string">&quot;https_proxy&quot;</span>] = <span class="hljs-string">&quot;http://localhost:7890&quot;</span><br><br><span class="hljs-comment"># 创建原始模板</span><br>template = <span class="hljs-string">&quot;&quot;&quot;您是一位专业的鲜花店文案撰写员。\n</span><br><span class="hljs-string">对于售价为 &#123;price&#125; 元的 &#123;flower_name&#125; ，您能提供一个吸引人的简短描述吗？</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 根据原始模板创建LangChain提示模板</span><br>prompt = PromptTemplate.from_template(template) <br><span class="hljs-comment"># 打印LangChain提示模板的内容</span><br><span class="hljs-built_in">print</span>(prompt) <br><br><span class="hljs-comment"># 创建模型实例</span><br>llm = HuggingFaceHub(repo_id=<span class="hljs-string">&quot;Qwen/Qwen2.5-Coder-32B-Instruct&quot;</span>, model_kwargs=&#123;<span class="hljs-string">&quot;temperature&quot;</span>: <span class="hljs-number">0.7</span>&#125;)<br><span class="hljs-comment"># 输入提示词</span><br><span class="hljs-built_in">input</span> = prompt.<span class="hljs-built_in">format</span>(flower_name = [<span class="hljs-string">&quot;杏花&quot;</span>], price = <span class="hljs-string">&#x27;30&#x27;</span>)<br><span class="hljs-comment"># 获取模型输出</span><br>output = llm.invoke(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">春日里，温柔的杏花轻轻绽放，每一朵都承载着诗意的期盼。选择一束这样的杏花，让春意盎然的气息伴随您的每一天。<br></code></pre></td></tr></table></figure><h2 id="3-输出解析"><a href="#3-输出解析" class="headerlink" title="3. 输出解析"></a>3. 输出解析</h2><p>在开发具体应用的过程中，很明显<strong>我们不仅仅需要文字，更多情况下我们需要的是程序能够直接处理的、结构化的数据</strong>。</p><p>下面，我们就通过LangChain的输出解析器来重构程序，让模型有能力生成结构化的回应，同时对其进行解析，直接将解析好的数据存入CSV文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain.prompts <span class="hljs-keyword">import</span> PromptTemplate<br><span class="hljs-keyword">import</span> os <br><span class="hljs-keyword">from</span> langchain_community.llms <span class="hljs-keyword">import</span> HuggingFaceHub<br><span class="hljs-keyword">from</span> langchain_huggingface <span class="hljs-keyword">import</span> HuggingFaceEndpoint<br><span class="hljs-keyword">from</span> langchain.output_parsers <span class="hljs-keyword">import</span> StructuredOutputParser, ResponseSchema<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> json<br><br>os.environ[<span class="hljs-string">&quot;HUGGINGFACEHUB_API_TOKEN&quot;</span>] = <span class="hljs-string">&quot;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&quot;</span><br>os.environ[<span class="hljs-string">&quot;http_proxy&quot;</span>] = <span class="hljs-string">&quot;http://localhost:7890&quot;</span><br>os.environ[<span class="hljs-string">&quot;https_proxy&quot;</span>] = <span class="hljs-string">&quot;http://localhost:7890&quot;</span><br><br><span class="hljs-comment"># # 创建原始模板</span><br><span class="hljs-comment"># template = &quot;&quot;&quot;您是一位专业的鲜花店文案撰写员。\n</span><br><span class="hljs-comment"># 对于售价为 &#123;price&#125; 元的 &#123;flower_name&#125; ，您能提供一个吸引人的简短描述吗？</span><br><br><span class="hljs-comment"># &#123;format_instructions&#125;</span><br><span class="hljs-comment"># &quot;&quot;&quot;</span><br><br><br><br><br><span class="hljs-comment"># # 创建模型实例</span><br><span class="hljs-comment"># llm = HuggingFaceHub(repo_id=&quot;bigscience/bloom-1b7&quot;)</span><br><br><span class="hljs-comment"># # 定义我们想要接收的响应模式</span><br><span class="hljs-comment"># response_schemas = [</span><br><span class="hljs-comment">#     ResponseSchema(name = &quot;description&quot;, description = &quot;鲜花的描述文案&quot;),</span><br><span class="hljs-comment">#     ResponseSchema(name = &quot;reason&quot;, description = &quot;问什么要这样写这个文案&quot;),</span><br><span class="hljs-comment"># ]</span><br><span class="hljs-comment"># # 构造输出解析器</span><br><span class="hljs-comment"># output_parse = StructuredOutputParser.from_response_schemas(response_schemas)</span><br><br><span class="hljs-comment"># # 获取格式指示</span><br><span class="hljs-comment"># fromat_instructions = output_parse.get_format_instructions()</span><br><span class="hljs-comment"># # 根据原始模板创建提示，</span><br><span class="hljs-comment"># prompt = PromptTemplate.from_template(template,</span><br><span class="hljs-comment">#                                       partial_variables = &#123;&quot;format_instructions&quot;: fromat_instructions&#125;)</span><br><span class="hljs-comment"># flowers = [&quot;玫瑰&quot;, &quot;康乃馨&quot;, &quot;百合&quot;]</span><br><span class="hljs-comment"># prices = [&quot;50&quot;, &quot;20&quot;, &quot;30&quot;]</span><br><br><br><span class="hljs-comment"># df = pd.DataFrame(columns=[&quot;flower&quot;, &quot;price&quot;, &quot;description&quot;, &quot;reason&quot;])</span><br><br><span class="hljs-comment"># for flower, price in zip(flowers, prices):</span><br><span class="hljs-comment">#     # 根据提示准备模型的输入</span><br><span class="hljs-comment">#     input = prompt.format(flower_name = flower, price  = price)</span><br><span class="hljs-comment">#     # 获取输出</span><br><span class="hljs-comment">#     output = llm.invoke(input)</span><br><span class="hljs-comment">#     print(output)</span><br><br><span class="hljs-comment">#     print(type(output))</span><br>    <br><span class="hljs-comment">#     # 解析输出</span><br><span class="hljs-comment">#     parsed_output = output_parse.parse(output)</span><br><br><span class="hljs-comment">#     # 在解析后的输出中添加 &quot;flower&quot; &quot;price&quot;</span><br><span class="hljs-comment">#     parsed_output[&quot;flower&quot;] = flower</span><br><span class="hljs-comment">#     parsed_output[&quot;price&quot;]  = price</span><br><br><span class="hljs-comment">#     # 把解析后的输出添加到df中</span><br><span class="hljs-comment">#     df.loc[len(df)] = parsed_output</span><br><br><br><br><span class="hljs-comment"># print(df.to_dict(orient=&#x27;records&#x27;))</span><br><span class="hljs-comment"># # 保存DataFrame到CSV文件</span><br><span class="hljs-comment"># df.to_csv(&quot;flowers_with_descriptions.csv&quot;, index=False)</span><br><br><span class="hljs-comment"># 创建提示模板</span><br>prompt_template = <span class="hljs-string">&quot;&quot;&quot;您是一位专业的鲜花店文案撰写员。</span><br><span class="hljs-string">对于售价为 &#123;price&#125; 元的 &#123;flower_name&#125; ，您能提供一个吸引人的简短描述吗？</span><br><span class="hljs-string">output只需要回复一个json格式的数据即可</span><br><span class="hljs-string">&#123;format_instructions&#125;&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 创建模型实例</span><br><span class="hljs-comment"># model = OpenAI(model_name=&#x27;gpt-3.5-turbo-instruct&#x27;)</span><br>model = HuggingFaceEndpoint(repo_id=<span class="hljs-string">&quot;Qwen/Qwen2.5-Coder-32B-Instruct&quot;</span>)<br><br><span class="hljs-comment"># 定义我们想要接收的响应模式</span><br>response_schemas = [<br>    ResponseSchema(name=<span class="hljs-string">&quot;description&quot;</span>, description=<span class="hljs-string">&quot;鲜花的描述文案&quot;</span>),<br>    ResponseSchema(name=<span class="hljs-string">&quot;reason&quot;</span>, description=<span class="hljs-string">&quot;问什么要这样写这个文案&quot;</span>),<br>]<br><span class="hljs-comment"># 创建输出解析器</span><br>output_parser = StructuredOutputParser.from_response_schemas(response_schemas)<br><br><span class="hljs-comment"># 获取格式指示</span><br>format_instructions = output_parser.get_format_instructions()<br><span class="hljs-comment"># 根据模板创建提示，同时在提示中加入输出解析器的说明</span><br>prompt = PromptTemplate.from_template(<br>    prompt_template, partial_variables=&#123;<span class="hljs-string">&quot;format_instructions&quot;</span>: format_instructions&#125;<br>)<br><br><span class="hljs-comment"># 数据准备</span><br>flowers = [<span class="hljs-string">&quot;玫瑰&quot;</span>, <span class="hljs-string">&quot;百合&quot;</span>, <span class="hljs-string">&quot;康乃馨&quot;</span>]<br>prices = [<span class="hljs-string">&quot;50&quot;</span>, <span class="hljs-string">&quot;30&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>]<br><br><span class="hljs-comment"># 创建一个空的DataFrame用于存储结果</span><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.DataFrame(columns=[<span class="hljs-string">&quot;flower&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;reason&quot;</span>])  <span class="hljs-comment"># 先声明列名</span><br><br><span class="hljs-keyword">for</span> flower, price <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(flowers, prices):<br>    <span class="hljs-comment"># 根据提示准备模型的输入</span><br>    <span class="hljs-built_in">input</span> = prompt.<span class="hljs-built_in">format</span>(flower_name=flower, price=price)<br><br>    <span class="hljs-comment"># 获取模型的输出</span><br>    output = model.invoke(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output)<br>    <br>    <span class="hljs-comment"># 解析模型的输出（这是一个字典结构）</span><br>    parsed_output = output_parser.parse(output)<br><br>    <span class="hljs-comment"># 在解析后的输出中添加“flower”和“price”</span><br>    parsed_output[<span class="hljs-string">&quot;flower&quot;</span>] = flower<br>    parsed_output[<span class="hljs-string">&quot;price&quot;</span>] = price<br><br>    <span class="hljs-comment"># 将解析后的输出添加到DataFrame中</span><br>    df.loc[<span class="hljs-built_in">len</span>(df)] = parsed_output<br><br><span class="hljs-comment"># 打印字典</span><br><span class="hljs-built_in">print</span>(df.to_dict(orient=<span class="hljs-string">&quot;records&quot;</span>))<br><br><span class="hljs-comment"># 保存DataFrame到CSV文件</span><br>df.to_csv(<span class="hljs-string">&quot;flowers_with_descriptions.csv&quot;</span>, index=<span class="hljs-literal">False</span>)<br><br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[&#123;<span class="hljs-symbol">&#x27;flower</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;玫瑰</span>&#x27;, <span class="hljs-symbol">&#x27;price</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;50</span>&#x27;, <span class="hljs-symbol">&#x27;description</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;这束由精选玫瑰打造的浪漫之作，不仅承载着无尽的爱意，更散发着迷人的香气，每一朵都如同精心雕琢的艺术品，定能让您的爱意传递得更加</span><br>深情。&#x27;, <span class="hljs-symbol">&#x27;reason</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;通过强调玫瑰的精选与艺术品般的特质，能够激发顾客对鲜花质量的关注，同时，提到无尽爱意和迷人香气，则能够触动顾客的情感，增加购买的欲望。</span>&#x27;&#125;,<br>&#123;<span class="hljs-symbol">&#x27;flower</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;百合</span>&#x27;, <span class="hljs-symbol">&#x27;price</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;30</span>&#x27;, <span class="hljs-symbol">&#x27;description</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;优雅绽放，30元即可将这束纯洁的百合带回家，为您的空间增添一抹宁静与高雅。</span>&#x27;, <span class="hljs-symbol">&#x27;reason</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;百合象征着纯洁与高雅，使用这些词汇可以吸引追求品质生活的顾客。</span><br>价格明确，让消费者一目了然，增加购买意愿。&#x27;&#125;,<br>&#123;<span class="hljs-symbol">&#x27;flower</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;康乃馨</span>&#x27;, <span class="hljs-symbol">&#x27;price</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;20</span>&#x27;, <span class="hljs-symbol">&#x27;description</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;每朵康乃馨都承载着温柔的祝福，它们不仅色彩丰富，更蕴含着深深的情感。以20元的价格</span><br>，让这份温馨与爱意轻松送达。&#x27;, <span class="hljs-symbol">&#x27;reason</span><span class="hljs-symbol">&#x27;:</span> <span class="hljs-symbol">&#x27;通过描述康乃馨的温柔与情感，能够吸引那些寻求表达情感的顾客。同时，提到价格，使顾客觉得这份情感的表达既贴心又经济实惠，增加购买欲望。</span>&#x27;&#125;] <br></code></pre></td></tr></table></figure><p>首先定义输出结构，我们希望模型生成的答案包含两部分：鲜花的描述文案（description）和撰写这个文案的原因（reason）。所以我们定义了一个名为response_schemas的列表，其中包含两个ResponseSchema对象，分别对应这两部分的输出。</p><p>然后，我们通过输出解析器对象的get_format_instructions()方法获取输出的格式说明（format_instructions），再根据原始的字符串模板和输出解析器格式说明创建新的提示模板（这个模板就整合了输出解析结构信息）。再通过新的模板生成模型的输入，得到模型的输出。此时模型的输出结构将尽最大可能遵循我们的指示，以便于输出解析器进行解析。</p><h1 id="提示工程"><a href="#提示工程" class="headerlink" title="提示工程"></a>提示工程</h1><h2 id="1-提示的结构"><a href="#1-提示的结构" class="headerlink" title="1. 提示的结构"></a>1. 提示的结构</h2><p><img src="/2024/11/14/%E9%9D%92%E8%AE%AD%E8%90%A5X%E8%B1%86%E5%8C%85MarsCode-%E6%8A%80%E6%9C%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%94%E2%80%94%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/image-20241116180908125.png" alt="image-20241116180908125"></p><ul><li>指令：告诉模型这个任务大概要做什么、怎么做，比如如何使用提供的外部信息、如何处理查询以及如何构造输出。这通常是一个提示模板中比较固定的部分。一个常见用例是告诉模型“你是一个有用的XX助手”，这会让他更认真地对待自己的角色。</li><li>上下文：充当模型的额外知识来源。这些信息可以手动插入到提示中，通过矢量数据库检索得来，或通过其他方式（如调用API、计算器等工具）拉入。一个常见的用例时是把从向量数据库查询到的知识作为上下文传递给模型。</li><li>提示输入：具体的问题或者需要大模型做的具体事情，这个部分和“指令”部分其实也可以合二为一。但是拆分出来成为一个独立的组件，就更加结构化，便于复用模板。这通常是作为变量，在调用模型之前传递给提示模板，以形成具体的提示。</li><li>输出指示器：标记要生成的文本的开始。这就像我们小时候的数学考卷，先写一个“解”，就代表你要开始答题了。如果生成 Python 代码，可以使用 “import” 向模型表明它必须开始编写 Python 代码（因为大多数 Python 脚本以import开头）。这部分在我们和ChatGPT对话时往往是可有可无的，当然LangChain中的代理在构建提示模板时，经常性的会用一个“Thought：”（思考）作为引导词，指示模型开始输出自己的推理（Reasoning）。</li></ul><h2 id="2-LangChain-提示模板的类型"><a href="#2-LangChain-提示模板的类型" class="headerlink" title="2. LangChain 提示模板的类型"></a>2. LangChain 提示模板的类型</h2><p><img src="/2024/11/14/%E9%9D%92%E8%AE%AD%E8%90%A5X%E8%B1%86%E5%8C%85MarsCode-%E6%8A%80%E6%9C%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%94%E2%80%94%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/image-20241116181145311.png" alt="image-20241116181145311"></p><h3 id="2-1-使用-PromptTemplate"><a href="#2-1-使用-PromptTemplate" class="headerlink" title="2.1 使用 PromptTemplate"></a>2.1 使用 PromptTemplate</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain <span class="hljs-keyword">import</span> PromptTemplate<br><br>template = <span class="hljs-string">&quot;&quot;&quot;\</span><br><span class="hljs-string">你是一个业务咨询顾问。</span><br><span class="hljs-string">你给一个销售&#123;product&#125;的电商公司，其一个好名字？</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>prompt = PromptTemplate.from_template(template)<br><br><span class="hljs-built_in">print</span>(prompt.<span class="hljs-built_in">format</span>(product = <span class="hljs-string">&quot;鲜花&quot;</span>))<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">你是一个业务咨询顾问。<br>你给一个销售鲜花的电商公司，其一个好名字？<br></code></pre></td></tr></table></figure><p>这个程序的主要功能是生成适用于不同场景的提示，对用户定义的一种产品或服务提供公司命名建议。</p><p>PromptTemplate的from_template方法，我们创建了一个提示模板对象，并通过prompt.format方法将模板中的 {product} 替换为 <code>&quot;鲜花&quot;</code>。</p><p>在上面这个过程中，LangChain中的模板的一个方便之处是from_template方法可以从传入的字符串中自动提取变量名称（如product），而无需刻意指定。<strong>上面程序中的product自动成为了format方法中的一个参数</strong>。</p><p>当然，也可以通过提示模板类的构造函数，在创建模板时手工指定input_variables，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># method2: 直接在创建模板时手工指定input_variables</span><br>prompt = PromptTemplate(<br>    input_variables = [<span class="hljs-string">&quot;product&quot;</span>],<br>    template = template<br>)<br><span class="hljs-built_in">print</span>(prompt.<span class="hljs-built_in">format</span>(product = <span class="hljs-string">&quot;鲜花&quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="2-2-使用-ChatPromptTemplate"><a href="#2-2-使用-ChatPromptTemplate" class="headerlink" title="2.2 使用 ChatPromptTemplate"></a>2.2 使用 ChatPromptTemplate</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入聊天消息类模板</span><br><span class="hljs-keyword">from</span> langchain.prompts <span class="hljs-keyword">import</span> (<br>    ChatPromptTemplate,<br>    SystemMessagePromptTemplate,<br>    HumanMessagePromptTemplate,<br>)<br><span class="hljs-comment"># 模板的构建</span><br>template=<span class="hljs-string">&quot;你是一位专业顾问，负责为专注于&#123;product&#125;的公司起名。&quot;</span><br>system_message_prompt = SystemMessagePromptTemplate.from_template(template)<br>human_template=<span class="hljs-string">&quot;公司主打产品是&#123;product_detail&#125;。&quot;</span><br>human_message_prompt = HumanMessagePromptTemplate.from_template(human_template)<br>prompt_template = ChatPromptTemplate.from_messages([system_message_prompt, human_message_prompt])<br><br><span class="hljs-comment"># 格式化提示消息生成提示</span><br>prompt = prompt_template.format_prompt(product=<span class="hljs-string">&quot;鲜花装饰&quot;</span>, product_detail=<span class="hljs-string">&quot;创新的鲜花设计。&quot;</span>).to_messages()<br><br><span class="hljs-comment"># 下面调用模型，把提示传入模型，生成结果</span><br><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;OPENAI_API_KEY&quot;</span>] = <span class="hljs-string">&#x27;你的OpenAI Key&#x27;</span><br><span class="hljs-keyword">from</span> langchain.chat_models <span class="hljs-keyword">import</span> ChatOpenAI<br>chat = ChatOpenAI()<br>result = chat(prompt)<br><span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><h2 id="3-FewShot的思想"><a href="#3-FewShot的思想" class="headerlink" title="3. FewShot的思想"></a>3. FewShot的思想</h2><p>把Zero-Shot翻译为“顿悟”，聪明的大模型，某些情况下也是能够做到的。</p><ul><li>在Few-Shot学习设置中，模型会被给予几个示例，以帮助模型理解任务，并生成正确的响应。</li><li>在Zero-Shot学习设置中，模型只根据任务的描述生成响应，不需要任何示例。</li></ul><h3 id="3-1-FewShotPromptTemplate"><a href="#3-1-FewShotPromptTemplate" class="headerlink" title="3.1 FewShotPromptTemplate"></a>3.1 FewShotPromptTemplate</h3><p>使用FewShotPromptTemplate创建模板，能够使用多个示例来指导模型生成对应的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 创建一些示例</span><br>samples = [<br>    &#123;<br>        <span class="hljs-string">&quot;flower_type&quot;</span>: <span class="hljs-string">&quot;玫瑰&quot;</span>,<br>        <span class="hljs-string">&quot;occasion&quot;</span>: <span class="hljs-string">&quot;爱情&quot;</span>,<br>        <span class="hljs-string">&quot;ad_copy&quot;</span>: <span class="hljs-string">&quot;玫瑰，浪漫的象征，是你向心爱的人表达爱意的最佳选择。&quot;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&quot;flower_type&quot;</span>: <span class="hljs-string">&quot;康乃馨&quot;</span>,<br>        <span class="hljs-string">&quot;occasion&quot;</span>: <span class="hljs-string">&quot;母亲节&quot;</span>,<br>        <span class="hljs-string">&quot;ad_copy&quot;</span>: <span class="hljs-string">&quot;康乃馨代表着母爱的纯洁与伟大，是母亲节赠送给母亲的完美礼物。&quot;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&quot;flower_type&quot;</span>: <span class="hljs-string">&quot;百合&quot;</span>,<br>        <span class="hljs-string">&quot;occasion&quot;</span>: <span class="hljs-string">&quot;庆祝&quot;</span>,<br>        <span class="hljs-string">&quot;ad_copy&quot;</span>: <span class="hljs-string">&quot;百合象征着纯洁与高雅，是你庆祝特殊时刻的理想选择。&quot;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&quot;flower_type&quot;</span>: <span class="hljs-string">&quot;向日葵&quot;</span>,<br>        <span class="hljs-string">&quot;occasion&quot;</span>: <span class="hljs-string">&quot;鼓励&quot;</span>,<br>        <span class="hljs-string">&quot;ad_copy&quot;</span>: <span class="hljs-string">&quot;向日葵象征着坚韧和乐观，是你鼓励亲朋好友的最好方式。&quot;</span>,<br>    &#125;,<br>]<br><br><span class="hljs-keyword">from</span> langchain.prompts.prompt <span class="hljs-keyword">import</span> PromptTemplate<br>template=<span class="hljs-string">&quot;鲜花类型: &#123;flower_type&#125;\n场合: &#123;occasion&#125;\n文案: &#123;ad_copy&#125;&quot;</span><br>prompt_sample = PromptTemplate(input_variables = [<span class="hljs-string">&quot;flower_type&quot;</span>, <span class="hljs-string">&quot;occasion&quot;</span>, <span class="hljs-string">&quot;ad_copy&quot;</span>] ,<br>                               template = template)<br><span class="hljs-built_in">print</span>(prompt_sample.<span class="hljs-built_in">format</span>(**samples[<span class="hljs-number">0</span>]))<br><br><span class="hljs-comment"># FewShotPromptTemplate对a象</span><br><span class="hljs-keyword">from</span> langchain.prompts.few_shot <span class="hljs-keyword">import</span> FewShotPromptTemplate<br>prompt = FewShotPromptTemplate(<br>    examples = samples,<br>    example_prompt = prompt_sample,<br>    suffix = <span class="hljs-string">&quot;鲜花类型: &#123;flower_type&#125;\n场合: &#123;occasion&#125;&quot;</span>,<br>    input_variables = [<span class="hljs-string">&quot;flower_type&quot;</span>, <span class="hljs-string">&quot;occasion&quot;</span>]<br>)<br><span class="hljs-built_in">print</span>(prompt.<span class="hljs-built_in">format</span>(flower_type=<span class="hljs-string">&quot;野玫瑰&quot;</span>, occasion=<span class="hljs-string">&quot;爱情&quot;</span>))<br></code></pre></td></tr></table></figure><p>使用大模型创建新文案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain_huggingface <span class="hljs-keyword">import</span> HuggingFaceEndpoint<br>chat = HuggingFaceEndpoint(repo_id=<span class="hljs-string">&quot;Qwen/Qwen2.5-Coder-32B-Instruct&quot;</span>)<br>result = chat.invoke(prompt.<span class="hljs-built_in">format</span>(flower_type=<span class="hljs-string">&quot;野玫瑰&quot;</span>, occasion=<span class="hljs-string">&quot;爱情&quot;</span>))<br><span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><p>文案: 野玫瑰虽然没有温室玫瑰那样娇艳，但它代表着自然的爱情，是送给爱人的一份惊喜。</p><h3 id="3-2-使用示例选择器"><a href="#3-2-使用示例选择器" class="headerlink" title="3.2 使用示例选择器"></a>3.2 使用示例选择器</h3><p>示例选择器：来选择最合适的样本。</p><p>SemanticSimilarityExampleSelector对象，这个对象可以根据语义相似性选择最相关的示例。然后，它创建了一个新的FewShotPromptTemplate对象，这个对象使用了上一步创建的选择器来选择最相关的示例生成提示。</p><p>示例选择器example_selector会根据语义的相似度（余弦相似度）找到最相似的示例，也就是“玫瑰”，并用这个示例构建了FewShot模板。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> langchain.prompts.example_selector <span class="hljs-keyword">import</span> SemanticSimilarityExampleSelector<br><span class="hljs-keyword">from</span> langchain.vectorstores <span class="hljs-keyword">import</span> Chroma<br><span class="hljs-keyword">from</span> langchain.embeddings <span class="hljs-keyword">import</span> HuggingFaceEmbeddings<br><br><span class="hljs-comment"># 初始化示例选择器</span><br>example_selector = SemanticSimilarityExampleSelector.from_examples(<br>    samples,<br>    HuggingFaceEmbeddings(),<br>    Chroma,<br>    k=<span class="hljs-number">1</span>,<br>)<br>prompt = FewShotPromptTemplate(<br>    example_selector=example_selector, <br>    example_prompt=prompt_sample, <br>    suffix=<span class="hljs-string">&quot;鲜花类型: &#123;flower_type&#125;\n场合: &#123;occasion&#125;&quot;</span>, <br>    input_variables=[<span class="hljs-string">&quot;flower_type&quot;</span>, <span class="hljs-string">&quot;occasion&quot;</span>]<br>)<br><span class="hljs-built_in">print</span>(prompt.<span class="hljs-built_in">format</span>(flower_type=<span class="hljs-string">&quot;红玫瑰&quot;</span>, occasion=<span class="hljs-string">&quot;爱情&quot;</span>))<br>result = chat.invoke(prompt.<span class="hljs-built_in">format</span>(flower_type=<span class="hljs-string">&quot;野玫瑰&quot;</span>, occasion=<span class="hljs-string">&quot;爱情&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------------------&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h2 id="3-CoT"><a href="#3-CoT" class="headerlink" title="3. CoT"></a>3. CoT</h2><p>CoT这个概念来源于学术界，是谷歌大脑的Jason Wei等人于2022年在论文《<a href="https://link.juejin.cn/?target=https://proceedings.neurips.cc/paper_files/paper/2022/file/9d5609613524ecf4f15af0f7b31abca4-Paper-Conference.pdf">Chain-of-Thought Prompting Elicits Reasoning in Large Language Models</a>（自我一致性提升了语言模型中的思维链推理能力）》中提出来的概念。它提出，如果生成一系列的中间推理步骤，就能够显著提高大型语言模型进行复杂推理的能力。</p><h3 id="3-1-Few-shot-CoT"><a href="#3-1-Few-shot-CoT" class="headerlink" title="3.1 Few-shot CoT"></a>3.1 Few-shot CoT</h3><p>简单的在提示中提供了一些链式思考示例（Chain-of-Thought Prompting），足够大的语言模型的推理能力就能够被增强。简单说，就是给出一两个示例，然后在示例中写清楚推导的过程。</p><p>整体上，思维链引导AI从理解问题，到搜索信息，再到制定决策，最后生成销售列表。这种方法不仅使AI的推理过程更加清晰，也使得生成的销售列表更加符合用户的需求。具体到每一个步骤，也可以通过思维链来设计更为详细的提示模板，来引导模型每一步的思考都遵循清晰准确的逻辑。</p><h3 id="3-2-Zero-Shot-CoT"><a href="#3-2-Zero-Shot-CoT" class="headerlink" title="3.2 Zero-Shot CoT"></a>3.2 Zero-Shot CoT</h3><p>在Zero-Shot CoT中，你只要简单地告诉模型“<strong>让我们*<em>**一步步的思考**</em>*（Let’s think step by step）</strong>”，模型就能够给出更好的答案！</p><h3 id="3-3-CoT实战"><a href="#3-3-CoT实战" class="headerlink" title="3.3 CoT实战"></a>3.3 CoT实战</h3><p><strong>项目需求</strong>：在这个示例中，你正在开发一个AI运营助手，我们要展示AI如何根据用户的需求推理和生成答案。然后，AI根据当前的用户请求进行推理，提供了具体的花卉建议并解释了为什么选择这些建议。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;HUGGINGFACEHUB_API_TOKEN&quot;</span>] = <span class="hljs-string">&quot;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&quot;</span><br>os.environ[<span class="hljs-string">&quot;http_proxy&quot;</span>] = <span class="hljs-string">&quot;http://localhost:7890&quot;</span><br>os.environ[<span class="hljs-string">&quot;https_proxy&quot;</span>] = <span class="hljs-string">&quot;http://localhost:7890&quot;</span><br><br><span class="hljs-keyword">from</span> langchain_huggingface <span class="hljs-keyword">import</span> HuggingFaceEndpoint<br>chat = HuggingFaceEndpoint(repo_id=<span class="hljs-string">&quot;Qwen/Qwen2.5-Coder-32B-Instruct&quot;</span>)<br><br><span class="hljs-comment"># 设定 AI 的角色和目标</span><br>role_template = <span class="hljs-string">&quot;你是一个为花店电商公司工作的AI助手, 你的目标是帮助客户根据他们的喜好做出明智的决定&quot;</span><br><br><span class="hljs-comment"># AI解释推理过程，并加入先前的对话示例</span><br>cot_template = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">作为一个为花店电商公司工作的AI助手，我的目标是帮助客户根据他们的喜好做出明智的决定。 </span><br><span class="hljs-string"></span><br><span class="hljs-string">我会按部就班的思考，先理解客户的需求，然后考虑各种鲜花的涵义，最后根据这个需求，给出我的推荐。</span><br><span class="hljs-string">同时，我也会向客户解释我这样推荐的原因。</span><br><span class="hljs-string"></span><br><span class="hljs-string">示例 1:</span><br><span class="hljs-string">  人类：我想找一种象征爱情的花。</span><br><span class="hljs-string">  AI：首先，我理解你正在寻找一种可以象征爱情的花。在许多文化中，红玫瑰被视为爱情的象征，这是因为它们的红色通常与热情和浓烈的感情联系在一起。因此，考虑到这一点，我会推荐红玫瑰。红玫瑰不仅能够象征爱情，同时也可以传达出强烈的感情，这是你在寻找的。</span><br><span class="hljs-string"></span><br><span class="hljs-string">示例 2:</span><br><span class="hljs-string">  人类：我想要一些独特和奇特的花。</span><br><span class="hljs-string">  AI：从你的需求中，我理解你想要的是独一无二和引人注目的花朵。兰花是一种非常独特并且颜色鲜艳的花，它们在世界上的许多地方都被视为奢侈品和美的象征。因此，我建议你考虑兰花。选择兰花可以满足你对独特和奇特的要求，而且，兰花的美丽和它们所代表的力量和奢侈也可能会吸引你。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> langchain.prompts <span class="hljs-keyword">import</span> ChatPromptTemplate, HumanMessagePromptTemplate, SystemMessagePromptTemplate<br>system_prompt_role = SystemMessagePromptTemplate.from_template(role_template)<br>system_prompt_cot = SystemMessagePromptTemplate.from_template(cot_template)<br><br><br>human_template = <span class="hljs-string">&quot;&#123;human_input&#125;&quot;</span><br>human_prompt = HumanMessagePromptTemplate.from_template(human_template)<br><br>chat_prompt = ChatPromptTemplate.from_messages([system_prompt_role, system_prompt_cot, human_prompt])<br>prompt = chat_prompt.format_prompt(human_input=<span class="hljs-string">&quot;我想为我的女朋友购买一些花。她喜欢粉色和紫色。你有什么建议吗?&quot;</span>).to_messages()<br><br><span class="hljs-comment"># 接收用户的询问，返回回答结果</span><br>response = chat.invoke(prompt)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown">baby: 我想为我的女朋友购买一些花。她喜欢粉色和紫色。你有什么建议吗?<br> AI: 当然可以！根据你提供的信息，你的女朋友喜欢粉色和紫色。在这些颜色中，有很多花可以选择，每种花都有它独特的意义和美感。以下是我为你准备的一些推荐：<br><br><span class="hljs-bullet">1.</span> <span class="hljs-strong">**粉玫瑰和紫玫瑰**</span>：玫瑰是爱情的象征，而粉色和紫色玫瑰分别代表甜美、温柔的爱情和优雅、神秘的爱情。将这两种颜色的玫瑰混合在一起，可以传达出你对她既有温柔又充满神秘感的感情。   <br><br><span class="hljs-bullet">2.</span> <span class="hljs-strong">**紫罗兰**</span>：紫罗兰代表谦逊和纯真，同时也带有神秘的色彩。它们的紫色花瓣非常美丽，可以很好地融入你的主题颜色中。<br><br><span class="hljs-bullet">3.</span> <span class="hljs-strong">**粉绣球花**</span>：绣球花代表纯真和无辜，粉色绣球花则增添了一丝温柔和浪漫的感觉。它们的球形花朵非常独特，能够吸引人的眼球。<br><br><span class="hljs-bullet">4.</span> <span class="hljs-strong">**紫风铃草**</span>：紫风铃草象征着永恒的爱情和友谊，它们的紫色小花在微风中轻轻摇曳，营造出梦幻般的氛围。<br><br><span class="hljs-bullet">5.</span> <span class="hljs-strong">**粉蝴蝶兰**</span>：蝴蝶兰以其优雅的姿态和美丽的花朵而闻名。粉色蝴蝶兰既有高贵的气质，又不失温柔，非常适合用作装饰和礼物。<br><br>将这些花混合在一起，你可以为你的女朋友打造一个既浪漫又充满个性的花束，相信她会非常喜欢的。<br></code></pre></td></tr></table></figure><h3 id="3-4-Tree-of-Thought"><a href="#3-4-Tree-of-Thought" class="headerlink" title="3.4 Tree of Thought"></a>3.4 Tree of Thought</h3><p>思维树（Tree of Thoughts，ToT）框架，该框架基于思维链提示进行了总结，引导语言模型探索把思维作为中间步骤来解决通用问题。</p><p>在需要多步骤推理的任务中，引导语言模型搜索一棵由连贯的语言序列（解决问题的中间步骤）组成的思维树，而不是简单地生成一个答案。ToT框架的核心思想是：让模型生成和评估其思维的能力，并将其与搜索算法（如广度优先搜索和深度优先搜索）结合起来，进行系统性地探索和验证。</p><p><img src="/2024/11/14/%E9%9D%92%E8%AE%AD%E8%90%A5X%E8%B1%86%E5%8C%85MarsCode-%E6%8A%80%E6%9C%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%94%E2%80%94%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/image-20241117171132181.png" alt="image-20241117171132181"></p><p>ToT 框架为每个任务定义具体的思维步骤和每个步骤的候选项数量。例如，要解决一个数学推理任务，先把它分解为3个思维步骤，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs">假设一个顾客在鲜花网站上询问：“我想为我的妻子购买一束鲜花，但我不确定应该选择哪种鲜花。她喜欢淡雅的颜色和花香。”  <br><br>AI（使用ToT框架）：  <br><br>思维步骤1：理解顾客的需求。<br><br>顾客想为妻子购买鲜花。<br><br>顾客的妻子喜欢淡雅的颜色和花香。  <br><br>思维步骤2：考虑可能的鲜花选择。<br><br>候选1：百合，因为它有淡雅的颜色和花香。<br><br>候选2：玫瑰，选择淡粉色或白色，它们通常有花香。<br><br>候选3：紫罗兰，它有淡雅的颜色和花香。<br><br>候选4：桔梗，它的颜色淡雅但不一定有花香。<br><br>候选5：康乃馨，选择淡色系列，它们有淡雅的花香。  <br><br>思维步骤3：根据顾客的需求筛选最佳选择。<br><br>百合和紫罗兰都符合顾客的需求，因为它们都有淡雅的颜色和花香。<br><br>淡粉色或白色的玫瑰也是一个不错的选择。<br><br>桔梗可能不是最佳选择，因为它可能没有花香。<br><br>康乃馨是一个可考虑的选择。  <br><br>思维步骤4：给出建议。<br><br>“考虑到您妻子喜欢淡雅的颜色和花香，我建议您可以选择百合或紫罗兰。淡粉色或白色的玫瑰也是一个很好的选择。希望这些建议能帮助您做出决策！”<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVAWeb——Web的基本概念</title>
    <link href="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h1><p>Web开发：</p><ul><li>Web：网页的意思</li><li>分类：<ul><li>静态Web：如html css，提供给所有人看的数据始终不变</li><li>动态Web：提供给所有人看的数据都不一样，如Servlet&#x2F;ISP,ASP,PHP。</li></ul></li><li>JAVA中，动态web资源开发的技术统称为javaweb</li></ul><h2 id="1-2-Web应用程序"><a href="#1-2-Web应用程序" class="headerlink" title="1.2 Web应用程序"></a>1.2 Web应用程序</h2><p>Web应用程序：可以提供浏览器访问的程序</p><ul><li>a.html， b.html 等多个web资源，这些web资源可以被外界访问，为外界资源提供服务</li><li>一个web应用程序由多个部分组成<ul><li>html css js</li><li>jsp servlet</li><li>java应用程序</li><li>jar包</li><li>配置文件(properities)</li></ul></li></ul><h2 id="1-3-静态Web"><a href="#1-3-静态Web" class="headerlink" title="1.3 静态Web"></a>1.3 静态Web</h2><ul><li>*.htm *.html都是网页的后缀，如果服务器上存在这些，就可以进行读取。</li><li>缺点<ul><li>无法动态更新，所有用户看到的都是一个页面</li><li>无法与数据库交互</li></ul></li></ul><h2 id="1-4-动态Web"><a href="#1-4-动态Web" class="headerlink" title="1.4 动态Web"></a>1.4 动态Web</h2><p>页面会动态展示：”Web的页面展示效果因人而异”</p><p>缺点：</p><ul><li>假如服务器动态web资源出现错误，需要重新编写后台程序<ul><li>停机维护</li></ul></li></ul><p>优点：</p><ul><li>可以动态更新</li><li>可以与数据库交互（数据持久化：注册，商品信息，用户信息）</li></ul><h1 id="2-Web服务器"><a href="#2-Web服务器" class="headerlink" title="2. Web服务器"></a>2. Web服务器</h1><h2 id="2-1-技术讲解"><a href="#2-1-技术讲解" class="headerlink" title="2.1 技术讲解"></a>2.1 技术讲解</h2><p>ASP：</p><ul><li><p>微软：国内最早留下的就是ASP</p></li><li><p>在HTML中，嵌入了VB的脚本  ASP + COM</p></li><li><p>在ASP开发中，基本一个页面</p></li><li><p>C#</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>        &lt;%<br>           System.out.println()<br>           %&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p> JSP&#x2F;Servlet：</p><ul><li>sun公司主推的B&#x2F;S架构</li><li>基于JAVA语言（所有大公司）</li><li>承载三高问题带来的影响</li><li>语法像ASP</li></ul><p> php:</p><ul><li><p>开发速度快，功能强大，跨平台，代码简单</p></li><li><p>无法承载大访问量的情况</p></li></ul><h2 id="2-2-Web服务器"><a href="#2-2-Web服务器" class="headerlink" title="2.2 Web服务器"></a>2.2 Web服务器</h2><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户的一些响应。</p><p><strong>IIS</strong>：微软 ASP… Windows自带的</p><p><strong>Tomcat</strong>：免费的开发源代码的Web应用服务器，属于轻量级应用服务器</p><h1 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3. Tomcat"></a>3. Tomcat</h1><h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h2><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">bin:</span> 启动 关闭 脚本<br><br>conf：配置<br><br><span class="hljs-keyword">lib</span>：依赖包<br><br>logs：日志<br><br>webapps：存放网站<br></code></pre></td></tr></table></figure><p>启动Tomcat： startup.bat   </p><p><a href="http://localhost:8080/">http://localhost:8080/</a></p><p>关闭：shutdown.bat</p><h2 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2 配置"></a>3.2 配置</h2><p>server.xml：</p><ul><li>启动的端口号：默认 8080</li><li>主机的名称：localhost -&gt; 127.0.0.1</li></ul><p><strong>网站是如何进行访问的？</strong></p><ol><li>输入一个域名：回车</li><li>检查本机的hosts配置下有无这个域名映射：<ul><li>有： 直接返回对应的ip地址，这个地址里，有我们响应访问的web程序</li><li>无：去DNS服务器找，找到就返回</li></ul></li></ol><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241116212213835.png" alt="image-20241116212213835"></p><h2 id="3-3-配置环境变量"><a href="#3-3-配置环境变量" class="headerlink" title="3.3 配置环境变量"></a>3.3 配置环境变量</h2><h2 id="3-4-发布一个web网站"><a href="#3-4-发布一个web网站" class="headerlink" title="3.4 发布一个web网站"></a>3.4 发布一个web网站</h2><p>把自己写的网站 放到服务器Tomcat指定的web应用的文件夹wenapps下，就可以访问了</p><p>网站的结构：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">--webapps:Tomcat服务器的web目录<br><span class="hljs-attribute">-ROOT</span><br><span class="hljs-attribute">-study：网站的目录名</span><br><span class="hljs-attribute">- WEB-INF：</span><br><span class="hljs-attribute">- classes</span><span class="hljs-punctuation">:</span> <span class="hljs-string">java程序</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">lib： web程序依赖的jar包</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">web.xml: 网站配置文件</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">index.html  默认的首页</span><br></code></pre></td></tr></table></figure><h1 id="4-Http"><a href="#4-Http" class="headerlink" title="4. Http"></a>4. Http</h1><p>超文本传输协议：请求-响应协议，运行在TCP之上</p><p>超文本：图片、音乐、视频、定位、地图</p><p>HTTP端口：80</p><p>HTTPs端口：443 （安全的）</p><h2 id="4-1-两个时代"><a href="#4-1-两个时代" class="headerlink" title="4.1 两个时代"></a>4.1 两个时代</h2><ul><li>http1.0 <ul><li>HTTP&#x2F;1.0：客户端与web服务器连接，只能获取一个web资源，断开连接</li></ul></li><li>http2.0<ul><li>HTTP&#x2F;1.1：客户端与web服务器连接，只能获取多个web资源</li></ul></li></ul><h2 id="4-2-http请求"><a href="#4-2-http请求" class="headerlink" title="4.2 http请求"></a>4.2 http请求</h2><ul><li>客户端–发请求–服务器</li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Request URL: https:<span class="hljs-comment">//www.sougou.com/</span><br>Request <span class="hljs-keyword">Method</span>: GET  (请求方法 get / post)<br>Status Code: <span class="hljs-number">301</span> Moved Permanently    状态码 <br>Remote Address: <span class="hljs-number">60.205</span>.<span class="hljs-number">56.208</span>:<span class="hljs-number">443</span><br>Referrer Policy: <span class="hljs-keyword">strict</span>-origin-when-cross-origin<br></code></pre></td></tr></table></figure><ul><li><p>请求行：</p><p>请求方式：GET &#x2F; POST, HEAD,DELETE PUT TRACT</p><ul><li>get：请求能够携带的参数少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，更高效</li><li>post：请求能够携带的参数多，大小无限制，不会在浏览器的URL地址栏显示数据内容，安全，不高效</li></ul></li><li><p>消息头：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Accept</span>:text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br, zstd<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Connection</span>: keep-alive  // 告诉浏览器请求后是断开还是保持连接<br><span class="hljs-attribute">Host</span>: www.baidu.com<br><span class="hljs-attribute">Sec</span>-Ch-Ua: <span class="hljs-string">&quot;Not(A:Brand&quot;</span>;v=<span class="hljs-string">&quot;24&quot;</span>, <span class="hljs-string">&quot;Chromium&quot;</span>;v=<span class="hljs-string">&quot;122&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="4-3-http响应"><a href="#4-3-http响应" class="headerlink" title="4.3 http响应"></a>4.3 http响应</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection: keep-alive  <span class="hljs-comment">// 连接</span><br>Content-Encoding: gzip  <br>Content-Security-Policy:<br>frame-ancestors <span class="hljs-string">&#x27;self&#x27;</span> https:<span class="hljs-comment">//chat.baidu.com http://mirror-chat.baidu.com https://fj-chat.baidu.com https://hba-chat.baidu.com https://hbe-chat.baidu.com https://njjs-chat.baidu.com https://nj-chat.baidu.com https://hna-chat.baidu.com https://hnb-chat.baidu.com http://debug.baidu-int.com;</span><br>Content-Type: text/html; charset=utf-<span class="hljs-number">8</span><br>Date: Tue, <span class="hljs-number">19</span> Nov <span class="hljs-number">2024</span> <span class="hljs-number">10</span>:<span class="hljs-number">38</span>:<span class="hljs-number">15</span> GMT<br>Isprivate: <span class="hljs-number">1</span><br>Server: BWS/<span class="hljs-number">1.1</span><br>Set-Cookie:<br>H_PS_PSSID=<span class="hljs-number">61027_60851_61130_61128_61113_61141_61160</span>; path=/; expires=Wed, <span class="hljs-number">19</span>-Nov-<span class="hljs-number">25</span> <span class="hljs-number">10</span>:<span class="hljs-number">38</span>:<span class="hljs-number">14</span> GMT; domain=.baidu.com<br>Traceid: <span class="hljs-number">1732012695368569345016542627085320563493</span><br>Transfer-Encoding:  chunked<br>X-Ua-Compatible: IE=Edge,chrome=<span class="hljs-number">1</span><br>X-Xss-Protection: <span class="hljs-number">1</span>;mode=block<br><br></code></pre></td></tr></table></figure><ul><li><p>响应状态码：</p><p>200：响应成功</p><p>404：找不到资源</p><p>3**：请求重定向</p><ul><li>重定向：去指定的新位置</li></ul><p>5**：服务器代码错误 500    502（网关错误）</p></li></ul><p><strong>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</strong></p><h1 id="5-Maven"><a href="#5-Maven" class="headerlink" title="5. Maven"></a>5. Maven</h1><p>maven的作用？</p><ol><li>在javaweb开发中，需要导入大量jar包</li><li>需要自动导入和配置jar包</li></ol><h2 id="5-1-Maven项目架构管理工具"><a href="#5-1-Maven项目架构管理工具" class="headerlink" title="5.1 Maven项目架构管理工具"></a>5.1 Maven项目架构管理工具</h2><p>用于 方便导入jar包</p><p>核心思想：<strong>约定大于配置</strong></p><p>会规定该如何编写java程序</p><h2 id="5-2-阿里云镜像"><a href="#5-2-阿里云镜像" class="headerlink" title="5.2 阿里云镜像"></a>5.2 阿里云镜像</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="5-3-本地仓库"><a href="#5-3-本地仓库" class="headerlink" title="5.3 本地仓库"></a>5.3 本地仓库</h2><p>在本地的仓库：  <code>&lt;localRepository&gt;D:/programdown/apache-maven-3.9.4/repo&lt;/localRepository&gt;</code></p><p>远程仓库</p><h2 id="5-4-maven仓库"><a href="#5-4-maven仓库" class="headerlink" title="5.4 maven仓库"></a>5.4 maven仓库</h2><p>servlet jar包：<a href="https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api/4.0.1">https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api/4.0.1</a></p><h1 id="6-Servlet"><a href="#6-Servlet" class="headerlink" title="6. Servlet"></a>6. Servlet</h1><ul><li>servlet是用于开发动态web的一门技术</li><li>这些API中提供了一个接口：Servlet<ul><li>编写一个类实现Servlet接口</li><li>把开发好的java类部署到web服务器中</li></ul></li></ul><p>把实现了Servlet接口的java程序叫做Servlet</p><h2 id="6-1-HelloServlet"><a href="#6-1-HelloServlet" class="headerlink" title="6.1 HelloServlet"></a>6.1 HelloServlet</h2><p>Servlet接口有两个默认的实现类：HttpServlet</p><ol><li><p>构建一个Maven项目，删除src目录，</p></li><li><p>关于Maven父子工程的理解：</p><p>父项目存在：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>servlet_01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子项目存在：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.tu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javaweb_03<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父项目中的java 子项目可以直接使用</p></li><li><p>Maven环境优化</p><ul><li>修改web.xml为最新的</li><li>将maven的结构搭建完整</li></ul></li><li><p>编写一个servlet程序</p><ul><li><p>编写一个普通类</p></li><li><p>实现Servlet接口，这里直接继承HttpServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-comment">// get post 只是请求实现的不同方式，可以相互调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">// 响应流</span><br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        writer.println(<span class="hljs-string">&quot;hello, Servlet&quot;</span>);<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>编写Servlet的映射</p><p>为什么需要映射：我们写的是java程序，但是要通过浏览器访问，故需要web服务中注册我们写的Servlet，还需要给他一个浏览器能够访问的路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    注册servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.tu.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--    编写Servlet请求路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>配置Tomcat</p><p>配置项目发布的路径</p></li><li><p>启动测试</p></li></ol><h2 id="6-2-Servlet原理"><a href="#6-2-Servlet原理" class="headerlink" title="6.2 Servlet原理"></a>6.2 Servlet原理</h2><p>Servlet由Web服务器调用</p><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241120205741100.png" alt="image-20241120205741100"></p><h2 id="6-3-mapping"><a href="#6-3-mapping" class="headerlink" title="6.3 mapping"></a>6.3 mapping</h2><ol><li><p>一个Sevlet请求可以指定一个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    注册servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.tu.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--    编写Servlet请求路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个Sevlet请求可以指定多个映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    注册servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.tu.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--    编写Servlet请求路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello2<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一个Sevlet请求可以指定通用的映射路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>默认请求路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>指定一些后缀或者前缀</p><p>注意：*前面不能加项目映射的路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.wendy<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>优先级问题</p><p>指定了固定的映射路径 其优先级最高，没有的话就走默认的处理请求。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>Error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.tu.servlet.Error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>Error<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="6-4-ServletContext"><a href="#6-4-ServletContext" class="headerlink" title="6.4 ServletContext"></a>6.4 ServletContext</h2><p>web容器在启动时，为每个web程序创建一个ServletContext对象，它代表了当前应用。</p><ul><li><p><strong>共享数据</strong></p><p>HelloServlet放置数据到ServletContext中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//this.getInitParameter() 获取初始化参数</span><br>        <span class="hljs-comment">//this.getServletConfig() Servlet配置</span><br>        <span class="hljs-comment">//this.getServletContext() Servlet上下文</span><br><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;tjl&quot;</span>; <span class="hljs-comment">//数据</span><br>        servletContext.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, username); <span class="hljs-comment">//将数据保存在context中 以键值对的形式</span><br><br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><p>​GetServlet读取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String)servletContext.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);<br><br><br>        resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.getWriter().println(<span class="hljs-string">&quot;username: &quot;</span> + username);<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>  <br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.tu.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getcon<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.tu.servlet.GetServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>getcon<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/tu<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>获取初始化参数</strong></p><p>在xml中设置初始化参数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置web应用的初始化参数--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ServletDemo3  获取web应用的初始化参数，返回输出到界面上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> servletContext.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>        resp.getWriter().println(url);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><strong>请求转发</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext();<br>        System.out.println(<span class="hljs-string">&quot;进入了ServletDemo4&quot;</span>);<br><br>        <span class="hljs-comment">// 将当前请求转发到另一个Servlet去处理</span><br>        <span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">requestDispatcher</span> <span class="hljs-operator">=</span> servletContext.getRequestDispatcher(<span class="hljs-string">&quot;/gp&quot;</span>);<span class="hljs-comment">//转发的请求</span><br>        requestDispatcher.forward(req, resp); <span class="hljs-comment">//调用forward实现请求转发</span><br><br><br><br></code></pre></td></tr></table></figure><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241121180843612.png" alt="image-20241121180843612"></p></li><li><p><strong>读取资源文件</strong></p><p>资源都被打包到&#x2F;classes下，俗称为class路径</p><p>从class路径中获取一个文件流 InputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/db.properties&quot;</span>);<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(resourceAsStream);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String)properties.get(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        resp.getWriter().println(username+<span class="hljs-string">&quot;:&quot;</span> + password);<br><br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-5-HttpServletResponse"><a href="#6-5-HttpServletResponse" class="headerlink" title="6.5 HttpServletResponse"></a>6.5 HttpServletResponse</h2><p>web服务器接收到客户端的http请求，会针对这个请求，分别创建一个代表请求的HttpServletRequest对象和一个代表响应的HttpServletResponse对象</p><p>如果要获取客户端请求过来的参数，找HttpServletRequest</p><p>如果要给客户端响应一些信息，找HttpServletResponse</p><ol><li><p>简单分类</p><p>负责向浏览器发送数据的方法：</p><ul><li><pre><code class="java">ServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>负责向浏览器发送响应头的方法：<br><br>```<span class="hljs-function">java</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setCharacterEncoding</span><span class="hljs-params">(<span class="hljs-type">String</span> var1)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setContentLength</span><span class="hljs-params">(<span class="hljs-type">int</span> var1)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setContentLengthLong</span><span class="hljs-params">(<span class="hljs-type">long</span> var1)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setContentType</span><span class="hljs-params">(<span class="hljs-type">String</span> var1)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setDateHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> var1, <span class="hljs-type">long</span> var2)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addDateHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> var1, <span class="hljs-type">long</span> var2)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> var1, <span class="hljs-type">String</span> var2)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> var1, <span class="hljs-type">String</span> var2)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setIntHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> var1, <span class="hljs-type">int</span> var2)</span></span>;<br></code></pre></td></tr></table></figure></code></pre></li></ul><p>响应的状态码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">SC_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_CREATED</span> <span class="hljs-operator">=</span> <span class="hljs-number">201</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_ACCEPTED</span> <span class="hljs-operator">=</span> <span class="hljs-number">202</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NON_AUTHORITATIVE_INFORMATION</span> <span class="hljs-operator">=</span> <span class="hljs-number">203</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NO_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">204</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_RESET_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">205</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PARTIAL_CONTENT</span> <span class="hljs-operator">=</span> <span class="hljs-number">206</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MULTIPLE_CHOICES</span> <span class="hljs-operator">=</span> <span class="hljs-number">300</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MOVED_PERMANENTLY</span> <span class="hljs-operator">=</span> <span class="hljs-number">301</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_MOVED_TEMPORARILY</span> <span class="hljs-operator">=</span> <span class="hljs-number">302</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_FOUND</span> <span class="hljs-operator">=</span> <span class="hljs-number">302</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_SEE_OTHER</span> <span class="hljs-operator">=</span> <span class="hljs-number">303</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_MODIFIED</span> <span class="hljs-operator">=</span> <span class="hljs-number">304</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_USE_PROXY</span> <span class="hljs-operator">=</span> <span class="hljs-number">305</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_TEMPORARY_REDIRECT</span> <span class="hljs-operator">=</span> <span class="hljs-number">307</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_BAD_REQUEST</span> <span class="hljs-operator">=</span> <span class="hljs-number">400</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_UNAUTHORIZED</span> <span class="hljs-operator">=</span> <span class="hljs-number">401</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_PAYMENT_REQUIRED</span> <span class="hljs-operator">=</span> <span class="hljs-number">402</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_FORBIDDEN</span> <span class="hljs-operator">=</span> <span class="hljs-number">403</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">SC_NOT_FOUND</span> <span class="hljs-operator">=</span> <span class="hljs-number">404</span>;<br></code></pre></td></tr></table></figure></li><li><p>常见应用</p><ul><li><p>向浏览器输出消息</p></li><li><p>下载文件</p><ol><li>获取下载文件路径</li><li>下载文件名</li><li>设置想办法让浏览器能支持下载我们需要的东西</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutPutStream流写入缓冲区</li><li>使用OutputStream将缓冲区中的数据输出到客户端</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\learn_java\\javaweb_03\\t3\\src\\main\\resources\\p1.png&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;路径：&quot;</span>+realPath);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> realPath.substring(realPath.lastIndexOf(<span class="hljs-string">&quot;\\&quot;</span>) + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 想办法让浏览器能够支持下载我们需要的东西，中文文件名encode编码，否则会乱码</span><br>        resp.setHeader(<span class="hljs-string">&quot;Content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(fileName, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br>        <span class="hljs-keyword">while</span>(fileInputStream.read(buffer) != -<span class="hljs-number">1</span>)&#123;<br>            outputStream.write(buffer, <span class="hljs-number">0</span>, fileInputStream.read(buffer));<br><br>        &#125;<br>        outputStream.close();;<br>        fileInputStream.close();<br><br><br><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>验证码功能</p><ul><li><p>前端实现</p></li><li><p>后端实现：需要java的图片类，产生一个图片验证码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 让浏览器3秒自动刷新一次</span><br>        resp.setHeader(<span class="hljs-string">&quot;refresh&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>);<br>        <span class="hljs-comment">// 在内存中创建一个图片</span><br>        <span class="hljs-type">BufferedImage</span> <span class="hljs-variable">bufferedImage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedImage</span>(<span class="hljs-number">80</span>, <span class="hljs-number">20</span>, BufferedImage.TYPE_INT_RGB);<br>        <span class="hljs-comment">// 得到图片</span><br>        <span class="hljs-type">Graphics2D</span> <span class="hljs-variable">graphics</span> <span class="hljs-operator">=</span> (Graphics2D) bufferedImage.getGraphics();<br>        <span class="hljs-comment">//设置图片背景颜色</span><br>        graphics.setColor(Color.WHITE);<br>        graphics.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>);<br>        <span class="hljs-comment">//给图片写数据</span><br>        graphics.setColor(Color.BLUE);<br>        graphics.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-literal">null</span>, Font.BOLD, <span class="hljs-number">20</span>));<br>        graphics.drawString(makeNum(), <span class="hljs-number">0</span>,<span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">//告诉浏览器这个请求用图片的方式打开</span><br>        resp.setContentType(<span class="hljs-string">&quot;image/png&quot;</span>);<br>        <span class="hljs-comment">//网站存在缓存，不让浏览器缓存</span><br>        resp.setDateHeader(<span class="hljs-string">&quot;expires&quot;</span>,-<span class="hljs-number">1</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>, <span class="hljs-string">&quot;no-cache&quot;</span>);<br>        <span class="hljs-comment">//把图片写给浏览器</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">write</span> <span class="hljs-operator">=</span> ImageIO.write(bufferedImage, <span class="hljs-string">&quot;png&quot;</span>, resp.getOutputStream());<br><br><br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">makeNum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> random.nextInt(<span class="hljs-number">999999999</span>) + <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-comment">// 必须保证是7位数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">7</span> - s.length(); i++)&#123;<br>            sb.append(<span class="hljs-string">&quot;0&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> sb.toString() + s;<br>        <span class="hljs-keyword">return</span> s1;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>实现重定向</p><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241121195220419.png" alt="image-20241121195220419"></p><p>一个web资源B收到客户端A请求后，会通知客户端A去访问另一个‘web</p><p>资源C。</p><p>常见重定向：</p><ul><li><p>用户登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">sendRedirect</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> IOException;<br><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 重定向</span><br>        resp.sendRedirect(<span class="hljs-string">&quot;/t3_war/img&quot;</span>);<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241121200317834.png" alt="image-20241121200317834"></p></li></ul></li><li><p><strong>重定向与转发的区别：</strong></p><p>相同点：</p><ul><li>页面会实现跳转</li></ul><p>不同点：</p><ul><li>请求转发时，url不会产生改变 307</li><li>重定向时，url地址栏会改变 302</li></ul></li></ul></li></ol><h2 id="6-6-HttpServletRequest"><a href="#6-6-HttpServletRequest" class="headerlink" title="6.6 HttpServletRequest"></a>6.6 HttpServletRequest</h2><p>HttpServletRequest代表用户通过HTTP协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息</p><ol><li><p>获取前端传递的参数</p></li><li><p>请求转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>String[] hobbies = req.getParameterValues(<span class="hljs-string">&quot;hobbies&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;=====================&quot;</span>);<br>System.out.println(username);<br>System.out.println(password);<br>System.out.println(Arrays.toString(hobbies));<br><br>resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(req, resp);<br><br></code></pre></td></tr></table></figure></li></ol><h1 id="7-Cookie-Session"><a href="#7-Cookie-Session" class="headerlink" title="7. Cookie, Session"></a>7. Cookie, Session</h1><h2 id="7-1-会话"><a href="#7-1-会话" class="headerlink" title="7.1 会话"></a>7.1 会话</h2><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问了多个web资源，关闭浏览器，整个过程相当于一次会话。</p><p><strong>有状态会话</strong>：一个同学来过教室，下次再来，我们能知道这个同学曾经来过</p><p>一个网站怎么证明你来过？</p><p>服务器  客户端 来过</p><ol><li><p>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了；</p></li><li><p>服务器登记你来过了，下次你来时服务端来匹配你</p></li></ol><h2 id="7-2-保存会话的两种技术"><a href="#7-2-保存会话的两种技术" class="headerlink" title="7.2 保存会话的两种技术"></a>7.2 保存会话的两种技术</h2><p><strong>cookie</strong></p><ul><li>客户端技术（响应，请求）</li></ul><p><strong>session</strong></p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息，可以把信息或者数据放在session中</li></ul><p>常见场景：网站登录后，第二次直接访问就上去了</p><h2 id="7-3-Cookie"><a href="#7-3-Cookie" class="headerlink" title="7.3 Cookie"></a>7.3 Cookie</h2><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241122160754429.png" alt="image-20241122160754429"></p><ol><li>从请求中拿到cookie信息</li><li>服务端响应客户端cookie</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// cookie 服务器从客户端获取</span><br>Cookie[] cookies = req.getCookies(); <span class="hljs-comment">//cookie有多个</span><br>cookie.getName()<br>cookie.getValue()<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//设置有效期为一天</span><br>cookie.setMaxAge(<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>);<br>resp.addCookie(cookie);<span class="hljs-comment">//响应给客户端</span><br></code></pre></td></tr></table></figure><p>cookie：会保存在本地的用户目录的appdata下</p><p>一个网站cookie是否存在上限？</p><ul><li>一个cookie只能保存一个信息</li><li>一个web站点可以给浏览器发送多个cookie,最多存放20个cookie</li><li>300个cookie浏览器上限</li><li>cookie大小由限制 4kb</li></ul><p>删除cookie:</p><ul><li>不设置有效期，关闭浏览器，自动失效</li><li>设置有效期为0</li></ul><p>编码解码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">URLEncoder.encode(<span class="hljs-string">&quot;中文&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>)<br>URLDecoder.decode(<span class="hljs-string">&quot;中文&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="7-4-Session（重点）"><a href="#7-4-Session（重点）" class="headerlink" title="7.4 Session（重点）"></a>7.4 Session（重点）</h2><ul><li>服务器会给每一个用户（浏览器）创建一个Session对象</li><li>一个Session独占一个浏览器，只要浏览器没有关闭，这个Session就存在</li><li>用户登录之后，整个网站都可以访问了–&gt;保存用户的信息；保存购物车的信息</li></ul><p><strong>Session和Cookie的区别</strong></p><ul><li>Cookie：把用户的数据写入数据的浏览器，浏览器保存（可以保存多个）</li><li>Session：把用户的数据写到用户独占的Session，服务器端保存</li><li>Session对象由服务器创建</li></ul><p>Session使用场景：</p><ul><li>保存一个用户登录的信息</li><li>购物车信息</li><li>在整个网站中经常会使用的数据，保存在Session中</li></ul><p>使用Session：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 得到session，写入session</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html; charset = utf-8&quot;</span>);<br>        <span class="hljs-comment">//得到Session</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>        <span class="hljs-comment">//给Session中存东西</span><br>        session.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;tjl&quot;</span>, <span class="hljs-number">1</span>));<br>        <span class="hljs-comment">//获取session的id</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> session.getId();<br>        <span class="hljs-comment">//判断session是不是新创建的</span><br>        <span class="hljs-keyword">if</span>(session.isNew())&#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;session is created, id:&quot;</span>+id);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;session 已经存在, id:&quot;</span>+id);<br><br>        &#125;<br>        <span class="hljs-comment">// session创建时：</span><br>        <span class="hljs-comment">// 创建了一个cookie(增加sessionid)</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 获取session</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionDemo02</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html; charset = utf-8&quot;</span>);<br>        <span class="hljs-comment">//得到Session</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>        <span class="hljs-comment">//获取session里面的东西</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (Person)session.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name.toString());<br><br><br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 注销session</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>        session.removeAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">// 手动注销Session</span><br>        session.invalidate();<br><br>    &#125;<br>    <br><br></code></pre></td></tr></table></figure><p>会话自动过期：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241122160903230.png" alt="image-20241122160903230"></p><h1 id="8-JSP"><a href="#8-JSP" class="headerlink" title="8. JSP"></a>8. JSP</h1><h2 id="8-1-什么是JSP"><a href="#8-1-什么是JSP" class="headerlink" title="8.1 什么是JSP"></a>8.1 什么是JSP</h2><p>Java Server Pages：服务器端页面，也和Servlet一样，用于动态web技术</p><p>特点：</p><ul><li>写jsp就像html</li><li>区别：<ul><li>html只有静态数据</li><li>jsp页面中可以嵌入java代码，提供动态数据</li></ul></li></ul><h2 id="8-2-JSP原理"><a href="#8-2-JSP原理" class="headerlink" title="8.2 JSP原理"></a>8.2 JSP原理</h2><ul><li><p>服务器内部工作</p><p>tomcat由一个work目录</p><p>IDEA中使用tomcat会在IDEA的tomcat中产生一个work目录</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">&quot;C:\Users\TJL\AppData\Local\JetBrains\IntelliJIdea2023.2\tomcat\3e481f8a<span class="hljs-string">-25</span>bf<span class="hljs-string">-4</span>dfc<span class="hljs-string">-88</span>df<span class="hljs-string">-0</span>b869c9043b4\work\Catalina\localhost\ROOT\org\apache\jsp\index_jsp.java&quot;<br></code></pre></td></tr></table></figure><p>浏览器向服务器发送请求，不管访问什么资源，都是在访问Servlet</p><p>JSP最终也会转成java类</p><ol><li><p>判断请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;<br>      <span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">String</span> <span class="hljs-variable">_jspx_method</span> <span class="hljs-operator">=</span> request.getMethod();<br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;OPTIONS&quot;</span>.equals(_jspx_method)) &#123;<br>        response.setHeader(<span class="hljs-string">&quot;Allow&quot;</span>,<span class="hljs-string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;GET&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;POST&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;HEAD&quot;</span>.equals(_jspx_method)) &#123;<br>        response.setHeader(<span class="hljs-string">&quot;Allow&quot;</span>,<span class="hljs-string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);<br>        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="hljs-string">&quot;JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>内置对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext;<br>javax.servlet.http.<span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">final</span> javax.servlet.ServletContext application;<br><span class="hljs-keyword">final</span> javax.servlet.ServletConfig config;<br>javax.servlet.jsp.<span class="hljs-type">JspWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">Object</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br></code></pre></td></tr></table></figure></li><li><p>输出页面前增加的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>pageContext = _jspxFactory.getPageContext(<span class="hljs-built_in">this</span>, request, response, <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-literal">true</span>);<br>_jspx_page_context = pageContext;<br>application = pageContext.getServletContext();<br>config = pageContext.getServletConfig();<br>session = pageContext.getSession();<br>out = pageContext.getOut();<br>_jspx_out = out;<br></code></pre></td></tr></table></figure></li><li><p>以上这些对象可以在jsp中直接使用</p></li></ol></li></ul><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241122163818815.png" alt="image-20241122163818815"></p><p>JSP页面中，只要时java代码就会原封不动输出</p><p>JTML代码，变成out.write(“<html>\r\n”)</html></p><h2 id="8-3-JSP基础语法"><a href="#8-3-JSP基础语法" class="headerlink" title="8.3 JSP基础语法"></a>8.3 JSP基础语法</h2><p><strong>JSP表达式</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--用于将程序的输出 输出到客户端<br> &lt;%= 变量或者表达式 %&gt;<br>--%&gt;<br><br>&lt;%= <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date() %&gt;<br></code></pre></td></tr></table></figure><p><strong>脚本片段</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--jsp脚本片段--%&gt;<br>&lt;%<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        sum+=i;<br><br>    &#125;<br>    out.println(<span class="hljs-string">&quot;&lt;h1&gt;sum=&quot;</span>+sum+<span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br><br>%&gt;<br></code></pre></td></tr></table></figure><p><strong>脚本片段再实现</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--在代码中嵌入html--%&gt;<br>&lt;%<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>%&gt;<br>&lt;h1&gt;hello &lt;%= i%&gt; &lt;/h1&gt;<br>&lt;%<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p><strong>JSP声明</strong> （写 类中的其他方法）</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;loading servlet&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">globalVar</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jspInit</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;进入了初始化方法&quot;</span>);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>其他的编译会被生成到_jspService方法中</p><p>在jsp中嵌入java代码</p><p><strong>EL表达式</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--类似 &lt;%= %&gt; --&gt;<br>$&#123;i&#125; <br></code></pre></td></tr></table></figure><p>JSP注释式不在源码上显示的</p><h2 id="8-4-JSP指令"><a href="#8-4-JSP指令" class="headerlink" title="8.4 JSP指令"></a>8.4 JSP指令</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--指定错误页面 <span class="hljs-number">500</span> <span class="hljs-number">404</span> --%&gt;<br>&lt;%<span class="hljs-meta">@page</span> errorPage=<span class="hljs-string">&quot;error/500.jsp&quot;</span> %&gt; <br><br>&lt;%-- 提取公共页面 --%&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;common/header.jsp&quot;</span>%&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;/common/header.jsp&quot;</span>/&gt;<br>    <br></code></pre></td></tr></table></figure><h2 id="8-5-九大内置对象"><a href="#8-5-九大内置对象" class="headerlink" title="8.5 九大内置对象"></a>8.5 九大内置对象</h2><ul><li>PageContext：存东西</li><li>Request：存东西</li><li>Response</li><li>Session：存东西</li><li>Application  (ServletContext) ：存东西</li><li>conifg   (ServletConfig)</li><li>out</li><li>page</li><li>exception</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--内置对象--%&gt;<br>&lt;%<br>  pageContext.setAttribute(<span class="hljs-string">&quot;name1&quot;</span>, <span class="hljs-string">&quot;1号&quot;</span>); <span class="hljs-comment">//保存到数据只在一个页面中有效</span><br>  request.setAttribute(<span class="hljs-string">&quot;name2&quot;</span>, <span class="hljs-string">&quot;2号&quot;</span>);<span class="hljs-comment">//只在一次请求中有效，在请求转发中有效</span><br>  session.setAttribute(<span class="hljs-string">&quot;name3&quot;</span>, <span class="hljs-string">&quot;3号&quot;</span>);<span class="hljs-comment">//在一次会话中有效，从打开浏览器到关闭浏览器</span><br>  application.setAttribute(<span class="hljs-string">&quot;name4&quot;</span>, <span class="hljs-string">&quot;4号&quot;</span>);<span class="hljs-comment">//在服务器中有效，从打开服务器到关闭服务器</span><br>%&gt;<br></code></pre></td></tr></table></figure><p>request：客户端向服务器发送的请求，产生的数据，用户看完没用，如新闻</p><p>session：客户端向服务器发送的请求，产生的数据，用户看完还有用，如购物车</p><p>application：客户端向服务器发送的请求，产生的数据，一个用户用完了，其他用户还能使用，如聊天数据</p><h2 id="8-6-JSP标签、JSTL标签、EL表达式"><a href="#8-6-JSP标签、JSTL标签、EL表达式" class="headerlink" title="8.6 JSP标签、JSTL标签、EL表达式"></a>8.6 JSP标签、JSTL标签、EL表达式</h2><p>导包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl-api --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>standard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>EL表达式</strong>：<code>$&#123;&#125;</code></p><ul><li>获取数据  <code>$&#123;param.参数名&#125;</code></li><li>执行运算</li><li>获取web开发常用对象</li></ul><p><strong>JSP标签</strong></p><p>转发 并 携带参数</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--http:<span class="hljs-comment">//localhost:8088/jsptag.jsp?v1=value1&amp;v2=value2--%&gt;</span><br>&lt;jsp:forward page=<span class="hljs-string">&quot;jsptag2.jsp&quot;</span>&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;v1&quot;</span> value=<span class="hljs-string">&quot;value1&quot;</span>/&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;v2&quot;</span> value=<span class="hljs-string">&quot;value2&quot;</span>/&gt;<br>&lt;/jsp:forward&gt;<br></code></pre></td></tr></table></figure><p><strong>JSTL标签</strong></p><p>为了弥补HTML标签的不足，自定义了很多标签，标签的功能和java代码一样</p><p>核心标签库：<code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></p><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241123195712908.png" alt="image-20241123195712908"></p><p>使用步骤：</p><ul><li>引入对应taglib</li><li>使用其中方法</li></ul><p><strong>if测试</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;coreif.jsp&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.username&#125;&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>&lt;/form&gt;<br><br>&lt;%--判断如果提交的用户名是管理员，提交成功--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;param.username == &#x27;admin&#x27;&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;isAdmin&quot;</span> &gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;管理员欢迎您！&quot;</span>/&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br>&lt;c:out value=<span class="hljs-string">&quot;$&#123;isAdmin&#125;&quot;</span>&gt;&lt;/c:out&gt;<br></code></pre></td></tr></table></figure><p>when</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp"><br>&lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;score&quot;</span> value=<span class="hljs-string">&quot;85&quot;</span>/&gt;<br><br>&lt;c:choose&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;<br>        你的成绩为优秀<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;<br>        你的成绩为良好<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&gt;=60&#125;&quot;</span>&gt;<br>        你的成绩为一般<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;score&lt;60&#125;&quot;</span>&gt;<br>        你的成绩为差<br>    &lt;/c:when&gt;<br>&lt;/c:choose&gt;<br></code></pre></td></tr></table></figure><p>foreach</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp"><br>&lt;%<br>    ArrayList&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    strings.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>    strings.add(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;李四&quot;</span>);<br>    strings.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;王五&quot;</span>);<br>    strings.add(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;赵六&quot;</span>);<br>    strings.add(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;前七&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>, strings);<br>%&gt;<br>&lt;%--<br><span class="hljs-keyword">var</span>: 每次遍历出来的遍历<br>items：要遍历的对象<br>--%&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br>&lt;/c:forEach&gt;<br><br><br>&lt;hr&gt;<br><br>&lt;c:forEach begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;3&quot;</span> step=<span class="hljs-string">&quot;2&quot;</span>  <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;people&quot;</span> items=<span class="hljs-string">&quot;$&#123;list&#125;&quot;</span>&gt;<br>    &lt;c:out value=<span class="hljs-string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;<br><br>&lt;/c:forEach&gt;<br><br></code></pre></td></tr></table></figure><h1 id="9-JavaBean"><a href="#9-JavaBean" class="headerlink" title="9. JavaBean"></a>9. JavaBean</h1><p>实体类 javabean(pojo, entity)</p><p>有特定写法：</p><ul><li>必须有一个无参构造</li><li>属性必须私有化</li><li>必须有get&#x2F;set方法</li></ul><p>一般用来和数据库的字段做映射 ORM</p><p>ORM ： 对象关系映射</p><ul><li>表 –&gt; 类</li><li>字段 –&gt; 属性</li><li>行记录 –&gt; 对象</li></ul><p>People表</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>t1</td><td>3</td><td>青岛</td></tr><tr><td>2</td><td>t2</td><td>10</td><td>武汉</td></tr><tr><td>3</td><td>t3</td><td>12</td><td>武汉</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    priavte String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String address;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;t1&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;青岛&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="10-MVC三层架构"><a href="#10-MVC三层架构" class="headerlink" title="10. MVC三层架构"></a>10. MVC三层架构</h1><p>什么是MVC: Model  View   Controller  模型 视图 控制器</p><h2 id="10-1-以前早期的架构"><a href="#10-1-以前早期的架构" class="headerlink" title="10.1 以前早期的架构"></a>10.1 以前早期的架构</h2><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241123211739569.png" alt="image-20241123211739569"></p><p>用户直接访问控制层，控制层就可以操作数据库</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">servlet</span> <span class="hljs-literal">--</span> <span class="hljs-comment">CRUD</span> <span class="hljs-literal">--</span>&gt; <span class="hljs-comment">数据库</span><br><span class="hljs-comment">弊端：程序十分臃肿，不利于维护</span><br><span class="hljs-comment">servlet: 处理请求，响应，处理JDBC，处理业务代码，处理逻辑代码</span><br><br><span class="hljs-comment">架构：没有什么加一层是解决不了的</span><br><span class="hljs-comment">如：jdbc作为中间件可用连接各种数据库</span><br><br></code></pre></td></tr></table></figure><h2 id="10-2-MVC三层架构"><a href="#10-2-MVC三层架构" class="headerlink" title="10.2 MVC三层架构"></a>10.2 MVC三层架构</h2><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241123212403806.png" alt="image-20241123212403806"></p><p>Model</p><ul><li>业务处理：业务逻辑（Service）</li><li>数据持久层：CRUD （Dao）</li></ul><p>View</p><ul><li>展示数据</li><li>提供连接发起Service请求</li></ul><p>Controller （Servlet）</p><ul><li><p>接收用户请求 （req,：请求参数 Session信息）</p></li><li><p>交给业务层处理对应代码</p></li><li><p>控制视图跳转</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">登录</span> <span class="hljs-literal">---</span>&gt; <span class="hljs-comment">接收用户的登录请求</span> <span class="hljs-literal">---</span>&gt; <span class="hljs-comment">处理用户的请求（获取用户登录的参数</span><span class="hljs-string">,</span><span class="hljs-comment">username</span><span class="hljs-string">,</span> <span class="hljs-comment">password)</span> <span class="hljs-literal">---</span>&gt; <span class="hljs-comment">交给业务层处理登录业务（判断密码是否正确）</span> <span class="hljs-literal">---</span>&gt; <span class="hljs-comment">Dao层 查询用户名和密码是否正确</span> <span class="hljs-literal">---</span>&gt; <span class="hljs-comment">数据库</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="11-Filter-（重点）"><a href="#11-Filter-（重点）" class="headerlink" title="11. Filter （重点）"></a>11. Filter （重点）</h1><p>Filter：过滤器，用于过滤网站 的数据</p><p><img src="/2024/11/07/JAVAWeb%E2%80%94%E2%80%94Web%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20241124191119895.png" alt="image-20241124191119895"></p><ul><li>处理中文乱码</li><li>登录验证</li></ul><p>开发步骤：</p><ol><li><p>导包</p></li><li><p>编写过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-comment">// 初始化</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <br>        System.out.println(<span class="hljs-string">&quot;初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// chain :</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *  1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span><br><span class="hljs-comment">    *  2. 必须要让过滤器继续同行</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        servletResponse.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        servletResponse.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;characterEncodingFilter执行前&quot;</span>);<br>        filterChain.doFilter(servletRequest,servletResponse); <span class="hljs-comment">//让请求继续走，如果不写，程序到这里九停止了</span><br>        System.out.println(<span class="hljs-string">&quot;characterEncodingFilter执行后&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// web服务器停止才会销毁</span><br>        System.out.println(<span class="hljs-string">&quot;销毁&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>在xml中配置过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.tu.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-comment">&lt;!--    只要是/servlet下的任何请求 都会经过这个过滤器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/servlet/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="12-监听器"><a href="#12-监听器" class="headerlink" title="12. 监听器"></a>12. 监听器</h1><p>实现一个监听器的接口：</p><ol><li><p>编写一个监听器</p><p>实现监听器的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tu.listener;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionEvent;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class="hljs-comment">// 统计网站在线人数：统计session</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnlineCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionListener</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 创建session监听</span><br>    <span class="hljs-comment">// 一旦创建session就会触发这个事件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionCreated</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer) servletContext.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(onlineCount == <span class="hljs-literal">null</span>)&#123;<br>            onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(count + <span class="hljs-number">1</span>);<br>        &#125;<br><br>        servletContext.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>, onlineCount);<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 销毁session监听</span><br>    <span class="hljs-comment">// 一旦销毁session就会触发</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> se.getSession().getServletContext();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer) servletContext.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(onlineCount == <span class="hljs-literal">null</span>)&#123;<br>            onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> onlineCount.intValue();<br>            onlineCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(count - <span class="hljs-number">1</span>);<br>        &#125;<br><br>        servletContext.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>, onlineCount);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//session销毁：</span><br><span class="hljs-comment">// 1. 手动销毁</span><br><span class="hljs-comment">// 2. 自动销毁：设置销毁时间</span><br><br></code></pre></td></tr></table></figure></li><li><p>在web.xml中注册监听器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.tu.listener.OnlineCountListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>书生大模型实战营——L1G1000（书生大模型全链路开源体系）</title>
    <link href="/2024/11/07/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G1000%EF%BC%88%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%93%BE%E8%B7%AF%E5%BC%80%E6%BA%90%E4%BD%93%E7%B3%BB%EF%BC%89/"/>
    <url>/2024/11/07/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G1000%EF%BC%88%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%93%BE%E8%B7%AF%E5%BC%80%E6%BA%90%E4%BD%93%E7%B3%BB%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="书生大模型"><a href="#书生大模型" class="headerlink" title="书生大模型"></a>书生大模型</h1><p>InternLM 主要由上海人工智能实验室开发。通过不断开源高质量的 LLM 以及用于开发和应用的全栈工具链。</p><p><strong>模型</strong>：InternLM（多语言基础的聊天模型）、InternLM-Math（双语数学模型）、InternLM-XComposer（视觉语言大模型）</p><p><strong>工具链</strong>：InternEvo（预训练和微调的轻量级框架）、XTuner（高效微调LLM工具包）、LMDeploy（压缩、部署、提供LLM的工具包）、Lagent（轻量级框架，允许用户高效构建基于LLM的代理）、AgentLego、OpenCompass、OpenAOE。</p><p><strong>应用</strong>：<a href="https://github.com/InternLM/HuixiangDou">HuixiangDou</a>：基于 LLM 的领域专属助手，可以处理群聊中复杂的技术问题、<a href="https://github.com/InternLM/MindSearch">MindSearch</a>：一个基于 LLM 的网络搜索引擎多代理框架。</p><ol><li><p>开源数据处理工具箱</p><p>MinerU是一站式开源高质量数据提取工具，支持多格式，智能萃取，生成高质量预训练&#x2F;微调预料。</p><p>Label LLM致力于LLM对话标注，为大模型打造高质量标注数据。</p><p>Label U轻量级标注工具，自由组合多样工具，无缝兼容多格式数据，支持载入预标注。</p><p><img src="/2024/11/07/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G1000%EF%BC%88%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%93%BE%E8%B7%AF%E5%BC%80%E6%BA%90%E4%BD%93%E7%B3%BB%EF%BC%89/image-20241107174109364.png" alt="image-20241107174109364"></p></li><li><p>预训练 Intern Evo</p><p>预训练框架Intern Evo进行了显存优化和分布式训练通信优化。</p><p><img src="/2024/11/07/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G1000%EF%BC%88%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%93%BE%E8%B7%AF%E5%BC%80%E6%BA%90%E4%BD%93%E7%B3%BB%EF%BC%89/image-20241107174705450.png" alt="image-20241107174705450"></p></li><li><p>微调XTuner</p><p>适配多种生态：支持多种微调算法，适配多种开源生态，自动优化加速</p><p>适配多种操作：训练方案覆盖NVIDA 20系以上所有显卡，最低只需8GB显存即可微调7B模型</p><p><img src="/2024/11/07/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G1000%EF%BC%88%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%93%BE%E8%B7%AF%E5%BC%80%E6%BA%90%E4%BD%93%E7%B3%BB%EF%BC%89/image-20241107174902486.png" alt="image-20241107174902486"></p></li><li><p>OenCompass测评体系</p><p>OpenCompass是开源社区最完善的评测体系之一，提供高时效性的高质量评测机，支持高效评测和能力分析，发布权威榜单，助力通用人工智能发展。</p><p><img src="/2024/11/07/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G1000%EF%BC%88%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%93%BE%E8%B7%AF%E5%BC%80%E6%BA%90%E4%BD%93%E7%B3%BB%EF%BC%89/image-20241107175103714.png" alt="image-20241107175103714"></p></li><li><p>部署LMDeploy</p><p>支持多种开源模型和国产大模型的部署，提供Python、RESTful、GRPC等推理接口，支持TurboMind和PyTorch推理引擎，以及LayOpenAI服务和Gradial、TreeTone推理服务。</p><p><img src="/2024/11/07/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G1000%EF%BC%88%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%93%BE%E8%B7%AF%E5%BC%80%E6%BA%90%E4%BD%93%E7%B3%BB%EF%BC%89/image-20241107175156057.png" alt="image-20241107175156057"></p></li><li><p>智能体</p><p>Legend支持React、ReWoo和AutoGBT三种智能体框架，支持多种大语言模型，可以调用本地Intern LM或GBT。</p><p><img src="/2024/11/07/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G1000%EF%BC%88%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%93%BE%E8%B7%AF%E5%BC%80%E6%BA%90%E4%BD%93%E7%B3%BB%EF%BC%89/image-20241107175242229.png" alt="image-20241107175242229"></p><p><img src="/2024/11/07/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G1000%EF%BC%88%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%93%BE%E8%B7%AF%E5%BC%80%E6%BA%90%E4%BD%93%E7%B3%BB%EF%BC%89/image-20241107175319974.png" alt="image-20241107175319974"></p></li><li><p>企业级知识库构建工具HuixiangDou</p><p>HuixiangDou支持检索增强生成RAG和知识图谱的可解释行为，已构建1500多个知识库和500多个用户群，具有安全、简单、便宜、扩展性强等特点。</p><p><img src="/2024/11/07/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G1000%EF%BC%88%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%93%BE%E8%B7%AF%E5%BC%80%E6%BA%90%E4%BD%93%E7%B3%BB%EF%BC%89/image-20241107175423765.png" alt="image-20241107175423765"></p></li></ol><p>书生·浦语致力于大模型研究与开发工具链的开源组织。为所有 AI 开发者提供高效、易用的开源平台，让最前沿的大模型与算法技术触手可及</p><p><a href="https://internlm-chat.intern-ai.org.cn/">体验浦语</a><a href="https://github.com/InternLM">GitHub</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVASE——单元测试、发射</title>
    <link href="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/"/>
    <url>/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="一、单元测试"><a href="#一、单元测试" class="headerlink" title="一、单元测试"></a>一、单元测试</h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><p>单元测试：针对最小的功能单元，编写测试代码对其进行正确性测试。</p><p>为了测试更加方便，有一些第三方的公司或者组织提供了很好用的测试框架，给开发者使用。Junit是第三方公司开源出来的，用于对代码进行单元测试的工具（IDEA已经集成了junit框架）。相比于在main方法中测试有如下几个优点。</p><ul><li>能灵活的编写测试代码，可以针对某个方法执行测试，也支持一键完成对全部方法的自动化测试，且各自独立。</li><li>不需要程序员分析测试结果，会自动生成测试报告</li></ul><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/1668507051101.png" alt="1668507051101"></p><p>先准备一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printNumber</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;名字长度：&quot;</span>+name.length());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>为之写一个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtilTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPrintNumber</span><span class="hljs-params">()</span>&#123;<br>        StringUtil.printNumber(<span class="hljs-string">&quot;admin&quot;</span>);<br>        StringUtil.printNumber(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="1-2-单元测试断言"><a href="#1-2-单元测试断言" class="headerlink" title="1.2 单元测试断言"></a>1.2 单元测试断言</h2><p>断言：程序员可以预测程序的运行结果，检查程序的运行结果是否与预期一致。</p><p>在StringUtil类中新增一个测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMaxIndex</span><span class="hljs-params">(String data)</span>&#123;<br>    <span class="hljs-keyword">if</span>(data == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> data.length();<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们在StringUtilTest类中写一个测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtilTest</span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetMaxIndex</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">index1</span> <span class="hljs-operator">=</span> StringUtil.getMaxIndex(<span class="hljs-literal">null</span>);<br>       System.out.println(index1);<br>        <br>       <span class="hljs-type">int</span> <span class="hljs-variable">index2</span> <span class="hljs-operator">=</span> StringUtil.getMaxIndex(<span class="hljs-string">&quot;admin&quot;</span>);<br>       System.out.println(index2);<br>        <br>        <span class="hljs-comment">//断言机制：预测index2的结果</span><br>        Assert.assertEquals(<span class="hljs-string">&quot;方法内部有Bug&quot;</span>,<span class="hljs-number">4</span>,index2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试方法，结果如下图所示，表示我们预期值与实际值不一致</p><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/image-20241105182642868.png" alt="image-20241105182642868"></p><h2 id="1-3-Junit框架的常用注解"><a href="#1-3-Junit框架的常用注解" class="headerlink" title="1.3 Junit框架的常用注解"></a>1.3 Junit框架的常用注解</h2><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/1668508373865.png" alt="1668508373865"></p><p>下面进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtilTest</span>&#123;<br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test1 Before 执行了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@BeforeClass</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test11</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test11 BeforeClass 执行了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test2 After 执行了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterCalss</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test22</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test22 AfterCalss 执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>应用场景：</p><p>假设我想在每个测试方法中使用Socket对象，并且用完之后，需要把Socket关闭。代码就可以按照下面的结构来设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtilTest</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Socket socket;<br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test1 Before 执行了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@BeforeClass</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test11</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test11 BeforeClass 执行了&quot;</span>);<br>        <span class="hljs-comment">//初始化Socket对象</span><br>        socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>();<br>    &#125;<br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test2 After 执行了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterCalss</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test22</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;--&gt; test22 AfterCalss 执行了&quot;</span>);<br>         <span class="hljs-comment">//关闭Socket</span><br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、反射"><a href="#二、反射" class="headerlink" title="二、反射"></a>二、反射</h1><p>反射技术：指的是加载类的字节码到内存，并以编程的方法解刨出类中的各个成分（成员变量、方法、构造器等）。</p><ul><li>加载类，获取字节码对象 class对象</li><li>获取类的构造器：constructor对象</li><li>获取类的成员变量：Filed对象</li><li>获取类的成员方法：Method对象</li></ul><h2 id="2-1-获取类的字节码"><a href="#2-1-获取类的字节码" class="headerlink" title="2.1 获取类的字节码"></a>2.1 获取类的字节码</h2><p>将字节码加载到内存，我们需要获取到的字节码对象。</p><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/1668576691591.png" alt="1668576691591"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javaday01.Student;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1Class</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Student.class;<br>        System.out.println(c1.getName());<span class="hljs-comment">//类的全名</span><br>        System.out.println(c1.getSimpleName());<span class="hljs-comment">//获取简单类名</span><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javaday01.Student&quot;</span>);<br>        System.out.println(c1 == c2); <span class="hljs-comment">//true</span><br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> s.getClass();<br>        System.out.println(c2==c3); <span class="hljs-comment">// true</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-2-获取类的构造器"><a href="#2-2-获取类的构造器" class="headerlink" title="2.2 获取类的构造器"></a>2.2 获取类的构造器</h2><p>上一节我们已经可以获取到类的字节码对象了。接下来，我们学习一下通过字节码对象获取构造器，并使用构造器创建对象。</p><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/1668577010983.png" alt="1668577010983"></p><p>写一个类Cat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaday01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>getDeclaredConstructors()</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> javaday01;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2Constructor</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> void testGetConstructor()&#123;<br>        <span class="hljs-comment">//1. 获取这个类的class对象</span><br>        Class c = Cat.<span class="hljs-keyword">class</span>;<br>        <span class="hljs-comment">//2 .获取这个类的全部构造器(只要存在就能拿到)</span><br>        Constructor[] constructors = c.getDeclaredConstructors();<br>        <span class="hljs-comment">// 输出</span><br>        <span class="hljs-keyword">for</span>(Constructor <span class="hljs-keyword">constructor</span> : constructors)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">constructor</span>.getName()+<span class="hljs-string">&quot;---&gt;参数个数： &quot;</span>+<span class="hljs-keyword">constructor</span>.getParameterCount());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>单个构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaday01;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2Constructor</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetConstructor</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1. 获取这个类的class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cat.class;<br>        <span class="hljs-comment">//2 .获取这个类的全部构造器(只要存在就能拿到)</span><br>        <span class="hljs-comment">//Constructor[] constructors = c.getDeclaredConstructors();</span><br><br><span class="hljs-comment">//        // 输出</span><br><span class="hljs-comment">//        for(Constructor constructor : constructors)&#123;</span><br><span class="hljs-comment">//            System.out.println(constructor.getName()+&quot;---&gt;参数个数： &quot;+constructor.getParameterCount());</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">// 获取某个构造器(只能是public)</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor1</span> <span class="hljs-operator">=</span> c.getConstructor();<br>        System.out.println(constructor1.getName()+<span class="hljs-string">&quot;---&gt; 参数个数：&quot;</span>+constructor1.getParameterCount());<br><br>        <span class="hljs-comment">// 获取private的</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor2</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class);<br>        System.out.println(constructor2.getName()+<span class="hljs-string">&quot;---&gt; 参数个数：&quot;</span>+constructor2.getParameterCount());<br><br><br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-3-反射获取构造器的作用"><a href="#2-3-反射获取构造器的作用" class="headerlink" title="2.3 反射获取构造器的作用"></a>2.3 反射获取构造器的作用</h2><p>构造器的作用：<strong>初始化对象并返回</strong>。</p><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/1668578639149.png" alt="1668578639149"></p><p>由于构造器是private修饰的，先需要调用<code>setAccessible(true)</code> 表示禁止检查访问控制，然后再调用<code>newInstance(实参列表)</code> 就可以执行构造器，完成对象的初始化了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaday01;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2Constructor</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetConstructor</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1. 获取这个类的class对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cat.class;<br>        <span class="hljs-comment">//2 .获取这个类的全部构造器(只要存在就能拿到)</span><br>        <span class="hljs-comment">//Constructor[] constructors = c.getDeclaredConstructors();</span><br><br><span class="hljs-comment">//        // 输出</span><br><span class="hljs-comment">//        for(Constructor constructor : constructors)&#123;</span><br><span class="hljs-comment">//            System.out.println(constructor.getName()+&quot;---&gt;参数个数： &quot;+constructor.getParameterCount());</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">// 获取某个构造器(只能是public)</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor1</span> <span class="hljs-operator">=</span> c.getConstructor();<br>        System.out.println(constructor1.getName()+<span class="hljs-string">&quot;---&gt; 参数个数：&quot;</span>+constructor1.getParameterCount());<br>        constructor1.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) constructor1.newInstance();<br>        System.out.println(cat);<br><br><br>        <span class="hljs-comment">// 获取private的</span><br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor2</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(String.class, <span class="hljs-type">int</span>.class);<br>        System.out.println(constructor2.getName()+<span class="hljs-string">&quot;---&gt; 参数个数：&quot;</span>+constructor2.getParameterCount());<br>        constructor2.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat2</span> <span class="hljs-operator">=</span> (Cat) constructor2.newInstance(<span class="hljs-string">&quot;叮当猫&quot;</span>, <span class="hljs-number">12</span>);<br>        System.out.println(cat2);<br><br><br><br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-4-反射获取成员变量-使用"><a href="#2-4-反射获取成员变量-使用" class="headerlink" title="2.4 反射获取成员变量&amp;使用"></a>2.4 反射获取成员变量&amp;使用</h2><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/1668579517323.png" alt="1668579517323"></p><ul><li><p>Cat类有如下成员变量：</p><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/image-20241105194614849.png" alt="image-20241105194614849"></p><p>执行一下代码获取成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaday01;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3Field</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetFiled</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cat.class;<br>        <span class="hljs-comment">// 获取所有字段</span><br>        Field[] fields = c.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field filed : fields)&#123;<br>            System.out.println(filed.getName() + <span class="hljs-string">&quot;---&gt; &quot;</span> + filed.getType());<br>        &#125;<br>        <span class="hljs-comment">// 获取某个字段</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">fName</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(fName.getName() + <span class="hljs-string">&quot;---&gt; &quot;</span>+ fName.getType());<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">fAge</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        System.out.println(fAge.getName() + <span class="hljs-string">&quot;---&gt; &quot;</span>+ fAge.getType());<br><br><br><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>给成员变量赋值和获取值的方法</p><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/1668580075962.png" alt="1668580075962"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaday01;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3Field</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetFiled</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cat.class;<br>        <span class="hljs-comment">// 获取所有字段</span><br>        Field[] fields = c.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field filed : fields)&#123;<br>            System.out.println(filed.getName() + <span class="hljs-string">&quot;---&gt; &quot;</span> + filed.getType());<br>        &#125;<br>        <span class="hljs-comment">// 获取某个字段</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">fName</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(fName.getName() + <span class="hljs-string">&quot;---&gt; &quot;</span>+ fName.getType());<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">fAge</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        System.out.println(fAge.getName() + <span class="hljs-string">&quot;---&gt; &quot;</span>+ fAge.getType());<br><br>        <span class="hljs-comment">//赋值</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        fName.setAccessible(<span class="hljs-literal">true</span>);<br>        fName.set(cat, <span class="hljs-string">&quot;加菲猫&quot;</span>);<br>        System.out.println(cat);<br><br>        <span class="hljs-comment">//取值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) fName.get(cat);<br>        System.out.println(name);<br><br><br><br><br><br><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/image-20241105195125154.png" alt="image-20241105195125154"></p></li></ul><h2 id="2-5-反射获取成员方法"><a href="#2-5-反射获取成员方法" class="headerlink" title="2.5 反射获取成员方法"></a>2.5 反射获取成员方法</h2><p>在Java中反射包中，每一个成员方法用Method对象来表示，通过Class类提供的方法可以获取类中的成员方法对象。如下下图所示<br><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/1668580761089.png" alt="1668580761089"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaday01;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3Method</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cat.class;<br>        Method[] methods = c.getDeclaredMethods();<br><br>        <span class="hljs-keyword">for</span> (Method method:methods)&#123;<br>            System.out.println(method.getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+method.getParameterCount()+<span class="hljs-string">&quot;--&gt;&quot;</span>+method.getReturnType());<br>        &#125;<br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行上面的代码，运行结果如下图所示：<strong>打印输出每一个成员方法的名称、参数格式、返回值类型</strong></p><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/image-20241105200325689.png" alt="image-20241105200325689"></p><p>在Method类中提供了方法，可以将方法自己执行起来。</p><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/1668581800777.png" alt="1668581800777"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaday01;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3Method</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Cat.class;<br>        Method[] methods = c.getDeclaredMethods();<br><br>        <span class="hljs-keyword">for</span> (Method method:methods)&#123;<br>            System.out.println(method.getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+method.getParameterCount()+<span class="hljs-string">&quot;--&gt;&quot;</span>+method.getReturnType());<br>        &#125;<br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;run&quot;</span>);<br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        run.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> run.invoke(cat);<br>        System.out.println(rs1);<br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;eat&quot;</span>,String.class);<br>        eat.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> eat.invoke(cat,<span class="hljs-string">&quot;鱼儿&quot;</span>);<br>        System.out.println(rs2);<br><br><br><br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/image-20241105200905019.png" alt="image-20241105200905019"></p><h2 id="2-6-反射的应用"><a href="#2-6-反射的应用" class="headerlink" title="2.6 反射的应用"></a>2.6 反射的应用</h2><p>反射的核心作用是用来获取类的各个组成部分并执行他们</p><p><img src="/2024/11/05/JAVASE%E2%80%94%E2%80%94%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%91%E5%B0%84/1668583255686.png" alt="1668583255686"></p><p>让我们写一个框架，能够将任意一个对象的属性名和属性值写到文件中去。不管这个对象有多少个属性，也不管这个对象的属性名是否相同。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-number">1</span>.先写好两个类，一个<span class="hljs-variable">Student</span>类和<span class="hljs-variable">Teacher</span>类<br><span class="hljs-number">2</span>.写一个<span class="hljs-variable">ObjectFrame</span>类代表框本架<br>在<span class="hljs-variable">ObjectFrame</span>类中定义一个<span class="hljs-function"><span class="hljs-title">saveObject</span>(<span class="hljs-variable"><span class="hljs-class">Object</span></span> <span class="hljs-variable">obj</span>)方法，用于将任意对象存到文件中去</span><br><span class="hljs-function">参数：<span class="hljs-variable"><span class="hljs-class">Object</span></span> <span class="hljs-variable">obj</span>: 就表示要存入文件中的对象</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-number">3</span>.编写方法内部的代码，往文件中存储对象的属性名和属性值</span><br><span class="hljs-function"><span class="hljs-number">1</span>)参数<span class="hljs-variable">obj</span>对象中有哪些属性，属性名是什么实现值是什么，中有对象自己最清楚。</span><br><span class="hljs-function"><span class="hljs-number">2</span>)接着就通过反射获取类的成员变量信息了（变量名、变量值）</span><br><span class="hljs-function"><span class="hljs-number">3</span>)把变量名和变量值写到文件中去</span><br></code></pre></td></tr></table></figure><p>写一个ObjectFrame表示自己设计的框架，代码如下图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaday01;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectFrame</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveObject</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span>  Exception&#123;<br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\learn_java\\javaday01\\src\\data.txt&quot;</span>, <span class="hljs-literal">true</span>));<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span>  <span class="hljs-operator">=</span> obj.getClass();<br>        ps.println(<span class="hljs-string">&quot;---------&quot;</span>+c.getSimpleName()+<span class="hljs-string">&quot;---------&quot;</span>);<br>        Field[] fields = c.getDeclaredFields();<br><br>        <span class="hljs-comment">// 把变量名和变量值写入文件</span><br>        <span class="hljs-keyword">for</span>(Field field : fields)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> field.getName();<br>            <span class="hljs-comment">//Object value = field.get(obj) + &quot; &quot;;</span><br>            ps.println(name);<br>        &#125;<br>        ps.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用自己设计的框架，往文件中写入Student对象的信息和Teacher对象的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> javaday01;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5Framw</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">45</span>, <span class="hljs-string">&quot;jack&quot;</span>);<br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;wendy&quot;</span>, <span class="hljs-number">30000</span>);<br>        ObjectFrame.saveObject(s1);<br>        ObjectFrame.saveObject(t1);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="三、注解"><a href="#三、注解" class="headerlink" title="三、注解"></a>三、注解</h1><h2 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h2><p><strong>Java注解是代码中的特殊标记，比如@Override、@Test等，作用是：让其他程序根据注解信息决定怎么执行该程序。</strong></p><ul><li><strong>注解不光可以用在方法上，还可以用在类上、变量上、构造器上等位置。</strong></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>青训营X豆包MarsCode 技术训练营——LangChain实战营</title>
    <link href="/2024/11/04/%E9%9D%92%E8%AE%AD%E8%90%A5X%E8%B1%86%E5%8C%85MarsCode-%E6%8A%80%E6%9C%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%94%E2%80%94LangChain%E5%AE%9E%E6%88%98%E8%90%A5/"/>
    <url>/2024/11/04/%E9%9D%92%E8%AE%AD%E8%90%A5X%E8%B1%86%E5%8C%85MarsCode-%E6%8A%80%E6%9C%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%94%E2%80%94LangChain%E5%AE%9E%E6%88%98%E8%90%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="何为LangChain"><a href="#何为LangChain" class="headerlink" title="何为LangChain?"></a>何为LangChain?</h1><p><strong>LangChain：</strong>专为开发基于语言模型的应用而设计的框架，通过LangChain，不仅可以通过API调用如ChatGPT、GPT-4、Llama2等大语言模型，还可以实现更高级功能。</p><p><img src="/2024/11/04/%E9%9D%92%E8%AE%AD%E8%90%A5X%E8%B1%86%E5%8C%85MarsCode-%E6%8A%80%E6%9C%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%94%E2%80%94LangChain%E5%AE%9E%E6%88%98%E8%90%A5/image-20241104185730000.png" alt="image-20241104185730000"></p><p>LangChain是一个基于大语言模型（LLMs）用于构建端到端语言模型应用的框架，它可以让开发者使用语言模型来实现各种复杂的任务，例如文本到图像的生成、文档问答、聊天机器人等。LangChain提供了一系列工具、套件和接口，可以简化创建由LLMs和聊天模型提供支持的应用程序的过程。</p><h1 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h1><ul><li>启程篇：LangChain系统的安装流程，以及如何进行快速的入门操作</li><li>基础篇：深入6大组件</li><li>应用篇：如何将LangChain组件应用到实际场景中</li><li>动手篇：如何部署一个鲜花网络电商的人脉工具，并开发一个易速鲜花聊天客服机器人。</li></ul><h1 id="两大模型"><a href="#两大模型" class="headerlink" title="两大模型"></a>两大模型</h1><ul><li><p><strong>Chat Model</strong>：</p><p>gpt-3.5-turbo（也就是ChatGPT）和GPT-4</p></li><li><p><strong>Text Model</strong>：</p><p>text-davinci-003（基于GPT3）</p></li></ul><p>上面这两种模型，提供的功能类似，都是接收对话输入（input，也叫prompt），返回回答文本（output，也叫response）。但是，它们的调用方式和要求的输入格式是有区别的</p><h2 id="调用-Text-模型"><a href="#调用-Text-模型" class="headerlink" title="调用 Text 模型"></a>调用 Text 模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">client = OpenAI()<br><br>response = client.completions.create(<br>    model=os.environ.get(<span class="hljs-string">&quot;LLM_MODELEND&quot;</span>),<br>    temperature=<span class="hljs-number">0.5</span>,<br>    max_tokens=<span class="hljs-number">100</span>,<br>    prompt=<span class="hljs-string">&quot;请给我的花店起个名&quot;</span>,<br>)<br><br><span class="hljs-built_in">print</span>(response.choices[<span class="hljs-number">0</span>].text.strip())<br><br></code></pre></td></tr></table></figure><p>choices字段是一个列表，因为在某些情况下，你可以要求模型生成多个可能的输出。每个选择都是一个字典，其中包含以下字段：</p><ul><li>text：模型生成的文本。</li><li>finish_reason：模型停止生成的原因，可能的值包括 stop（遇到了停止标记）、length（达到了最大长度）或 temperature（根据设定的温度参数决定停止）。</li></ul><h2 id="调用-Chat-模型"><a href="#调用-Chat-模型" class="headerlink" title="调用 Chat 模型"></a>调用 Chat 模型</h2><ul><li>messages：此处的messages参数是一个列表，包含了多个消息。每个消息都有一个role（可以是system、user或assistant）和content（消息的内容）。系统消息设定了对话的背景（你是一个很棒的智能助手），然后用户消息提出了具体请求（请给我的花店起个名）。模型的任务是基于这些消息来生成回复。</li><li>role：在OpenAI的Chat模型中，system、user和assistant都是消息的角色。每一种角色都有不同的含义和作用。<ul><li>system：系统消息主要用于设定对话的背景或上下文。这可以帮助模型理解它在对话中的角色和任务。例如，你可以通过系统消息来设定一个场景，让模型知道它是在扮演一个医生、律师或者一个知识丰富的AI助手。系统消息通常在对话开始时给出。</li><li>user：用户消息是从用户或人类角色发出的。它们通常包含了用户想要模型回答或完成的请求。用户消息可以是一个问题、一段话，或者任何其他用户希望模型响应的内容。</li><li>assistant：助手消息是模型的回复。例如，在你使用API发送多轮对话中新的对话请求时，可以通过助手消息提供先前对话的上下文。然而，请注意在对话的最后一条消息应始终为用户消息，因为模型总是要回应最后这条用户消息。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">client = OpenAI()<br><br><span class="hljs-comment"># text = client.invoke(&quot;请给我写一句情人节红玫瑰的中文宣传语&quot;)</span><br>response = client.chat.completions.create(<br>    model=os.environ.get(<span class="hljs-string">&quot;LLM_MODELEND&quot;</span>),<br>    messages=[<br>        &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;You are a creative AI.&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;请你为我想一个祝福文案&quot;</span>&#125;,<br>    ],<br>    temperature=<span class="hljs-number">0.8</span>,<br>    max_tokens=<span class="hljs-number">600</span>,<br>)<br><br><span class="hljs-built_in">print</span>(response.choices[<span class="hljs-number">0</span>].message.content)<br><br></code></pre></td></tr></table></figure><h1 id="通过LangChain调用Text和Chat模型"><a href="#通过LangChain调用Text和Chat模型" class="headerlink" title="通过LangChain调用Text和Chat模型"></a>通过LangChain调用Text和Chat模型</h1><ul><li><p>调用Text模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> langchain.llms <span class="hljs-keyword">import</span> OpenAI<br>llm = OpenAI(  <br>    model=<span class="hljs-string">&quot;gpt-3.5-turbo-instruct&quot;</span>,<br>    temperature=<span class="hljs-number">0.8</span>,<br>    max_tokens=<span class="hljs-number">60</span>,)<br>response = llm.predict(<span class="hljs-string">&quot;请给我的花店起个名&quot;</span>)<br><span class="hljs-built_in">print</span>(response)<br><br></code></pre></td></tr></table></figure></li><li><p>调用Chat模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;OPENAI_API_KEY&quot;</span>] = <span class="hljs-string">&#x27;你的Open API Key&#x27;</span><br><span class="hljs-keyword">from</span> langchain.chat_models <span class="hljs-keyword">import</span> ChatOpenAI<br>chat = ChatOpenAI(model=<span class="hljs-string">&quot;gpt-4&quot;</span>,<br>                    temperature=<span class="hljs-number">0.8</span>,<br>                    max_tokens=<span class="hljs-number">60</span>)<br><span class="hljs-keyword">from</span> langchain.schema <span class="hljs-keyword">import</span> (<br>    HumanMessage,<br>    SystemMessage<br>)<br>messages = [<br>    SystemMessage(content=<span class="hljs-string">&quot;你是一个很棒的智能助手&quot;</span>),<br>    HumanMessage(content=<span class="hljs-string">&quot;请给我的花店起个名&quot;</span>)<br>]<br>response = chat(messages)<br><span class="hljs-built_in">print</span>(response)<br><br></code></pre></td></tr></table></figure></li></ul><h1 id="“易速鲜花”内部员工知识库问答系统"><a href="#“易速鲜花”内部员工知识库问答系统" class="headerlink" title="“易速鲜花”内部员工知识库问答系统"></a>“易速鲜花”内部员工知识库问答系统</h1><p><strong>项目介绍：</strong>开发一套基于各种内部知识手册的 “Doc-QA” 系统。这个系统将充分利用LangChain框架，处理从员工手册中产生的各种问题。这个问答系统能够理解员工的问题，并基于最新的员工手册，给出精准的答案。</p><p> <img src="/2024/11/04/%E9%9D%92%E8%AE%AD%E8%90%A5X%E8%B1%86%E5%8C%85MarsCode-%E6%8A%80%E6%9C%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%94%E2%80%94LangChain%E5%AE%9E%E6%88%98%E8%90%A5/image-20241113162412535.png" alt="image-20241113162412535"></p><ul><li>数据源：非结构化数据、结构化数据、代码</li><li>大模型应用：以大模型为逻辑引擎，生成我们所需要的回答。</li><li>用例：大模型生成的回答可以构建出QA&#x2F;聊天机器人等系统</li></ul><p><strong>核心实现机制：</strong></p><p><img src="/2024/11/04/%E9%9D%92%E8%AE%AD%E8%90%A5X%E8%B1%86%E5%8C%85MarsCode-%E6%8A%80%E6%9C%AF%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%94%E2%80%94LangChain%E5%AE%9E%E6%88%98%E8%90%A5/image-20241113193828440.png" alt="image-20241113193828440"></p><ol><li>Loading：文档加载器把Documents <strong>加载</strong>为以LangChain能够读取的形式。</li><li>Splitting：文本分割器把Documents <strong>切分</strong>为指定大小的分割，我把它们称为“文档块”或者“文档片”。</li><li>Storage：：将上一步中分割好的“文档块”以“嵌入”（Embedding）的形式<strong>存储</strong>到向量数据库（Vector DB）中，形成一个个的“嵌入片”。</li><li>Retrieval：应用程序从存储中<strong>检索</strong>分割后的文档</li><li>Output：把问题和相似的嵌入片传递给语言模型（LLM），使用包含问题和检索到的分割的提示<strong>生成答案</strong>。</li></ol><h2 id="1-数据的准备和载入"><a href="#1-数据的准备和载入" class="headerlink" title="1. 数据的准备和载入"></a>1. 数据的准备和载入</h2><p>读取文本(pdf, txt, docx) 到一个列表里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> langchain.document_loaders <span class="hljs-keyword">import</span> PyPDFLoader<br><span class="hljs-keyword">from</span> langchain.document_loaders <span class="hljs-keyword">import</span> Docx2txtLoader<br><span class="hljs-keyword">from</span> langchain.document_loaders <span class="hljs-keyword">import</span> TextLoader<br><br><br><br>base_dir = <span class="hljs-string">&quot;OneFlower&quot;</span><br>documents = []<br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> os.listdir(base_dir):<br>    file_path = os.path.join(base_dir, file)<br>    <span class="hljs-keyword">if</span> file.endswith(<span class="hljs-string">&quot;.pdf&quot;</span>):<br>        loader = PyPDFLoader(file_path)<br>        documents.extend(loader.load())<br>    <span class="hljs-keyword">elif</span> file.endswith(<span class="hljs-string">&quot;.docx&quot;</span>):<br>        loader = Docx2txtLoader(file_path)<br>        documents.extend(loader.load())<br>    <span class="hljs-keyword">elif</span> file.endswith(<span class="hljs-string">&quot;.txt&quot;</span>):<br>        loader = TextLoader(file_path)<br>        documents.extend(loader.load())<br></code></pre></td></tr></table></figure><h2 id="2-文本的分割"><a href="#2-文本的分割" class="headerlink" title="2. 文本的分割"></a>2. 文本的分割</h2><p>将加载的文本分割成更小的块，以便进行嵌入和向量存储。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    step2: 对文本做分割，chunk(文本块)</span><br><span class="hljs-string">           chunk_size:每个文本块的目标大小</span><br><span class="hljs-string">           chunk_overlap: 相邻文本块之间的重叠字符数 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>text_splitter = RecursiveCharacterTextSplitter(chunk_size = <span class="hljs-number">200</span>, chunk_overlap=<span class="hljs-number">10</span>)<br>chunked_documnets = text_splitter.split_documents(documents)<br></code></pre></td></tr></table></figure><h2 id="3-向量数据库存储"><a href="#3-向量数据库存储" class="headerlink" title="3. 向量数据库存储"></a>3. 向量数据库存储</h2><p>将这些分割后的文本转换成嵌入的形式，并将其存储在一个向量数据库中</p><p><strong>词嵌入：</strong>一个为每个词分配的数字列表</p><p><strong>向量数据库：</strong>一种专门用于存储和搜索向量形式的数据的数据库，如Pinecone、Chroma和Qdrant。这里我们选择的是开源向量数据库Qdrant。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    step3: 把分割文本 嵌入 并 存储到矢量数据库Qdrant中</span><br><span class="hljs-string">           embedding:用OpenAI的Embedding Model做嵌入</span><br><span class="hljs-string">           location:存储方式</span><br><span class="hljs-string">           collection_name:集合名称 </span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>vectorstore = Qdrant.from_documents(<br>    documents = chunked_documnets,<br>    embedding = OpenAIEmbeddings(),<br>    location = <span class="hljs-string">&quot;:memory:&quot;</span>,<br>    collection_name = <span class="hljs-string">&quot;my_documents&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><h2 id="4-相关信息获取"><a href="#4-相关信息获取" class="headerlink" title="4. 相关信息获取"></a>4. 相关信息获取</h2><p>当内部文档存储到向量数据库之后，我们需要根据问题和任务来提取最相关的信息。此时，信息提取的基本方式就是把问题也转换为向量，然后去和向量数据库中的各个向量进行比较，提取最接近的信息。</p><p>在高维空间中，常用的向量距离或相似度计算方法有欧氏距离和余弦相似度。</p><p><strong>欧氏距离：</strong>度量的是绝对距离，它能很好地反映出向量的绝对差异。当我们关心数据的绝对大小，例如在物品推荐系统中，用户的购买量可能反映他们的偏好强度，此时可以考虑使用欧氏距离。同样，在数据集中各个向量的大小相似，且数据分布大致均匀时，使用欧氏距离也比较适合。</p><p><strong>余弦相似度：</strong>度量的是方向的相似性，它更关心的是两个向量的角度差异，而不是它们的大小差异。在处理文本数据或者其他高维稀疏数据的时候，余弦相似度特别有用。比如在信息检索和文本分类等任务中，文本数据往往被表示为高维的词向量，词向量的方向更能反映其语义相似性，此时可以使用余弦相似度。</p><p>建议使用余弦相似度作为度量标准。通过比较问题和答案向量在语义空间中的方向，可以找到与提出的问题最匹配的答案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 4. Retrieval 准备模型和Retrieval链</span><br><span class="hljs-keyword">import</span> logging <span class="hljs-comment"># 导入Logging工具</span><br><span class="hljs-keyword">from</span> langchain.chat_models <span class="hljs-keyword">import</span> ChatOpenAI <span class="hljs-comment"># ChatOpenAI模型</span><br><span class="hljs-keyword">from</span> langchain.retrievers.multi_query <span class="hljs-keyword">import</span> MultiQueryRetriever <span class="hljs-comment"># MultiQueryRetriever工具</span><br><span class="hljs-keyword">from</span> langchain.chains <span class="hljs-keyword">import</span> RetrievalQA <span class="hljs-comment"># RetrievalQA链</span><br><br><span class="hljs-comment"># 设置Logging</span><br>logging.basicConfig()<br>logging.getLogger(<span class="hljs-string">&#x27;langchain.retrievers.multi_query&#x27;</span>).setLevel(logging.INFO)<br><br><span class="hljs-comment"># 实例化一个大模型工具 - OpenAI的GPT-3.5</span><br>llm = ChatOpenAI(model_name=<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>, temperature=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 实例化一个MultiQueryRetriever</span><br>retriever_from_llm = MultiQueryRetriever.from_llm(retriever=vectorstore.as_retriever(), llm=llm)<br><br><span class="hljs-comment"># 实例化一个RetrievalQA链</span><br>qa_chain = RetrievalQA.from_chain_type(llm,retriever=retriever_from_llm)<br><br></code></pre></td></tr></table></figure><h2 id="5-生成回答"><a href="#5-生成回答" class="headerlink" title="5. 生成回答"></a>5. 生成回答</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 5. Output 问答系统的UI实现</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template<br>app = Flask(__name__) <span class="hljs-comment"># Flask APP</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br><br>        <span class="hljs-comment"># 接收用户输入作为问题</span><br>        question = request.form.get(<span class="hljs-string">&#x27;question&#x27;</span>)        <br>        <br>        <span class="hljs-comment"># RetrievalQA链 - 读入问题，生成答案</span><br>        result = qa_chain(&#123;<span class="hljs-string">&quot;query&quot;</span>: question&#125;)<br>        <br>        <span class="hljs-comment"># 把大模型的回答结果返回网页进行渲染</span><br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, result=result)<br>    <br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,debug=<span class="hljs-literal">True</span>,port=<span class="hljs-number">5000</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>书生大模型实战营——L1G3000（浦语提示词实践）</title>
    <link href="/2024/11/01/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G3000%EF%BC%88%E6%B5%A6%E8%AF%AD%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%AE%9E%E8%B7%B5%EF%BC%89/"/>
    <url>/2024/11/01/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G3000%EF%BC%88%E6%B5%A6%E8%AF%AD%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%AE%9E%E8%B7%B5%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>任务：利用对提示词的精确设计，引导语言模型正确回答出“strawberry”中有几个字母“r”。</p><h1 id="1-提示词工程"><a href="#1-提示词工程" class="headerlink" title="1. 提示词工程"></a>1. 提示词工程</h1><h2 id="1-1-提示词Prompt"><a href="#1-1-提示词Prompt" class="headerlink" title="1.1 提示词Prompt"></a>1.1 提示词Prompt</h2><p><strong>Prompt：</strong> 指导以LLM为代表的生成式人工智能生成文本内容的输入方式。它通常是一个简短的文本或问题，用于描述任务和要求。</p><h2 id="1-2-提示词工程"><a href="#1-2-提示词工程" class="headerlink" title="1.2 提示词工程"></a>1.2 提示词工程</h2><p><strong>提示词工程：</strong>通过设计和调整输入来改善模型性能或控制输出结果的技术。在模型回复的过程中，首先获取用户输入的文本，然后处理文本特征并根据输入文本特征预测之后的文本。</p><p>提示工程的六大基本原则：</p><ul><li>指令要清晰</li><li>提供参考内容</li><li>复杂任务拆分成子任务</li><li>给LLM“思考”时间</li><li>使用外部工具</li><li>系统性测试变化</li></ul><p>一个有效的指令通常包含以下要素：背景、任务、要求、限制条件、示例、输出格式和目标。</p><h2 id="1-3-提示设计框架"><a href="#1-3-提示设计框架" class="headerlink" title="1.3 提示设计框架"></a>1.3 提示设计框架</h2><ul><li><p>CRISPE：</p><ul><li><strong>C</strong>apacity and <strong>R</strong>ole (能力与角色)：希望 ChatGPT 扮演怎样的角色。</li><li><strong>I</strong>nsight (洞察力)：背景信息和上下文</li><li><strong>S</strong>tatement (指令)：希望 ChatGPT 做什么。</li><li><strong>P</strong>ersonality (个性)：希望 ChatGPT 以什么风格或方式回答你。</li><li><strong>E</strong>xperiment (尝试)：要求 ChatGPT 提供多个答案。</li></ul></li><li><p>CO-STAR：</p><ul><li><strong>C</strong>ontext (背景): 提供任务背景信息</li><li><strong>O</strong>bjective (目标): 定义需要LLM执行的任务</li><li><strong>S</strong>tyle (风格): 指定希望LLM具备的写作风格</li><li><strong>T</strong>one (语气): 设定LLM回复的情感基调</li><li><strong>A</strong>udience (观众): 表明回复的对象</li><li><strong>R</strong>esponse (回复): 提供回复格式</li></ul><p><img src="/2024/11/01/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G3000%EF%BC%88%E6%B5%A6%E8%AF%AD%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%AE%9E%E8%B7%B5%EF%BC%89/image-20241101184327273.png" alt="image-20241101184327273"></p></li></ul><h1 id="2-LangGPT结构化提示词"><a href="#2-LangGPT结构化提示词" class="headerlink" title="2. LangGPT结构化提示词"></a>2. LangGPT结构化提示词</h1><p>LangGPT 是 <strong>Language For GPT-like LLMs</strong> 的简称，中文名为结构化提示词。</p><h2 id="2-1-LangGPT结构"><a href="#2-1-LangGPT结构" class="headerlink" title="2.1 LangGPT结构"></a>2.1 LangGPT结构</h2><p>LangGPT框架参考了面向对象程序设计的思想，设计为基于角色的双层结构，一个完整的提示词包含<strong>模块-内部元素</strong>两级，模块表示要求或提示LLM的方面，例如：背景信息、建议、约束等。内部元素为模块的组成部分，是归属某一方面的具体要求或辅助信息，分为赋值型和方法型。</p><h2 id="2-2-编写技巧"><a href="#2-2-编写技巧" class="headerlink" title="2.2 编写技巧"></a>2.2 编写技巧</h2><ul><li><p><strong>构建全局思维链</strong></p><p>对大模型的 Prompt 应用CoT 思维链方法的有效性是被研究和实践广泛证明了的。首先可以根据场景选择基本的模块。</p><p><img src="/2024/11/01/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G3000%EF%BC%88%E6%B5%A6%E8%AF%AD%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%AE%9E%E8%B7%B5%EF%BC%89/image-20241101191457492.png" alt="image-20241101191457492"></p></li><li><p><strong>保持上下文语义一致性</strong></p></li><li><p><strong>有机结合其他 Prompt 技巧</strong></p></li></ul><h2 id="2-3-常用提示词模块"><a href="#2-3-常用提示词模块" class="headerlink" title="2.3 常用提示词模块"></a>2.3 常用提示词模块</h2><ul><li>Attention：需重点强调的要点</li><li>Background：提示词的需求背景</li><li>Constraints：限制条件</li><li>Command：用于定义大模型指令</li><li>Definition：名词定义</li><li>Example：提示词中的示例few-shots</li><li>Fail：处理失败时对应的兜底逻辑</li><li>Goal：提示词要实现的目标</li><li>Hack：防止被攻击的防护词</li><li>In-depth：一步步思考，持续深入</li><li>Job：需求任务描述</li><li>Knowledge：知识库文件</li><li>Lawful：合法合规，安全行驶的限制</li><li>Memory：记忆关键信息，缓解模型遗忘问题</li><li>Merge：是否使用多角色，最终合并投票输出结果</li><li>Neglect：明确忽略哪些内容</li><li>Odd：偶尔 （俏皮，愤怒，严肃） 一下</li><li>OutputFormat：模型输出格式</li><li>Pardon：当用户回复信息不详细时，持续追问</li><li>Quote：引用知识库信息时，给出原文引用链接</li><li>Role：大模型的角色设定</li><li>RAG：外挂知识库</li><li>Skills：擅长的技能项</li><li>Tone：回复使用的语气风格</li><li>Unsure：引入评判者视角，当判定低于阈值时，回复安全词</li><li>Vaule：Prompt模仿人格的价值观</li><li>Workflow：工作流程</li><li>X-factor：用户使用本提示词最为重要的内核要素</li><li>Yeow：提示词开场白设计</li><li>Zig：无厘头式提示词，如[答案之书]</li></ul><h1 id="3-浦语提示词工程实践"><a href="#3-浦语提示词工程实践" class="headerlink" title="3. 浦语提示词工程实践"></a>3. 浦语提示词工程实践</h1><h2 id="3-1-正确数数"><a href="#3-1-正确数数" class="headerlink" title="3.1 正确数数"></a>3.1 正确数数</h2><ul><li><p>背景问题：近期相关研究指出，在处理特定文本分析任务时，语言模型的表现有时会遇到挑战，例如在分析单词内部的具体字母数量时可能会出现错误。</p></li><li><p>任务要求：利用对提示词的精确设计，引导语言模型正确回答出“strawberry”中有几个字母“r”。完成正确的问答交互并提交截图作为完成凭证。</p><p>直接询问，模型回答2个”r”。</p><p><img src="/2024/11/01/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G3000%EF%BC%88%E6%B5%A6%E8%AF%AD%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%AE%9E%E8%B7%B5%EF%BC%89/image-20241107180722567.png" alt="image-20241107180722567"></p></li><li><p>实现：下面，使用CRISPE架构编写提示词：</p><ul><li><strong>C</strong>apacity and <strong>R</strong>ole (能力与角色)：你是一位精通数学与计算机编程的大师，请你根据我的引导，解决一个数学问题。</li><li><strong>I</strong>nsight (洞察力)：现在，有一个单词“strawberry”，需要你帮我计算出这个单词里面有多少个”r”？</li><li><strong>S</strong>tatement (指令)：我希望你能通过遍历字符串的方式来数出这个单词里面”r”的个数。从该字符串的第一个字符开始，如果这个字符是”r”，统计的”r”的个数加一，一直到最后一个字符数完。</li><li><strong>P</strong>ersonality (个性)：希望你能写出完整的遍历字符串的过程，并且告诉我最后的结果。我希望你能逐一分析每个字符，为我模拟计算机遍历字符串的过程。</li><li><strong>E</strong>xperiment (尝试)：答案是唯一的。</li></ul></li><li><p>结果：</p><p><img src="/2024/11/01/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G3000%EF%BC%88%E6%B5%A6%E8%AF%AD%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%AE%9E%E8%B7%B5%EF%BC%89/QQ%E6%88%AA%E5%9B%BE20241107183035.png" alt="QQ截图20241107183035"></p></li></ul><h2 id="3-2-剧本创作助手"><a href="#3-2-剧本创作助手" class="headerlink" title="3.2 剧本创作助手"></a>3.2 剧本创作助手</h2><ul><li><p>进阶任务：基于LangGPT格式编写提示词——剧本创作助手</p></li><li><p>Baseline：</p><p><img src="/2024/11/01/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G3000%EF%BC%88%E6%B5%A6%E8%AF%AD%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%AE%9E%E8%B7%B5%EF%BC%89/QQ%E6%88%AA%E5%9B%BE20241107183545.png" alt="QQ截图20241107183545"></p></li><li><p>使用LangGPT格式编写提示词：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">你是一个经验丰富的编剧。现在，你接到一个刑侦探案主题的编剧任务。<br>    <span class="hljs-comment"># 技能：</span><br>    <span class="hljs-comment">## 剧本有组织架构，环环相扣</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">分篇章：累计5个章节，从第一章开篇到最后一章完结，要求每一章能承上启下，有组织，有逻辑</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">人物与剧本内容贴合：每个人物要有一定的塑造，人物言行要与剧本设定的逻辑相符。人物分主次，有正邪，秉持善有善报，恶有恶报的主题。不需要没用的角色，写了每个角色就要有相应的人物的塑造段落。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">案情明确：从案发，到探案，寻找嫌疑人，侦破案件，案件结果，犯人作案缘由必须写清楚。</span><br>    <span class="hljs-comment">## 剧本内容丰富，文字精简</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">语言流畅，引人入胜，多分段，多短句，人物对话流畅</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">文字要有共情力，有人性，能感染读者</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">章节标题简洁精炼，每章的内容要紧扣章节标题</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">学习阿加莎的写作风格，案情容易理解，多写人物内心描写，善用角色对比，故事推进迅速但情节丰富，角色的出现都是必要的，用简单的文字写丰富的故事</span><br>    <span class="hljs-comment"># 输出要求</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">从 剧本标题，剧本背景，剧本人物及介绍，到剧本正文都要输出</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">剧本正文占主要篇幅，分章节，内容充实</span><br>    <span class="hljs-comment"># 工作流程：</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">请用户提供剧本的关键词，以确定剧本的主题和特色。</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">根据用户的关键词以生成符合关键词的剧本</span><br>    <span class="hljs-comment"># 初始化：</span><br>    欢迎用户，友好的介绍自己并引导用户提供剧本的关键词或主题，以便获取关键词来生成剧本。<br></code></pre></td></tr></table></figure><pre><code class="hljs">关键词：无人生还，友情与爱情，圆桌，坚守与背叛，傲慢与偏见，上流与下流</code></pre></li></ul><p><img src="/2024/11/01/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L1G3000%EF%BC%88%E6%B5%A6%E8%AF%AD%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%AE%9E%E8%B7%B5%EF%BC%89/QQ%E6%88%AA%E5%9B%BE20241107190720.png" alt="QQ截图20241107190720"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVASE——集合进阶（Set、Map集合）</title>
    <link href="/2024/10/31/JAVASE%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88Set%E3%80%81Map%E9%9B%86%E5%90%88%EF%BC%89/"/>
    <url>/2024/10/31/JAVASE%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88Set%E3%80%81Map%E9%9B%86%E5%90%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>书生大模型实战营——L0G4000（玩转HF/魔搭/魔乐社区）</title>
    <link href="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/"/>
    <url>/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>探索如何充分利用 Hugging Face、魔搭社区和魔乐社区的资源和工具，学习模型下载、上传以及创建专属Space，玩转三大平台。</p><p>需要实现的任务：1. 下载模型 2. 上传模型  3. Space上传</p><h1 id="1-HF-平台"><a href="#1-HF-平台" class="headerlink" title="1. HF 平台"></a>1. HF 平台</h1><p>HF官网： <a href="https://huggingface.co/">https://huggingface.co/</a></p><h2 id="1-1-InternLM模型下载"><a href="#1-1-InternLM模型下载" class="headerlink" title="1.1 InternLM模型下载"></a>1.1 InternLM模型下载</h2><p><strong>internlm2_5-1_8b</strong>：<a href="https://huggingface.co/internlm/internlm2_5-1_8b">https://huggingface.co/internlm/internlm2_5-1_8b</a></p><p>因为网络和磁盘有限的原因，强烈不建议在 InternStudio 运行，因此这里使用CodeSpace（<a href="https://github.com/codespaces%EF%BC%89">https://github.com/codespaces）</a></p><p>Github CodeSpace是Github推出的线上代码平台，提供了一系列templates，如Jupyter Notebook。</p><p>在终端中下载一下依赖：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 安装transformers</span><br>pip install transformers==<span class="hljs-number">4.38</span><br>pip install sentencepiece==<span class="hljs-number">0.1</span><span class="hljs-number">.99</span><br>pip install einops==<span class="hljs-number">0.8</span><span class="hljs-number">.0</span><br>pip install protobuf==<span class="hljs-number">5.27</span><span class="hljs-number">.2</span><br>pip install accelerate==<span class="hljs-number">0.33</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><h2 id="1-2-下载internlm2-5-7b-chat的配置文件"><a href="#1-2-下载internlm2-5-7b-chat的配置文件" class="headerlink" title="1.2 下载internlm2_5-7b-chat的配置文件"></a>1.2 下载internlm2_5-7b-chat的配置文件</h2><p>接下来，下载模型的配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> hf_hub_download<br><br><span class="hljs-comment"># 指定模型标识符</span><br>repo_id = <span class="hljs-string">&quot;internlm/internlm2_5-7b&quot;</span><br><br><span class="hljs-comment"># 指定要下载的文件列表</span><br>files_to_download = [<br>    &#123;<span class="hljs-string">&quot;filename&quot;</span>: <span class="hljs-string">&quot;config.json&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;filename&quot;</span>: <span class="hljs-string">&quot;model.safetensors.index.json&quot;</span>&#125;<br>]<br><br><span class="hljs-comment"># 创建一个目录来存放下载的文件</span><br>local_dir = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;repo_id.split(<span class="hljs-string">&#x27;/&#x27;</span>)[<span class="hljs-number">1</span>]&#125;</span>&quot;</span><br>os.makedirs(local_dir, exist_ok=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 遍历文件列表并下载每个文件</span><br><span class="hljs-keyword">for</span> file_info <span class="hljs-keyword">in</span> files_to_download:<br>    file_path = hf_hub_download(<br>        repo_id=repo_id,<br>        filename=file_info[<span class="hljs-string">&quot;filename&quot;</span>],<br>        local_dir=local_dir<br>    )<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;file_info[<span class="hljs-string">&#x27;filename&#x27;</span>]&#125;</span> file downloaded to: <span class="hljs-subst">&#123;file_path&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行该文件，从HF中下载配置文件：</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031162626740.png" alt="image-20241031162626740"></p><h2 id="1-3-下载internlm2-5-chat-1-8b并打印示例输出"><a href="#1-3-下载internlm2-5-chat-1-8b并打印示例输出" class="headerlink" title="1.3 下载internlm2_5-chat-1_8b并打印示例输出"></a>1.3 下载internlm2_5-chat-1_8b并打印示例输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM<br><br>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;internlm/internlm2_5-1_8b&quot;</span>, trust_remote_code=<span class="hljs-literal">True</span>)<br>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;internlm/internlm2_5-1_8b&quot;</span>, torch_dtype=torch.float16, trust_remote_code=<span class="hljs-literal">True</span>)<br>model = model.<span class="hljs-built_in">eval</span>()<br><br>inputs = tokenizer([<span class="hljs-string">&quot;A beautiful flower&quot;</span>], return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)<br>gen_kwargs = &#123;<br>    <span class="hljs-string">&quot;max_length&quot;</span>: <span class="hljs-number">128</span>,<br>    <span class="hljs-string">&quot;top_p&quot;</span>: <span class="hljs-number">0.8</span>,<br>    <span class="hljs-string">&quot;temperature&quot;</span>: <span class="hljs-number">0.8</span>,<br>    <span class="hljs-string">&quot;do_sample&quot;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&quot;repetition_penalty&quot;</span>: <span class="hljs-number">1.0</span><br>&#125;<br><br><span class="hljs-comment"># 以下内容可选，如果解除注释等待一段时间后可以看到模型输出</span><br><span class="hljs-comment"># output = model.generate(**inputs, **gen_kwargs)</span><br><span class="hljs-comment"># output = tokenizer.decode(output[0].tolist(), skip_special_tokens=True)</span><br><span class="hljs-comment"># print(output)</span><br></code></pre></td></tr></table></figure><p>上述代码使用了internlm2_5-1_8b模型做了一个续写任务，输出如下：</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031163330437.png" alt="image-20241031163330437"></p><h2 id="1-4-Hugging-Face-Spaces的使用"><a href="#1-4-Hugging-Face-Spaces的使用" class="headerlink" title="1.4 Hugging Face Spaces的使用"></a>1.4 Hugging Face Spaces的使用</h2><p>Spaces (<a href="https://huggingface.co/spaces)%E4%BD%BF%E5%BE%97%E5%BC%80%E5%8F%91%E8%80%85%E5%8F%AF%E4%BB%A5%E5%BF%AB%E9%80%9F%E5%B0%86%E6%88%91%E4%BB%AC%E7%9A%84%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E4%B8%BA%E5%8F%AF%E4%BA%A4%E4%BA%92%E7%9A%84">https://huggingface.co/spaces)使得开发者可以快速将我们的模型部署为可交互的</a> web 应用，且无需担心后端基础设施或部署的复杂性。</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031165114773.png" alt="image-20241031165114773"></p><p>找到该目录文件夹下的index.html文件，修改我们的html代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My static Space<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">      <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">      <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-tag">iframe</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">430px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">932px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://colearn.intern-ai.org.cn/cobuild&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;description&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>保存后就可以push到远程仓库上了，它会自动更新页面:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git <span class="hljs-keyword">add</span> .<br>git commit -m <span class="hljs-string">&quot;update: colearn page&quot;</span><br>git <span class="hljs-keyword">push</span><br></code></pre></td></tr></table></figure><p>若报错：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">wendyflv: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@</span><span class="hljs-string">huggingface</span>.<span class="hljs-string">co</span>/<span class="hljs-string">spaces</span>/<span class="hljs-string">wendyflv</span>/<span class="hljs-string">intern_cobuild</span>/<br></code></pre></td></tr></table></figure><p>再次进入Space界面：</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031165637414.png" alt="image-20241031165637414"></p><h2 id="1-5-模型上传"><a href="#1-5-模型上传" class="headerlink" title="1.5 模型上传"></a>1.5 模型上传</h2><p>安装git lfs，对大文件系统支持：</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031165926736.png" alt="image-20241031165926736"></p><p>使用huggingface-cli login命令进行登录：</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031165952802.png" alt="image-20241031165952802"></p><p>创建项目intern_study_L0_4：</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031170507586.png" alt="image-20241031170507586"></p><p>创建README.md文件：</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031170546156.png" alt="image-20241031170546156"></p><p>用git提交到远程仓库：</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031170631343.png" alt="image-20241031170631343"></p><p>前往HF：<a href="https://huggingface.co/wendyflv/intern_study_L0_4">wendyflv&#x2F;intern_study_L0_4 · Hugging Face</a></p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031170703784.png" alt="image-20241031170703784"></p><h1 id="2-魔搭社区"><a href="#2-魔搭社区" class="headerlink" title="2. 魔搭社区"></a>2. 魔搭社区</h1><p><a href="https://www.modelscope.cn/home">魔搭社区</a>旨在汇集来自AI社区的最先进的机器学习模型，并简化在实际应用中使用AI模型的流程。通过ModelScope，用户可以轻松地探索、推理、微调和部署各种AI模型。</p><h2 id="2-1-下载模型"><a href="#2-1-下载模型" class="headerlink" title="2.1 下载模型"></a>2.1 下载模型</h2><p>安装下必要的包</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031180444568.png" alt="image-20241031180444568"></p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031180505282.png" alt="image-20241031180505282"></p><p>使用modelscope的cli工具来下载internlm2_5-7b-chat</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031180604187.png" alt="image-20241031180604187"></p><h2 id="2-2-上传模型"><a href="#2-2-上传模型" class="headerlink" title="2.2 上传模型"></a>2.2 上传模型</h2><p>先在魔搭社区创建一个新模型，命名intern_study_L0_4</p><p>下载该模型：</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031182307618.png" alt="image-20241031182307618"></p><p>进入README.md文件，修改</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031182401288.png" alt="image-20241031182401288"></p><p>然后提交</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031182428055.png" alt="image-20241031182428055"></p><p>这里报错，需要使用token作为密码</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031182450103.png" alt="image-20241031182450103"></p><p>上传成功！<a href="https://www.modelscope.cn/models/wendyflv/intern_study_L0_4">https://www.modelscope.cn/models/wendyflv/intern_study_L0_4</a></p><h1 id="3-魔乐社区"><a href="#3-魔乐社区" class="headerlink" title="3. 魔乐社区"></a>3. 魔乐社区</h1><p><a href="https://modelers.cn/">魔乐社区</a>是一个提供多样化、开源模型的平台，旨在促进开发者和研究人员在最先进的模型和流行应用上进行协作。</p><p>为模型文件创建目录：</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031184423849.png" alt="image-20241031184423849"></p><p>下载模型：</p><p><img src="/2024/10/31/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G4000%EF%BC%88%E7%8E%A9%E8%BD%ACHF-%E9%AD%94%E6%90%AD-%E9%AD%94%E4%B9%90%E7%A4%BE%E5%8C%BA%EF%BC%89/image-20241031184458874.png" alt="image-20241031184458874"></p><p>model-00001-of-00002.safetensors 这个文件没找到？</p><p>尝试手动下载，也不行？</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>书生大模型实战营——L0G3000（Git基础知识）</title>
    <link href="/2024/10/30/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G3000%EF%BC%88Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/"/>
    <url>/2024/10/30/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G3000%EF%BC%88Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Git基础知识"><a href="#1-Git基础知识" class="headerlink" title="1. Git基础知识"></a>1. Git基础知识</h1><p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 </p><h2 id="1-1-工作区、暂存区、Git仓库区"><a href="#1-1-工作区、暂存区、Git仓库区" class="headerlink" title="1.1 工作区、暂存区、Git仓库区"></a>1.1 工作区、暂存区、Git仓库区</h2><ul><li>工作区（Working Directory）： 当我们在本地创建一个 Git 项目，或者从 GitHub 上 clone 代码到本地后，项目所在的这个目录。</li><li>暂存区（Staging Area）： 暂存区是 Git 中独有的一个概念，位于 .git 目录中的一个索引文件，记录了下一次提交时将要存入仓库区的文件列表信息。使用 git add 指令可以将工作区的改动放入暂存区。</li><li>仓库区 &#x2F; 本地仓库（Repository）： 在项目目录中，.git 隐藏目录不属于工作区，而是 Git 的版本仓库。这个仓库区包含了所有历史版本的完整信息，是 Git 项目的“本体”。</li></ul><h2 id="1-2-简单入门"><a href="#1-2-简单入门" class="headerlink" title="1.2 简单入门"></a>1.2 简单入门</h2><ul><li><strong>Add</strong><ul><li>命令：<code>git add &lt;file&gt;</code> 或 <code>git add .</code></li><li>作用：将修改过的文件添加到本地暂存区（Staging Area），决定哪些修改应该被包括在即将进行的提交中。</li></ul></li><li><strong>Commit</strong><ul><li>命令：<code>git commit -m &#39;描述信息&#39;</code></li><li>作用：将暂存区中的更改提交到本地仓库。这一步是将你的更改正式记录下来，每次提交都应附带一个清晰的描述信息，说明这次提交的目的或所解决的问题。</li></ul></li><li><strong>Pull</strong><ul><li>命令：<code>git pull</code></li><li>作用：从远程仓库拉取最新的内容到本地仓库，并自动尝试合并到当前分支。</li><li>确保你的工作基于最新的项目状态进行。在多人协作中，定期拉取可以避免将来的合并冲突。</li></ul></li><li><strong>Push</strong><ul><li>命令：<code>git push</code></li><li>作用：将本地仓库的更改推送到远程仓库。这一步是共享你的工作成果，让团队成员看到你的贡献。</li></ul></li></ul><h1 id="2-任务"><a href="#2-任务" class="headerlink" title="2. 任务"></a>2. 任务</h1><h2 id="2-1-任务一：自我介绍"><a href="#2-1-任务一：自我介绍" class="headerlink" title="2.1 任务一：自我介绍"></a>2.1 任务一：自我介绍</h2><p>每位参与者提交一份自我介绍。 提交地址：<a href="https://github.com/InternLM/Tutorial">https://github.com/InternLM/Tutorial</a> 的 class 分支～</p><ul><li><p><strong>Step1</strong>：<strong>配置git并克隆项目到InternStudio本地</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">git clone git@github.com:Wendyflv/<span class="hljs-keyword">Tutorial</span>.git<br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">Tutorial</span>/<br>git branch -a<br>git checkout -b <span class="hljs-keyword">class</span> origin/<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="/2024/10/30/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G3000%EF%BC%88Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241030223632417.png" alt="image-20241030223632417"></p></li><li><p><strong>Step2</strong>：<strong>创建分支</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> class_1268<br></code></pre></td></tr></table></figure></li><li><p><strong>Step3</strong>：创建自己的介绍文件</p><p><img src="/2024/10/30/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G3000%EF%BC%88Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241030223738766.png" alt="image-20241030223738766"></p></li><li><p><strong>Step4</strong>：提交更改分支</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m &quot;add git_camp4_1268_introduction&quot;<br></code></pre></td></tr></table></figure></li><li><p><strong>Step5</strong>：推送分支到远程仓库</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> class_1268<br></code></pre></td></tr></table></figure></li><li><p><strong>Step6</strong>：检查提交内容</p><p><img src="/2024/10/30/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G3000%EF%BC%88Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241030223952057.png" alt="image-20241030223952057"></p><p>PR链接：<a href="https://github.com/InternLM/Tutorial/pull/2206">git_1268_introduction by Wendyflv · Pull Request #2206 · InternLM&#x2F;Tutorial</a></p></li></ul><h2 id="2-2-任务二-构建个人项目"><a href="#2-2-任务二-构建个人项目" class="headerlink" title="2.2 任务二: 构建个人项目"></a>2.2 任务二: 构建个人项目</h2><p>创建一个个人仓库，用于提交笔记、心得体会或分享项目。</p><p>直接new一个新的仓库，名为Tutorial_Study</p><p>仓库地址：<a href="https://github.com/Wendyflv/Tutorial_Study/">Wendyflv&#x2F;Tutorial_Study</a></p><p><img src="/2024/10/30/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G3000%EF%BC%88Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241030230223700.png" alt="image-20241030230223700"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVASE——网络编程</title>
    <link href="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、-网络编程概述"><a href="#一、-网络编程概述" class="headerlink" title="一、 网络编程概述"></a>一、 网络编程概述</h1><p>网络编程：编写的应用程序可以与网络上其他设备中的应用程序进行数据交互。</p><p>网路通信的基本架构：</p><ol><li><p>CS架构（Client&#x2F;Server）：</p><p>CS架构需要用户在自己的电脑或者手机上安装客户端软件，然后由客户端软件通过网络连接服务器程序，由服务器把数据发给客户端，客户端就可以在页面上看到各种数据了。</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668262460269.png" alt="1668262460269"></p></li><li><p>BS架构（Browser&#x2F;Server）：</p><p>BS架构不需要开发客户端软件，用户只需要通过浏览器输入网址就可以直接从服务器获取数据，并由服务器将数据返回给浏览器，用户在页面上就可以看到各种数据了。</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668262589242.png" alt="1668262589242"></p></li></ol><p>以后从事的工作方向主要还是BS架构的。</p><h1 id="二、-网络编程三要素"><a href="#二、-网络编程三要素" class="headerlink" title="二、 网络编程三要素"></a>二、 网络编程三要素</h1><p><strong>IP地址、端口号、通信协议</strong></p><ol><li>IP地址：设备在网络中的唯一标识</li><li>端口号：应用程序在设备中的唯一标识</li><li>协议：连接和数据在网络中的传输规则</li></ol><p>假设现在要从一台电脑中的微信上，发一句“你愁啥？”到其他电脑的微信上，流程如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>先通过ip地址找到对方的电脑<br><span class="hljs-number">2.</span>再通过端口号找到对方的电脑上的应用程序<br><span class="hljs-number">3.</span>按照双方约定好的规则发送、接收数据<br></code></pre></td></tr></table></figure><h2 id="2-1-IP地址"><a href="#2-1-IP地址" class="headerlink" title="2.1 IP地址"></a>2.1 IP地址</h2><p><strong>IP（Ineternet Protocol）全称互联网协议地址，是分配给网络设备的唯一表示。</strong>IP地址分为：IPV4地址、IPV6地址</p><p>PV4地址由32个比特位（4个字节）组成，采用点分十进制。经过不断的发展，现在越来越多的设备需要联网，IPV4地址已经不够用了，所以扩展出来了IPV6地址。IPV6采用128位二进制数据来表示（16个字节），号称可以为地球上的每一粒沙子编一个IP地址。</p><p><strong>域名</strong>：我们在浏览器上访问某一个网站是，就需要在浏览器的地址栏输入网址，这个网址的专业说法叫做域名。</p><p>域名和IP其实是一一对应的，由运营商来管理域名和IP的对应关系。我们在浏览器上敲一个域名时，首先由运营商的域名解析服务，把域名转换为ip地址，再通过IP地址去访问对应的服务器设备。</p><p>本地回环测试地址：<code>127.0.0.1</code></p><h2 id="2-2-InetAddress类"><a href="#2-2-InetAddress类" class="headerlink" title="2.2 InetAddress类"></a>2.2 InetAddress类</h2><p>Java中也有一个类用来表IP地址，这个类是InetAddress类</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668265337659.png" alt="1668265337659"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 获取本机IP地址对象</span><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">ip1</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();<br>System.out.println(ip1.getHostName());<br>System.out.println(ip1.getHostAdress());<br><br><span class="hljs-comment">// 2. 获取指定IP或者指定域名的IP地址对象</span><br><span class="hljs-type">InetAddress</span> <span class="hljs-variable">ip2</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>System.out.println(ip2.getHostName());<br>System.out.println(ip2.getHostAddress());<br><br><span class="hljs-comment">// 3. ping</span><br>System.out.println(ip2.isReachable(<span class="hljs-number">6000</span>));<br><br></code></pre></td></tr></table></figure><h2 id="2-3-端口号"><a href="#2-3-端口号" class="headerlink" title="2.3 端口号"></a>2.3 端口号</h2><p>端口号：指的是计算机设备上运行的应用程序的标识，被规定为一个16位的二进制数据，范围（0~65535）</p><p>同一个计算机设备中，不能出现两个应用程序，用同一个端口号</p><h2 id="2-4-协议"><a href="#2-4-协议" class="headerlink" title="2.4 协议"></a>2.4 协议</h2><p><strong>网络上通信的设备，事先规定的连接规则，以及传输数据的规则被称为网络通信协议。</strong></p><p>传输层有两个协议（UDP协议、TCP协议）</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668267975803.png" alt="1668267975803"></p><ul><li>UDP协议特点：</li></ul><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668268046104.png" alt="1668268046104"></p><ul><li><p>TCP协议特点：</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668268144938.png" alt="1668268144938"></p></li></ul><p>三次握手：目的是确认通信双方，收发消息都是正常没问题的</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668268174867.png" alt="1668268174867"></p><p>四次挥手：目的是确保双方数据的收发已经完成，没有数据丢失</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668268230804.png" alt="1668268230804"></p><h1 id="三、UDP通信"><a href="#三、UDP通信" class="headerlink" title="三、UDP通信"></a>三、UDP通信</h1><p>DatagramSocket类：完成基于UDP协议的收发数据，数据要以数据包的形式体现，一个数据包限制在64KB以内。</p><p>通信双方都需要有DatagramSocket(扔的行为)，还需要有DatagramPacket(装数据的包)</p><p>案例：需要有两个程序，一个表示客户端程序，一个表示服务端程序。需求：客户端程序发一个字符串数据给服务端，服务端程序接收数据并打印。</p><h2 id="3-1-客户端程序"><a href="#3-1-客户端程序" class="headerlink" title="3.1 客户端程序"></a>3.1 客户端程序</h2><p>数据bytes[] 装入 DatagramPacket packet</p><p>DatagramSocket socket 发送 packet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * UDP通信：C方发消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 创建客户端对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">7777</span>);<br><br>        <span class="hljs-comment">// 2. 创建数据包对象</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-string">&quot;我是客户端abc&quot;</span>.getBytes();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * public DatagramPacket(byte buf[], int length,</span><br><span class="hljs-comment">             InetAddress address, int port)</span><br><span class="hljs-comment">             参数一：封装要发出去的数据。</span><br><span class="hljs-comment">             参数二：发送出去的数据大小（字节个数）</span><br><span class="hljs-comment">             参数三：服务端的IP地址（找到服务端主机）</span><br><span class="hljs-comment">             参数四：服务端程序的端口。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length, InetAddress.getLocalHost(), <span class="hljs-number">6666</span>);<br>        <br>        <span class="hljs-comment">// 3. 发送数据包</span><br>        socket.send(packet);<br><br>        System.out.println(<span class="hljs-string">&quot;客户端数据发送完毕&quot;</span>);<br>        socket.close();<br><br><br><br><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-2-服务端程序"><a href="#3-2-服务端程序" class="headerlink" title="3.2 服务端程序"></a>3.2 服务端程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 1. 创建服务端对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">6666</span>);<br>        <span class="hljs-comment">// 2. 创建数据包对象，接收数据</span><br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">64</span>]; <span class="hljs-comment">// 64kB</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buffer, buffer.length);<br>        <span class="hljs-comment">// 3. 接收数据</span><br>        socket.receive(packet);<br>        <span class="hljs-comment">// 4. 从数组中把接收的数据打印出来</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer, <span class="hljs-number">0</span>, len);<br>        System.out.println(res);<br>        System.out.println(packet.getAddress().getHostAddress());<br>        System.out.println(packet.getPort());<br>        socket.close();<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20241031203740158.png" alt="image-20241031203740158"></p><h1 id="四、UDP通信（多发多收）"><a href="#四、UDP通信（多发多收）" class="headerlink" title="四、UDP通信（多发多收）"></a>四、UDP通信（多发多收）</h1><p>需求：实现客户端不断的发数据，而服务端能不断的接收数据，客户端发送exit时客户端程序退出。</p><h2 id="4-1-客户端程序"><a href="#4-1-客户端程序" class="headerlink" title="4.1 客户端程序"></a>4.1 客户端程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.sound.midi.Soundbank;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * UDP通信：C方发消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 创建客户端对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">7777</span>);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;请说：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>            <span class="hljs-comment">//若输入exit，退出客户端</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg))&#123;<br>                System.out.println(<span class="hljs-string">&quot;通信结束！&quot;</span>);<br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 2. 创建数据包对象</span><br>            <span class="hljs-type">byte</span>[] bytes = msg.getBytes();<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length, InetAddress.getLocalHost(), <span class="hljs-number">6666</span>);<br><br>            <span class="hljs-comment">// 3. 发送数据包</span><br>            socket.send(packet);<br><br>            System.out.println(<span class="hljs-string">&quot;客户端数据发送中&quot;</span>);<br><br>        &#125;<br><br><br><br><br><br><br><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-2-服务端程序"><a href="#4-2-服务端程序" class="headerlink" title="4.2 服务端程序"></a>4.2 服务端程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// 1. 创建服务端对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">6666</span>);<br>        <span class="hljs-comment">// 2. 创建数据包对象，接收数据</span><br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>*<span class="hljs-number">64</span>]; <span class="hljs-comment">// 64kB</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buffer, buffer.length);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br>            <span class="hljs-comment">// 3. 接收数据</span><br>            socket.receive(packet);<br>            <span class="hljs-comment">// 4. 从数组中把接收的数据打印出来</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer, <span class="hljs-number">0</span>, len);<br>            System.out.println(res);<br>            System.out.println(packet.getAddress().getHostAddress());<br>            System.out.println(packet.getPort());<br>            System.out.println(<span class="hljs-string">&quot;--------------------------------------&quot;</span>);<br><br>        &#125;<br><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>客户端：</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20241031204642856.png" alt="image-20241031204642856"></p><p>服务端：</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20241031204705996.png" alt="image-20241031204705996"></p><h1 id="五、TCP通信（一发一收）"><a href="#五、TCP通信（一发一收）" class="headerlink" title="五、TCP通信（一发一收）"></a>五、TCP通信（一发一收）</h1><p>Java提供了一个java.net.Socket类来完成TCP通信。</p><ol><li>当创建Socket对象时，就会在客户端和服务端创建一个数据通信的管道，在客户端和服务端两边都会有一个Socket对象来访问这个通信管道。</li><li>现在假设客户端要发送一个“在一起”给服务端，客户端这边先需要通过Socket对象获取到一个字节输出流，通过字节输出流写数据到服务端</li><li>然后服务端这边通过Socket对象可以获取字节输入流，通过字节输入流就可以读取客户端写过来的数据，并对数据进行处理。</li><li>服务端处理完数据之后，假设需要把“没感觉”发给客户端端，那么服务端这边再通过Socket获取到一个字节输出流，将数据写给客户端</li><li>客户端这边再获取输入流，通过字节输入流来读取服务端写过来的数据。</li></ol><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668270124031.png" alt="1668270124031"></p><h2 id="5-1-TCP客户端"><a href="#5-1-TCP客户端" class="headerlink" title="5.1 TCP客户端"></a>5.1 TCP客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 创建socket对象，并同时请求与服务端连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br>        <span class="hljs-comment">// 2. 从socket通信管道里得到一个字节输出流，用于发送数据到服务端</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">// 3. 把字节输出流包装成数据输出流</span><br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>        <span class="hljs-comment">// 4. 写数据出去</span><br>        dos.writeUTF(<span class="hljs-string">&quot;hello&quot;</span>);<br>        dos.close();<br>        socket.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-2-TCP服务端"><a href="#5-2-TCP服务端" class="headerlink" title="5.2 TCP服务端"></a>5.2 TCP服务端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 创建ServerSocket对象，同时为服务端注册端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br>        <span class="hljs-comment">// 2. 等待客户端请求</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>        <span class="hljs-comment">// 3. 从socket中得到字节输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-comment">// 4. 封装成数据输入流</span><br>        <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>        <span class="hljs-comment">// 5. 读取数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> dis.readUTF();<br>        System.out.println(rs);<br>        System.out.println(socket.getRemoteSocketAddress());<br><br>        dis.close();<br>        socket.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="六、TCP通信（多发多收）"><a href="#六、TCP通信（多发多收）" class="headerlink" title="六、TCP通信（多发多收）"></a>六、TCP通信（多发多收）</h1><p>把客户端代码改写一下，采用键盘录入的方式发消息，为了让客户端能够一直发，我们只需要将发送消息的代码套一层循环就可以了，当用户输入exit时，客户端退出循环并结束客户端。</p><h2 id="6-1-TCP客户端"><a href="#6-1-TCP客户端" class="headerlink" title="6.1 TCP客户端"></a>6.1 TCP客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 创建socket对象，并同时请求与服务端连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br>        <span class="hljs-comment">// 2. 从socket通信管道里得到一个字节输出流，用于发送数据到服务端</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>        <span class="hljs-comment">// 3. 把字节输出流包装成数据输出流</span><br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;请说：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;exit&quot;</span>.equals(msg))&#123;<br>                System.out.println(<span class="hljs-string">&quot;通信结束！&quot;</span>);<br>                dos.close();<br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">// 4. 写数据出去</span><br>            dos.writeUTF(msg);<br>            dos.flush();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-2-TCP服务端"><a href="#6-2-TCP服务端" class="headerlink" title="6.2 TCP服务端"></a>6.2 TCP服务端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 创建ServerSocket对象，同时为服务端注册端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br>        <span class="hljs-comment">// 2. 等待客户端请求</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>        <span class="hljs-comment">// 3. 从socket中得到字节输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>        <span class="hljs-comment">// 4. 封装成数据输入流</span><br>        <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> dis.readUTF();<br>                System.out.println(rs);<br><br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;离线了&quot;</span>);<br>                dis.close();<br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="七、TCP通信（多线程改进）"><a href="#七、TCP通信（多线程改进）" class="headerlink" title="七、TCP通信（多线程改进）"></a>七、TCP通信（多线程改进）</h1><h2 id="7-1-多线程改进"><a href="#7-1-多线程改进" class="headerlink" title="7.1 多线程改进"></a>7.1 多线程改进</h2><p>为了让服务端能够支持多个客户端通信，就需要用到多线程技术。</p><p>每当有一个客户端连接服务端，在服务端这边就为Socket开启一条线程取执行读取数据的操作，来多少个客户端，就有多少条线程。</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668315156739.png" alt="1668315156739"></p><p>服务端读取数据的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReaderThread</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span>  <span class="hljs-operator">=</span> dis.readUTF();<br>                    System.out.println(msg);<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                    System.out.println(<span class="hljs-string">&quot;有人下线了：&quot;</span>+socket.getRemoteSocketAddress());<br>                    dis.close();<br>                    socket.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>服务端主程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1. 创建ServerSocket对象，同时为服务端注册端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">// 2. 等待客户端请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>            System.out.println(<span class="hljs-string">&quot;有人上线了：&quot;</span>+socket.getRemoteSocketAddress());<br><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReaderThread</span>(socket).start();<br><br>        &#125;<br><br><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="八、BS架构程序"><a href="#八、BS架构程序" class="headerlink" title="八、BS架构程序"></a>八、BS架构程序</h1><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668316417640.png" alt="1668316417640"></p><p>在BS结构的程序中，浏览器和服务器通信是基于HTTP协议来完成的，浏览器给客户端发送数据需要按照HTTP协议规定好的数据格式发给服务端，服务端返回数据时也需要按照HTTP协议规定好的数据给是发给浏览器，只有这两双方才能完成一次数据交互。</p><p>HTTP协议格式：</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1668316630797.png" alt="1668316630797"></p><h2 id="8-1-服务端程序"><a href="#8-1-服务端程序" class="headerlink" title="8.1 服务端程序"></a>8.1 服务端程序</h2><p>先写一个线程类，用于按照HTTP协议的格式返回数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReadThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReadThread1</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//响应：”黑马程序员“给浏览器</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            ps.println(<span class="hljs-string">&quot;HTTP/1.1 200 OK&quot;</span>);<br>            ps.println(<span class="hljs-string">&quot;Content-Type:text/html;charset=UTF-8&quot;</span>);<br>            ps.println();<br>            ps.println(<span class="hljs-string">&quot;&lt;div style=&#x27;color:red;font-size:120px;text-align:center&#x27;&gt;黑马程序员&lt;div&gt;&quot;</span>);<br>            ps.close();<br>            socket.close();<br><br><br><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>服务端主程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8088</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            System.out.println(<span class="hljs-string">&quot;有人上线了：&quot;</span>+socket.getRemoteSocketAddress());<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReadThread1</span>(socket).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="8-2-服务端主程序用线程池改进"><a href="#8-2-服务端主程序用线程池改进" class="headerlink" title="8.2 服务端主程序用线程池改进"></a>8.2 服务端主程序用线程池改进</h2><p>先写一个给浏览器响应数据的线程任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReaderRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReaderRunnable</span><span class="hljs-params">(Socket socket)</span>&#123;<br>        <span class="hljs-built_in">this</span>.socket = socket;<br>        <br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            ps.println(<span class="hljs-string">&quot;HTTP/1.1 200 OK&quot;</span>);<br>            ps.println(<span class="hljs-string">&quot;Content-Type:text/html;charset=UTF-8&quot;</span>);<br>            ps.println(); <span class="hljs-comment">// 必须换行</span><br>            ps.println(<span class="hljs-string">&quot;&lt;div style=&#x27;color:red;font-size:120px;text-align:center&#x27;&gt;黑马程序员666&lt;div&gt;&quot;</span>);<br>            ps.close();<br>            socket.close();<br><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>服务端的主程序，使用ThreadPoolExecutor创建一个线程池，每次接收到一个Socket就往线程池中提交任务就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server4</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8088</span>);<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">16</span>*<span class="hljs-number">2</span>, <span class="hljs-number">16</span>*<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">8</span>),<br>                Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReaderRunnable</span>(socket));<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVASE——集合进阶（异常</title>
    <link href="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88%E5%BC%82%E5%B8%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/"/>
    <url>/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88%E5%BC%82%E5%B8%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="一、异常"><a href="#一、异常" class="headerlink" title="一、异常"></a>一、异常</h1><h2 id="1-1-异常"><a href="#1-1-异常" class="headerlink" title="1.1 异常"></a>1.1 异常</h2><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88%E5%BC%82%E5%B8%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/1667313423356.png" alt="1667313423356"></p><p>解决方案：</p><ul><li><p>第一种：抛出异常，使用throws在方法上声明，意思就是告诉下一个调用者，这里面可能有异常啊，你调用时注意一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：认识异常。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException&#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2028-11-11 10:24&quot;</span>);<br>        System.out.println(d);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>第二种：try…catch捕获异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>            <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2028-11-11 10:24&quot;</span>);<br>            System.out.println(d);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="1-2-自定义异常"><a href="#1-2-自定义异常" class="headerlink" title="1.2 自定义异常"></a>1.2 自定义异常</h2><p>写一个saveAge(int age)方法，在方法中对参数age进行判断，如果age&lt;0或者&gt;&#x3D;150就认为年龄不合法，如果年龄不合法，就给调用者抛出一个年龄非法异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        saveAge(<span class="hljs-number">223</span>);<br>    &#125;<span class="hljs-keyword">catch</span>(AgeIllegalException e)&#123;<br>        e.printStackTrace();<br>        System.out.println(<span class="hljs-string">&quot;saveAge2底层执行是出现bug的！&quot;</span>);<br>    &#125;<br>    <br>   <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>    <span class="hljs-keyword">if</span>(age &gt; <span class="hljs-number">0</span> &amp;&amp; age &lt; <span class="hljs-number">150</span>)&#123;<br>        sout(<span class="hljs-string">&quot;年龄保存成功： &quot;</span>+ age);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeIllegalRuntimeException</span>(<span class="hljs-string">&quot;/age is illegal, your age is &quot;</span> + age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、集合概述和分类"><a href="#二、集合概述和分类" class="headerlink" title="二、集合概述和分类"></a>二、集合概述和分类</h1><h2 id="2-1-集合的分类"><a href="#2-1-集合的分类" class="headerlink" title="2.1 集合的分类"></a>2.1 集合的分类</h2><p>集合有：set, Map, List, ArrayList, LinkedList, Collection, HashMap, TreeMap, TreeSet,..</p><p>分类：一类是单列集合元素是一个一个的，另一类是双列集合元素是一对一对的。</p><p>Collection是单列集合的根接口，Collection接口下面又有两个子接口List接口、Set接口，List和Set下面分别有不同的实现类，如下图所示：</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88%E5%BC%82%E5%B8%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/1666155169359.png" alt="1666155169359"></p><ul><li><p>List：添加的元素是有序的，可重复的，有索引</p></li><li><p>Set：添加的元素是无序的，不重复，有索引</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88%E5%BC%82%E5%B8%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/1666155218956.png" alt="1666155218956"></p></li></ul><h2 id="2-2-Collection集合常用方法"><a href="#2-2-Collection集合常用方法" class="headerlink" title="2.2 Collection集合常用方法"></a>2.2 Collection集合常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">// 1. add(E e);</span><br>c.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>c.add(<span class="hljs-string">&quot;java3&quot;</span>);<br>System.out.println(c); <span class="hljs-comment">//打印: [java1, java1, java2, java2, java3]</span><br><br><span class="hljs-comment">// 2. size();</span><br>System.out.println(c.size()); <span class="hljs-comment">//5</span><br><br><span class="hljs-comment">// 3. contains(obj);</span><br>System.out.println(c.contains(<span class="hljs-string">&quot;java1&quot;</span>)); <span class="hljs-comment">//true</span><br>System.out.println(c.contains(<span class="hljs-string">&quot;Java1&quot;</span>)); <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">// 5. remove(E e);</span><br>System.out.println(c.remove(<span class="hljs-string">&quot;java1&quot;</span>)); <span class="hljs-comment">//true</span><br>System.out.println(c); <span class="hljs-comment">//打印: [java1,java2, java2, java3]</span><br><br><span class="hljs-comment">// 6. clear();</span><br>c.clear(); <br>System.out.println(c); <span class="hljs-comment">//打印：[]</span><br><br><span class="hljs-comment">// 7. isEmpty();</span><br>System.out.println(c.isEmpty()); <span class="hljs-comment">//true</span><br><br><span class="hljs-comment">// 8. toArray();</span><br>Object[] array = c.toArray();<br>System.out.println(Arrays.toString(array)); <span class="hljs-comment">//[java1,java2, java2, java3]</span><br><br><span class="hljs-comment">// 9. c1.AddAll(c2)</span><br>Collection&lt;String&gt; c1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c1.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>c1.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>Collection&lt;String&gt; c2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c2.add(<span class="hljs-string">&quot;java3&quot;</span>);<br>c2.add(<span class="hljs-string">&quot;java4&quot;</span>);<br>c1.addAll(c2); <span class="hljs-comment">//把c2集合中的全部元素，添加到c1集合中去</span><br>System.out.println(c1); <span class="hljs-comment">//[java1, java2, java3, java4]</span><br><br><br></code></pre></td></tr></table></figure><h1 id="三、遍历方式"><a href="#三、遍历方式" class="headerlink" title="三、遍历方式"></a>三、遍历方式</h1><p>for循环遍历需要索引，只有List集合有索引，而Set集合没有索引。</p><h2 id="3-1-迭代器遍历集合"><a href="#3-1-迭代器遍历集合" class="headerlink" title="3.1 迭代器遍历集合"></a>3.1 迭代器遍历集合</h2><p>迭代器就是一种集合的通用遍历方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c.add(<span class="hljs-string">&quot;aka&quot;</span>);<br>c.add(<span class="hljs-string">&quot;kafka&quot;</span>);<br>c.add(<span class="hljs-string">&quot;hadoop&quot;</span>);<br><br><span class="hljs-comment">// 获取迭代器对象</span><br>Iterator&lt;String&gt; it = c.iterator();<br><span class="hljs-comment">// hasNext()判断当前位置是否有元素可获取 </span><br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> it.next();<span class="hljs-comment">//调用next()方法获取元素，并将当月元素指向下一个位置，</span><br>    System.out.println(e);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88%E5%BC%82%E5%B8%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/1666162899638.png" alt="1666162899638"></p><h2 id="3-2-增强for遍历集合"><a href="#3-2-增强for遍历集合" class="headerlink" title="3.2 增强for遍历集合"></a>3.2 增强for遍历集合</h2><p><code>for(数据类型 变量名 : 数组或集合)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c.add(<span class="hljs-string">&quot;赵敏&quot;</span>);<br>c.add(<span class="hljs-string">&quot;小昭&quot;</span>);<br>c.add(<span class="hljs-string">&quot;素素&quot;</span>);<br>c.add(<span class="hljs-string">&quot;灭绝&quot;</span>);<br><br><span class="hljs-comment">//1.使用增强for遍历集合</span><br><span class="hljs-keyword">for</span>(String s: c)&#123;<br>    System.out.println(s); <br>&#125;<br><br><span class="hljs-comment">//2.再尝试使用增强for遍历数组</span><br>String[] arr = &#123;<span class="hljs-string">&quot;迪丽热巴&quot;</span>, <span class="hljs-string">&quot;古力娜扎&quot;</span>, <span class="hljs-string">&quot;稀奇哈哈&quot;</span>&#125;;<br><span class="hljs-keyword">for</span>(String name: arr)&#123;<br>    System.out.println(name);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-forEach遍历集合"><a href="#3-3-forEach遍历集合" class="headerlink" title="3.3 forEach遍历集合"></a>3.3 forEach遍历集合</h2><p>forEach方法的参数是一个Consumer接口，而Consumer是一个函数式接口，所以可以传递Lambda表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>c.add(<span class="hljs-string">&quot;赵敏&quot;</span>);<br>c.add(<span class="hljs-string">&quot;小昭&quot;</span>);<br>c.add(<span class="hljs-string">&quot;素素&quot;</span>);<br>c.add(<span class="hljs-string">&quot;灭绝&quot;</span>);<br><br><span class="hljs-comment">//调用forEach方法</span><br><span class="hljs-comment">//由于参数是一个Consumer接口，所以可以传递匿名内部类</span><br>c.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;String&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String s)</span>&#123;<br>        System.out.println(s);<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-comment">//也可以使用lambda表达式对匿名内部类进行简化</span><br>c.forEach(s-&gt;System.out.println(s)); <span class="hljs-comment">//[赵敏, 小昭, 素素, 灭绝]</span><br></code></pre></td></tr></table></figure><h1 id="四、List系列集合"><a href="#四、List系列集合" class="headerlink" title="四、List系列集合"></a>四、List系列集合</h1><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88%E5%BC%82%E5%B8%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/1666165150752.png" alt="1666165150752"></p><h2 id="4-1-常用方法"><a href="#4-1-常用方法" class="headerlink" title="4.1 常用方法"></a>4.1 常用方法</h2><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B6%EF%BC%88%E5%BC%82%E5%B8%B8%E3%80%81%E9%9B%86%E5%90%88%EF%BC%89/1666165187815.png" alt="1666165187815"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 创建ArrayList集合对象</span><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;蜘蛛精&quot;</span>);<br>list.add(<span class="hljs-string">&quot;至尊宝&quot;</span>);<br>list.add(<span class="hljs-string">&quot;至尊宝&quot;</span>);<br>list.add(<span class="hljs-string">&quot;牛夫人&quot;</span>); <br><br><span class="hljs-comment">//2.public void add(int index, E element): 在某个索引位置插入元素</span><br>list.add(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;紫霞仙子&quot;</span>);<br>System.out.println(list);<br><br><span class="hljs-comment">//3.public E remove(int index): 根据索引删除元素, 返回被删除的元素</span><br>System.out.println(list.remove(<span class="hljs-number">2</span>)); <span class="hljs-comment">//紫霞仙子</span><br>System.out.println(list);<span class="hljs-comment">//[蜘蛛精, 至尊宝, 至尊宝, 牛夫人]</span><br><br><span class="hljs-comment">//4.public E get(int index): 返回集合中指定位置的元素</span><br>System.out.println(list.get(<span class="hljs-number">3</span>));<br><br><span class="hljs-comment">//5.public E set(int index, E e): 修改索引位置处的元素，修改后，会返回原数据</span><br>System.out.println(list.set(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;牛魔王&quot;</span>)); <span class="hljs-comment">//牛夫人</span><br>System.out.println(list); <span class="hljs-comment">//[蜘蛛精, 至尊宝, 至尊宝, 牛魔王</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVASE——常用API</title>
    <link href="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8API/"/>
    <url>/2024/10/29/JAVASE%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8API/</url>
    
    <content type="html"><![CDATA[<h1 id="一、StringBuilder类"><a href="#一、StringBuilder类" class="headerlink" title="一、StringBuilder类"></a>一、StringBuilder类</h1><p>StringBuilder代表可变字符串对象，相当于是一个容器，它里面的字符串是可以改变的，就是用来操作字符串的。</p><h2 id="1-1-使用方法"><a href="#1-1-使用方法" class="headerlink" title="1.1 使用方法"></a>1.1 使用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;abcs&quot;</span>);<br><span class="hljs-comment">// 1. 拼接内容</span><br>s.append(<span class="hljs-number">12</span>);<br>s.append(<span class="hljs-string">&quot;黑马&quot;</span>);<br>s.append(<span class="hljs-number">666</span>).append(<span class="hljs-string">&quot;黑马&quot;</span>)<br><span class="hljs-comment">// 2. 反转操作</span><br>s.reverse();<br><span class="hljs-comment">// 3. 返回字符串长度</span><br>s.length();<br></code></pre></td></tr></table></figure><h2 id="1-2-应用案例"><a href="#1-2-应用案例" class="headerlink" title="1.2 应用案例"></a>1.2 应用案例</h2><p>将int数组转换为指定格式的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> getArrayData( <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>&#125;);<br>        System.out.println(str);<br>    &#125;<br>    <br>    <span class="hljs-comment">//方法作用：将int数组转换为指定格式的字符串</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getArrayData</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-comment">//1.判断数组是否为null</span><br>        <span class="hljs-keyword">if</span>(arr==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//2.如果数组不为null，再遍历，并拼接数组中的元素</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;[&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i==arr.legnth-<span class="hljs-number">1</span>)&#123;<br>                sb.append(arr[i]).append(<span class="hljs-string">&quot;]&quot;</span>);;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                sb.append(arr[i]).append(<span class="hljs-string">&quot;,&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//3、把StirngBuilder转换为String，并返回。</span><br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、StringJoiner类"><a href="#二、StringJoiner类" class="headerlink" title="二、StringJoiner类"></a>二、StringJoiner类</h1><p>StringJoiner号称是拼接神器，不仅效率高，而且代码简洁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">StringJoiner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>        s.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>        s.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>        s.add(<span class="hljs-string">&quot;java3&quot;</span>);<br>        System.out.println(s); <span class="hljs-comment">//结果为： java1,java2,java3</span><br>        <br>        <span class="hljs-comment">//参数1：间隔符</span><br>        <span class="hljs-comment">//参数2：开头</span><br>        <span class="hljs-comment">//参数3：结尾</span><br>        <span class="hljs-type">StringJoiner</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>);<br>        s1.add(<span class="hljs-string">&quot;java1&quot;</span>);<br>        s1.add(<span class="hljs-string">&quot;java2&quot;</span>);<br>        s1.add(<span class="hljs-string">&quot;java3&quot;</span>);<br>        System.out.println(s1); <span class="hljs-comment">//结果为： [java1,java2,java3]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、Arrays类"><a href="#三、Arrays类" class="headerlink" title="三、Arrays类"></a>三、Arrays类</h1><p>Arrays是操作数组的工具类，它可以很方便的对数组中的元素进行遍历、拷贝、排序等操作。</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8API/1667458681721.png" alt="1667458681721"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标：掌握Arrays类的常用方法。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArraysTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1、public static String toString(类型[] arr): 返回数组的内容</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>&#125;;<br>        System.out.println(Arrays.toString(arr));<br><br>        <span class="hljs-comment">// 2、public static 类型[] copyOfRange(类型[] arr, 起始索引, 结束索引) ：拷贝数组（指定范围，包前不包后）</span><br>        <span class="hljs-type">int</span>[] arr2 = Arrays.copyOfRange(arr, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>        System.out.println(Arrays.toString(arr2));<br><br>        <span class="hljs-comment">// 3、public static copyOf(类型[] arr, int newLength)：拷贝数组，可以指定新数组的长度。</span><br>        <span class="hljs-type">int</span>[] arr3 = Arrays.copyOf(arr, <span class="hljs-number">10</span>);<br>        System.out.println(Arrays.toString(arr3));<br><br>        <span class="hljs-comment">// 4、public static setAll(double[] array, IntToDoubleFunction generator)：把数组中的原数据改为新数据又存进去。</span><br>        <span class="hljs-type">double</span>[] prices = &#123;<span class="hljs-number">99.8</span>, <span class="hljs-number">128</span>, <span class="hljs-number">100</span>&#125;;<br>        <span class="hljs-comment">//                  0     1    2</span><br>        <span class="hljs-comment">// 把所有的价格都打八折，然后又存进去。</span><br>        Arrays.setAll(prices, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntToDoubleFunction</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">applyAsDouble</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>                <span class="hljs-comment">// value = 0  1  2</span><br>                <span class="hljs-keyword">return</span> prices[value] * <span class="hljs-number">0.8</span>;<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(prices));<br><br>        <span class="hljs-comment">// 5、public static void sort(类型[] arr)：对数组进行排序(默认是升序排序)</span><br>        Arrays.sort(prices);<br>        System.out.println(Arrays.toString(prices));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，想对Student类的一些对象排序，两种方法：</p><ul><li><p>方法一：让Student类实现Comparable接口，同时重写compareTo方法。Arrays的sort方法底层会根据compareTo方法的返回值是正数、负数、还是0来确定谁大、谁小、谁相等。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt;&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-comment">// 指定比较规则</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span>&#123;<br>    <span class="hljs-comment">// 认为左边对象 大于 右边对象 请您返回正整数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age;<span class="hljs-comment">//按照年龄升序排序</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方法二：在调用<code>Arrays.sort(数组,Comparator比较器);</code>时，除了传递数组之外，传递一个Comparator比较器对象。Arrays的sort方法底层会根据Comparator比较器对象的compare方法方法的返回值是正数、负数、还是0来确定谁大、谁小、谁相等。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(students, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;())&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span>&#123;<br>       <span class="hljs-keyword">return</span> Double.compare(o1.getHeight(), o2.getHeight()); <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="四、Lambda表达式"><a href="#四、Lambda表达式" class="headerlink" title="四、Lambda表达式"></a>四、Lambda表达式</h1><p>作用：用于简化匿名内部类代码的书写。</p><p>在使用Lambda表达式之前，必须先有一个接口，而且接口中<strong>只能有一个抽象方法</strong>。<strong>（注意：不能是抽象类，只能是接口）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：认识Lambda表达式.</span><br>        <span class="hljs-comment">//1.创建一个Swimming接口的匿名内部类对象</span><br><span class="hljs-type">Swimming</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swimming</span>()&#123;<br>             <span class="hljs-meta">@Override</span><br>             <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swim</span><span class="hljs-params">()</span> &#123;<br>                 System.out.println(<span class="hljs-string">&quot;学生快乐的游泳~~~~&quot;</span>);<br>             &#125;<br>         &#125;;<br>         s.swim();<br><br>        <span class="hljs-comment">//2.使用Lambda表达式对Swimming接口的匿名内部类进行简化</span><br>        <span class="hljs-type">Swimming</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>              System.out.println(<span class="hljs-string">&quot;学生快乐的游泳~~~~&quot;</span>);<br>        &#125;;<br>        s1.swim();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用lambda表达式重新写排序方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(students, (Student o1, Student O2) -&gt; &#123;<br>    <span class="hljs-keyword">return</span> Double.compare(o1.getHeight() , o2.getHeight());&#125;);<br></code></pre></td></tr></table></figure><h1 id="五、正则表达式"><a href="#五、正则表达式" class="headerlink" title="五、正则表达式"></a>五、正则表达式</h1><p><strong>正则表达式其实是由一些特殊的符号组成的，它代表的是某种规则。</strong></p><blockquote><p>正则表达式的作用1：用来校验字符串数据是否合法</p><p>正则表达式的作用2：可以从一段文本中查找满足要求的内容</p></blockquote><p><code>matches(String regex)</code>。这个方法是属于String类的方法。</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8API/1667469259345.png" alt="1667469259345"></p><p>举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 匹配单个字符类</span><br><span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;[abc]&quot;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-string">&quot;e&quot;</span>.matches(<span class="hljs-string">&quot;[^abc]&quot;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-string">&quot;a&quot;</span>.matches([<span class="hljs-string">&quot;a-zA-Z&quot;</span>]); <span class="hljs-comment">//true</span><br><span class="hljs-string">&quot;k&quot;</span>.matches(<span class="hljs-string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>); <span class="hljs-comment">//true</span><br><span class="hljs-comment">// 2. 匹配单个预定义字符 </span><br><span class="hljs-string">&quot;许&quot;</span>.matches(<span class="hljs-string">&quot;.&quot;</span>) ;<span class="hljs-comment">// &quot;.&quot;可以匹配任意字符</span><br><span class="hljs-string">&quot;3&quot;</span>.matches(<span class="hljs-string">&quot;\\d&quot;</span>); <span class="hljs-comment">// &quot;\d&quot;可以匹配[0,9]的数字</span><br><span class="hljs-string">&quot;d&quot;</span>.matches(<span class="hljs-string">&quot;\\D&quot;</span>); <span class="hljs-comment">// &quot;\D&quot;匹配非数字</span><br><span class="hljs-string">&quot; &quot;</span>.matches(<span class="hljs-string">&quot;\s&quot;</span>); <span class="hljs-comment">// &quot;\s&quot;匹配一个空白字符</span><br><span class="hljs-string">&quot;s&quot;</span>.matches(<span class="hljs-string">&quot;\\w&quot;</span>); <span class="hljs-comment">// &quot;\w&quot;匹配[a-zA-Z0-9]</span><br><span class="hljs-comment">// 3. 数量词</span><br><span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;\\w?&quot;</span>); <span class="hljs-comment">// ? 一次或者0次</span><br><span class="hljs-string">&quot;abc12&quot;</span>.matches(<span class="hljs-string">&quot;\\w*&quot;</span>); <span class="hljs-comment">// * 0次或者多次</span><br><span class="hljs-string">&quot;abc12&quot;</span>.matches(<span class="hljs-string">&quot;\\w+&quot;</span>); <span class="hljs-comment">// + 1次获多次</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象高级（三）</title>
    <link href="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象高级（三）"><a href="#面向对象高级（三）" class="headerlink" title="面向对象高级（三）"></a>面向对象高级（三）</h1><h2 id="一、内部类"><a href="#一、内部类" class="headerlink" title="一、内部类"></a>一、内部类</h2><p> 内部类：类中的五大成分之一（成员变量、方法、构造器、内部类、代码块），如果一个类定义在另一个类的内部，这个类就是内部类。</p><p>内部类有四种形式，分别是成员内部类、静态内部类、局部内部类、匿名内部类。</p><h3 id="1-1-成员内部类"><a href="#1-1-成员内部类" class="headerlink" title="1.1 成员内部类"></a>1.1 成员内部类</h3><p>成员内部类就是类中的一个普通成员，类似于成员变量、成员方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String a=<span class="hljs-string">&quot;黑马&quot;</span>;<br><br>    <span class="hljs-comment">// 成员内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span>  <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">88</span>;<br><br>        <span class="hljs-comment">//在内部类中既可以访问自己类的成员，也可以访问外部类的成员</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(age); <span class="hljs-comment">//88</span><br>            System.out.println(a);   <span class="hljs-comment">//黑马</span><br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">77</span>;<br>            System.out.println(age); <span class="hljs-comment">//77</span><br>            System.out.println(<span class="hljs-built_in">this</span>.age); <span class="hljs-comment">//88</span><br>            System.out.println(Outer.<span class="hljs-built_in">this</span>.age); <span class="hljs-comment">//99</span><br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> age;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建对象格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//外部类.内部类 变量名 = new 外部类().new 内部类();</span><br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>().<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br><span class="hljs-comment">//调用内部类的方法</span><br>in.test();<br></code></pre></td></tr></table></figure><p>总结一下内部类访问成员的特点</p><ul><li>既可以访问内部类成员、也可以访问外部类成员</li><li>如果内部类成员和外部类成员同名，可以使用**<code>类名.this.成员</code>**区分</li></ul><h3 id="1-2-静态内部类"><a href="#1-2-静态内部类" class="headerlink" title="1.2 静态内部类"></a>1.2 静态内部类</h3><p>在成员内部类的前面加了一个static关键字。静态内部类属于外部类自己持有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String schoolName=<span class="hljs-string">&quot;黑马&quot;</span>;<br><br>    <span class="hljs-comment">// 静态内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-comment">//静态内部类访问外部类的静态变量，是可以的；</span><br>        <span class="hljs-comment">//静态内部类访问外部类的实例变量，是不行的</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(schoolName); <span class="hljs-comment">//99</span><br>            <span class="hljs-comment">//System.out.println(age);   //报错</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要使用外部类的类名调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//格式：外部类.内部类 变量名 = new 外部类.内部类();</span><br>Outer.<span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.Inner();<br>in.test();<br></code></pre></td></tr></table></figure><h3 id="1-3-局部内部类"><a href="#1-3-局部内部类" class="headerlink" title="1.3 局部内部类"></a>1.3 局部内部类</h3><p>是定义在方法中的类，和局部变量一样，只能在方法中有效。</p><p>局部内部类的局限性很强，一般在开发中是不会使用的。</p><h3 id="1-4-匿名内部类"><a href="#1-4-匿名内部类" class="headerlink" title="1.4 匿名内部类"></a>1.4 匿名内部类</h3><p>匿名内部类是一种特殊的局部内部类；所谓匿名，指的是程序员<strong>不需要为这个类声明名字</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 父类/接口(参数值)&#123;<br>    <span class="hljs-meta">@Override</span><br>    重写父类/接口的方法;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类 本质上 时一个没有名字的子类对象、或者接口的实现类对象，</p><p>只有在调用方法时，当方法的形参是一个接口或者抽象类，为了简化代码书写，而直接传递匿名内部类对象给方法。</p><h2 id="二、枚举"><a href="#二、枚举" class="headerlink" title="二、枚举"></a>二、枚举</h2><h3 id="2-1-枚举类"><a href="#2-1-枚举类" class="headerlink" title="2.1 枚举类"></a>2.1 枚举类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> 枚举类名&#123;<br>    枚举项<span class="hljs-number">1</span>,枚举项<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实枚举项就表示枚举类的对象，只是这些对象在定义枚举类时就预先写好了，以后就只能用这几个固定的对象。.</p><h3 id="2-2-场景"><a href="#2-2-场景" class="headerlink" title="2.2 场景"></a>2.2 场景</h3><p>枚举一般表示一组信息，然后作为参数进行传输。</p><p>我们现在有这么一个应用，用户进入应用时，需要让用户选择是女生、还是男生，然后系统会根据用户选择的是男生，还是女生推荐不同的信息给用户观看。</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%89%EF%BC%89/1665670887179.png" alt="1665670887179"></p><p>这里我们就可以先定义一个枚举类，用来表示男生、或者女生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Constant</span>&#123;<br>    BOY,GRIL<br>&#125;<br></code></pre></td></tr></table></figure><p>再定义一个测试类，完成用户进入系统后的选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//调用方法，传递男生</span><br>        provideInfo(Constant.BOY);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">provideInfo</span><span class="hljs-params">(Constant c)</span>&#123;<br>        <span class="hljs-keyword">switch</span>(c)&#123;<br>            <span class="hljs-keyword">case</span> BOY:<br>                System.out.println(<span class="hljs-string">&quot;展示一些信息给男生看&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> GRIL:<br>                System.out.println(<span class="hljs-string">&quot;展示一些信息给女生看&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终再总结一下枚举的应用场景：<strong>枚举一般表示几个固定的值，然后作为参数进行传输</strong>。</p><h2 id="三、泛型"><a href="#三、泛型" class="headerlink" title="三、泛型"></a>三、泛型</h2><h3 id="3-1-泛型"><a href="#3-1-泛型" class="headerlink" title="3.1 泛型"></a>3.1 泛型</h3><p>在定义类、接口、方法时，同时声明了一个或者多个类型变量（如：<E>），称为泛型类、泛型接口、泛型方法、它们统称为泛型。</E></p><p>ArrayList集合的设计者在定义ArrayList集合时，就已经明确ArrayList集合时给别人装数据用的，但是别人用ArrayList集合时候，装什么类型的数据他不知道，所以就用一个<code>&lt;E&gt;</code>表示元素的数据类型。</p><h3 id="3-2-自定义泛型类"><a href="#3-2-自定义泛型类" class="headerlink" title="3.2 自定义泛型类"></a>3.2 自定义泛型类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个泛型类，用来表示一个容器</span><br><span class="hljs-comment">//容器中存储的数据，它的类型用&lt;E&gt;先代替用着，等调用者来确认&lt;E&gt;的具体类型。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArrayList</span>&lt;E&gt;&#123;<br>    <span class="hljs-keyword">private</span> Object[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//定一个索引，方便对数组进行操作</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> index;<br>    <br>    <span class="hljs-comment">//添加元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span>&#123;<br>        array[index]=e;<br>        index++;<br>    &#125;<br>    <br>    <span class="hljs-comment">//获取元素</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">return</span> (E)array[index];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、常用API"><a href="#四、常用API" class="headerlink" title="四、常用API"></a>四、常用API</h2><h3 id="4-1-Object类"><a href="#4-1-Object类" class="headerlink" title="4.1 Object类"></a>4.1 Object类</h3><p>Object类是Java中所有类的祖宗类，因此，Java中所有类的对象都可以直接使用Object类中提供的一些方法。</p><ul><li><p>toString()：调用toString()方法可以返回对象的字符串表示形式</p><p>在Student类重写toString()方法，那么我们可以返回对象的属性值，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name=‘&quot;</span>+name+<span class="hljs-string">&quot;’, age=&quot;</span>+age+<span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>euqals(Object o)：判断此对象与参数对象是否”相等”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵薇&quot;</span>,<span class="hljs-number">23</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;赵薇&quot;</span>,<span class="hljs-number">23</span>);<br>        <br>        <span class="hljs-comment">//equals本身也是比较对象的地址，和&quot;==&quot;没有区别</span><br>        System.out.println(s1.equals(s2)); <span class="hljs-comment">//false</span><br>         <span class="hljs-comment">//&quot;==&quot;比较对象的地址</span><br>        System.out.println(s1==s2); <span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是如果我们在Student类中，把equals方法重写了，就按照对象的属性值进行比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;name=‘&quot;</span>+name+<span class="hljs-string">&quot;’, age=&quot;</span>+age+<span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//重写equals方法，按照对象的属性值进行比较</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br><br>        <span class="hljs-keyword">if</span> (age != student.age) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> name != <span class="hljs-literal">null</span> ? name.equals(student.name) : student.name == <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>clone()方法：某一个对象调用这个方法，这个方法会复制一个一模一样的新对象，并返回。</p><p>想要调用clone()方法，必须让被克隆的类实现Cloneable接口。如我们准备克隆User类的对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    <span class="hljs-keyword">private</span> String id; <span class="hljs-comment">//编号</span><br>    <span class="hljs-keyword">private</span> String username; <span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> String password; <span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[] scores; <span class="hljs-comment">//分数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String id, String username, String password, <span class="hljs-type">double</span>[] scores)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.scores = scores;<br>    &#125;<br><br>    <span class="hljs-comment">//...get和set...方法自己加上</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;wo666&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[]&#123;<span class="hljs-number">99.0</span>,<span class="hljs-number">99.5</span>&#125;);<br><span class="hljs-comment">//调用方法克隆得到一个新对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> (User) u1.clone();<br>        System.out.println(u2.getId());<br>        System.out.println(u2.getUsername());<br>        System.out.println(u2.getPassword());<br>        System.out.println(u2.getScores()); <br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面演示的克隆方式，是一种浅克隆的方法，浅克隆的意思：<strong>拷贝出来的对象封装的数据与原对象封装的数据一模一样（引用类型拷贝的是地址值）</strong>。</p><p>深拷贝：对象中基本类型的数据直接拷贝，对象中字符串数据拷贝的时地址，其他对象，不会拷贝地址，会创新新对象。</p></li></ul><h3 id="4-2-Objects类"><a href="#4-2-Objects类" class="headerlink" title="4.2 Objects类"></a>4.2 Objects类</h3><p>提供了一些方法可以对任意对象进行操作。</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%89%EF%BC%89/1665760840329.png" alt="1665760840329"></p><h3 id="4-3-基本类型包装类"><a href="#4-3-基本类型包装类" class="headerlink" title="4.3 基本类型包装类"></a>4.3 基本类型包装类</h3><p>Java中有一句很经典的话，万物皆对象。Java中的8种基本数据类型还不是对象，所以要把它们变成对象，变成对象之后，可以提供一些方法对数据进行操作。</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%89%EF%BC%89/1665758797003.png" alt="1665758797003"></p><ul><li><p>创建包装类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">10</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Integer.value(<span class="hljs-number">10</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">//自动装箱</span><br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> c ;<span class="hljs-comment">//自动拆箱</span><br></code></pre></td></tr></table></figure></li><li><p>包装类数据类型转换</p><ul><li><p>把字符串转换成数值型数据：</p><p><code>public static int parseInt(String s)</code></p></li><li><p>把数值型数据转换成字符串：</p><p><code>public static String valueof(int a)</code></p></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVASE——面向对象高级（二）</title>
    <link href="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象高级（二）"><a href="#面向对象高级（二）" class="headerlink" title="面向对象高级（二）"></a>面向对象高级（二）</h1><h2 id="一、多态"><a href="#一、多态" class="headerlink" title="一、多态"></a>一、多态</h2><h3 id="1-1-多态的概述"><a href="#1-1-多态的概述" class="headerlink" title="1.1 多态的概述"></a>1.1 多态的概述</h3><p>多态：是在继承、实现情况下的一种现象，表现为：对象多态、行为多态。</p><ul><li><p>对象多态：父类变量 接收了 子类对象的现象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Teacher和Student都是People的子类</span><br><span class="hljs-type">People</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-type">People</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br></code></pre></td></tr></table></figure><p>p1和p2都是People类型，但是p1和p2指向的对象不一样。</p></li><li><p>行为多态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">p1.run();<br>p2.run();<br></code></pre></td></tr></table></figure><p>p1和p2都可以调用run方法，但是两个run方法表现的行为不一样。</p></li></ul><h3 id="1-2-多态的好处"><a href="#1-2-多态的好处" class="headerlink" title="1.2 多态的好处"></a>1.2 多态的好处</h3><p><strong>1.  在多态形式下，右边的代码是解耦合的，更便于扩展和维护。</strong></p><p>刚开始p1指向Student对象，run方法执行的就是Student对象的业务；假如p1指向Teacher对象 ，run方法执行的自然是Teacher对象的业务。</p><p>也就是说，等号的右边是可以根据需要的子类替换的。</p><p><strong>2. 定义方法时，使用父类类型作为形参，可以接收一切子类对象，扩展行更强，更便利。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握使用多态的好处</span><br><span class="hljs-type">Teacher</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>go(t);<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        go(s);<br>    &#125;<br><br>    <span class="hljs-comment">//参数People p既可以接收Student对象，也能接收Teacher对象。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">go</span><span class="hljs-params">(People p)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始------------------------&quot;</span>);<br>        p.run();<br>        System.out.println(<span class="hljs-string">&quot;结束------------------------&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-类型转换"><a href="#1-3-类型转换" class="headerlink" title="1.3 类型转换"></a>1.3 类型转换</h3><p>多态的缺点：在多态形式下，不能调用子类特有的方法，比如在Teacher类中多了一个teach方法，在Student类中多了一个study方法，这两个方法在多态形式下是不能直接调用的。</p><p>多态形式下不能直接调用子类特有方法，但是转型后是可以调用的。这里所说的转型就是<strong>把父类变量转换为子类类型</strong>。格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(父类变量名 <span class="hljs-keyword">instanceof</span> 子类)&#123;<br>    子类 变量名 = (子类) 父类变量名;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>原本是什么类型，才能还原成什么类型</strong></p><h2 id="二、final关键字"><a href="#二、final关键字" class="headerlink" title="二、final关键字"></a>二、final关键字</h2><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><p>final关键字是最终的意思，可以修饰类、修饰方法、修饰变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">- <span class="hljs-keyword">final</span>修饰类：该类称为最终类，特点是不能被继承<br>- <span class="hljs-keyword">final</span>修饰方法：该方法称之为最终方法，特点是不能被重写。<br>- <span class="hljs-keyword">final</span>修饰变量：该变量只能被赋值一次。<br></code></pre></td></tr></table></figure><h3 id="2-2-常量"><a href="#2-2-常量" class="headerlink" title="2.2 常量"></a>2.2 常量</h3><p>常量：被static final 修饰的成员变量。 通常用于记录系统的配置信息。</p><p>如：<code>public static final String SCHOOL_NAME = &quot;Wendy&quot;</code></p><h2 id="三、抽象"><a href="#三、抽象" class="headerlink" title="三、抽象"></a>三、抽象</h2><p>在Java中有一个关键字叫abstract，它就是抽象的意思，它可以修饰类也可以修饰方法。注：抽象方法不允许由方法体。</p><h3 id="3-1-抽象类"><a href="#3-1-抽象类" class="headerlink" title="3.1 抽象类"></a>3.1 抽象类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> abstarct <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    priavte String name;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>    <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>抽象类是不能创建对象的，如果抽象类的对象就会报错</p></li><li><p>抽象类可以作为父类让子类继承。而且子类继承父类必须<strong>重写父类的所有抽象方法</strong>。</p></li><li><p>子类继承父类如果不复写父类的抽象方法，这个子类也必须是抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// B类继承A类，此时B类也是抽象类，这个时候就可以不重写A类的抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2-好处"><a href="#3-2-好处" class="headerlink" title="3.2 好处"></a>3.2 好处</h3><p>场景：要求两个对象 有共同的属性，也有一个行为，但是具体的行为实现方法不一样。这是，可以把这个行为写作一个抽象的方法。</p><p>抽象父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//动物叫的行为：不具体，是抽象的</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>子类Dog：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;汪汪汪的叫~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子类Cat：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot;喵喵喵的叫~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 目标：掌握抽象类的使用场景和好处.</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        a.cry();<span class="hljs-comment">//这时执行的是Dog类的cry方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.用抽象类可以把父类中相同的代码，包括方法声明都抽取到父类，这样能更好的支持多态，一提高代码的灵活性。<br><br>2.反过来用，我们不知道系统未来具体的业务实现时，我们可以先定义抽象类，将来让子类去实现，以方便系统的扩展。<br></code></pre></td></tr></table></figure><h3 id="3-3-模板方法模式"><a href="#3-3-模板方法模式" class="headerlink" title="3.3 模板方法模式"></a>3.3 模板方法模式</h3><p><strong>设计模式是解决某一类问题的最优方案</strong></p><p><strong>模板方法模式解决了多个子类中有相同代码的问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">第<span class="hljs-number">1</span>步：定义一个抽象类，把子类中相同的代码写成一个模板方法。<br>第<span class="hljs-number">2</span>步：把模板方法中不能确定的代码写成抽象方法，并在模板方法中调用。<br>第<span class="hljs-number">3</span>步：子类继承抽象类，只需要父类抽象方法就可以了。<br></code></pre></td></tr></table></figure><h2 id="四、接口"><a href="#四、接口" class="headerlink" title="四、接口"></a>四、接口</h2><h3 id="4-1-接口"><a href="#4-1-接口" class="headerlink" title="4.1 接口"></a>4.1 接口</h3><p>Java提供了一个关键字interface，用这个关键字来定义接口这种特殊结构。格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">//成员变量（常量）</span><br>    <span class="hljs-comment">//成员方法（抽象方法）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">// 成员常量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Wendy&quot;</span>;<br>    <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用A类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//打印A接口中的常量</span><br>        System.out.println(A.SCHOOL_NAME);<br>        <br>        <span class="hljs-comment">//接口是不能创建对象的</span><br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>(); <span class="hljs-comment">//错误</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>接口类 是用来 被类实现(implements)的，我们称之为实现类</li><li>一个类可以实现多个接口，实现接口时必须重写接口的所有抽象方法。</li></ul><h3 id="4-2-接口的好处"><a href="#4-2-接口的好处" class="headerlink" title="4.2 接口的好处"></a>4.2 接口的好处</h3><ul><li>弥补了 单继承的不足，一个类可以同时实现多个接口</li><li>让程序可以 面向接口编程</li></ul><h3 id="4-3-案例"><a href="#4-3-案例" class="headerlink" title="4.3 案例"></a>4.3 案例</h3><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%BA%8C%EF%BC%89/1665102202635.png" alt="1665102202635"></p><p>考虑：</p><p>写一个 接口， 表示学生信息管理的两个功能。</p><p>写两个实现类，实现两套方案的业务实现。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVASE——面向对象高级（一）</title>
    <link href="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象高级"><a href="#面向对象高级" class="headerlink" title="面向对象高级"></a>面向对象高级</h1><h2 id="一、静态"><a href="#一、静态" class="headerlink" title="一、静态"></a>一、静态</h2><p><strong>static</strong>关键字：可用于修饰成员变量，也可用于修饰成员方法。</p><h3 id="1-1-修饰成员变量"><a href="#1-1-修饰成员变量" class="headerlink" title="1.1 修饰成员变量"></a>1.1 修饰成员变量</h3><ul><li><p>类变量：有static修饰，属于类，<strong>会被类的全部对象共享</strong>。</p></li><li><p>实例变量（对象的变量）：无static修饰，属于每个对象。</p></li></ul><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%80%EF%BC%89/image-20241029161725393.png" alt="image-20241029161725393"></p><p>静态变量属于类，通过类名就能调用：<code>类名.类变量名</code></p><p>实例变量属于对象，通过对象名才能调用：<code>对象名.实例变量名</code></p><h3 id="1-2-修饰成员变量的应用场景"><a href="#1-2-修饰成员变量的应用场景" class="headerlink" title="1.2 修饰成员变量的应用场景"></a>1.2 修饰成员变量的应用场景</h3><p>在实际开发中，如果某个数据<strong>只需要一份</strong>，且希望能够<strong>被共享</strong>（访问、修改），则该数据可以定义成类变量来记住。</p><p>场景：类A统计创建了多少个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> number;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span>&#123;<br>        User.number++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        &#125;<br><br>        System.out.println(User.number);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-修饰成员方法"><a href="#1-3-修饰成员方法" class="headerlink" title="1.3 修饰成员方法"></a>1.3 修饰成员方法</h3><ul><li>类方法：有static修饰的方法，属于类  <code>类名.类方法名</code></li><li>实例方法：无static修饰的方法，属于对象 <code>对象名.实例变量名</code></li></ul><ol><li><p>类方法：static修饰的方法，可以被类名调用，是因为它是随着类的加载而加载的；所以类名直接就可以找到static修饰的方法</p></li><li><p>实例方法：非static修饰的方法，需要创建对象后才能调用，是因为实例方法中可能会访问实例变量，而实例变量需要创建对象后才存在。 所以实例方法，必须创建对象后才能调用。</p></li></ol><h3 id="1-4-static应用"><a href="#1-4-static应用" class="headerlink" title="1.4 static应用"></a>1.4 static应用</h3><ul><li><p>静态代码块：类加载时自动执行，由于类只会加载一次，所有静态代码块也只会执行一次。 可用于对类的初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Wendy&quot;</span>;<br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块已执行！&quot;</span>);<br>        <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Student.number);<br>        System.out.println(Student.name);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行上面代码时，发现没有创建对象，静态代码块就已经执行了。</p></li><li><p>实例代码块：每次创建对象时，执行实例代码块，并在构造器前执行。实例代码块的作用和构造器的作用是一样的，用来给对象初始化值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">int</span> number;<br>    String name;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;实例代码块已执行！&quot;</span>);<br>        number = <span class="hljs-number">20</span>;<br>        name = <span class="hljs-string">&quot;Wendy&quot;</span>;<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造器执行&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> number, String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;有参构造器执行&quot;</span>);<br>        <span class="hljs-built_in">this</span>.number = number;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">25</span>, <span class="hljs-string">&quot;MIKE&quot;</span>);<br>        System.out.println(s1.number);<br>        System.out.println(s1.name);<br>        System.out.println(s2.number);<br>        System.out.println(s2.name);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%80%EF%BC%89/image-20241029165429241.png" alt="image-20241029165429241"></p><p>实例代码块每次创建对象之前都会执行一次</p></li></ul><h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><h3 id="2-1-什么是继承"><a href="#2-1-什么是继承" class="headerlink" title="2.1 什么是继承"></a>2.1 什么是继承</h3><p>面向对象三大特征：继承、封装、多态</p><p>JAVA中提供了extends关键字，可以让一个类与另一个类建立起父子关系。</p><p>特点：子类可以继承父类的所有 <strong>非私有成员</strong>（变量、方法）</p><p>继承后对象的创建：子类的对象时由 父类、子类共同完成的。</p><h3 id="2-2-继承的好处"><a href="#2-2-继承的好处" class="headerlink" title="2.2 继承的好处"></a>2.2 继承的好处</h3><p>减少重复代码的编写。</p><p>可以把重复的代码提取出来，作为父类，然后让其他类继承父类就可以了，这样可以<strong>提高代码的复用性</strong>。</p><h3 id="2-3-权限修饰符"><a href="#2-3-权限修饰符" class="headerlink" title="2.3 权限修饰符"></a>2.3 权限修饰符</h3><p>权限修饰符是用来限制类的成员（成员变量、成员方法、构造器…）能够被访问的范围。</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%80%EF%BC%89/1664012151488.png" alt="1664012151488"></p><h3 id="2-4-单继承、Object"><a href="#2-4-单继承、Object" class="headerlink" title="2.4 单继承、Object"></a>2.4 单继承、Object</h3><p><strong>Java语言只支持单继承，不支持多继承，但是可以多层继承</strong></p><p>Object类是Java中所有类的祖宗</p><h3 id="2-5-方法重写-Override"><a href="#2-5-方法重写-Override" class="headerlink" title="2.5 方法重写 Override"></a>2.5 方法重写 Override</h3><p>当子类觉得父类方法不好用，或者无法满足父类需求时，子类可以<strong>重写一个方法名称、参数列表一样的方法，去覆盖父类的这个方法</strong>，这就是方法重写。</p><p>重写后，方法的访问遵循就近原则</p><p>注意：</p><ul><li>子类复写父类方法时，访问权限必须大于或者等于父类方法的权限，</li><li>重写的方法返回值类型，必须与被重写的方法返回值类型一样，或者范围更小</li><li>私有方法、静态方法不能被重写，如果重写会报错。</li></ul><h3 id="2-6-子类中访问成员的特点"><a href="#2-6-子类中访问成员的特点" class="headerlink" title="2.6 子类中访问成员的特点"></a>2.6 子类中访问成员的特点</h3><p>在子类中访问其他成员（成员变量、成员方法），是依据<strong>就近原则</strong>的</p><p>如果子类和父类出现同名变量或者方法，优先使用子类的；此时如果一定要在子类中使用父类的成员，可以加this或者super进行区分。</p><h3 id="2-7-子类访问构造器的特点"><a href="#2-7-子类访问构造器的特点" class="headerlink" title="2.7 子类访问构造器的特点"></a>2.7 子类访问构造器的特点</h3><ul><li><p><strong>子类中访问构造器的语法规则</strong>：首先，子类全部构造器，都会先调用父类构造器，再执行自己。</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%80%EF%BC%89/1664160225526.png" alt="1664160225526"></p></li><li><p><strong>子类访问构造器的应用场景</strong>：如果不想使用默认的<code>super()</code>方式调用父类构造器，还可以手动使用<code>super(参数)</code>调用父类有参数构造器。</p><p><img src="/2024/10/29/JAVASE%E2%80%94%E2%80%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%E7%BA%A7%EF%BC%88%E4%B8%80%EF%BC%89/1664163881728.png" alt="1664163881728"></p></li><li><p><strong>在本类中访问自己的构造方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>(): 调用本类的空参数构造器<br><span class="hljs-built_in">this</span>(参数): 调用本类有参数的构造器<br></code></pre></td></tr></table></figure></li><li><p>总结：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">访问本类成员：<br><span class="hljs-built_in">this</span>.成员变量<span class="hljs-comment">//访问本类成员变量</span><br><span class="hljs-built_in">this</span>.成员方法<span class="hljs-comment">//调用本类成员方法</span><br><span class="hljs-built_in">this</span>()   <span class="hljs-comment">//调用本类空参数构造器</span><br>    <span class="hljs-built_in">this</span>(参数)  <span class="hljs-comment">//调用本类有参数构造器</span><br><br>访问父类成员：<br><span class="hljs-built_in">super</span>.成员变量<span class="hljs-comment">//访问父类成员变量</span><br><span class="hljs-built_in">super</span>.成员方法<span class="hljs-comment">//调用父类成员方法</span><br><span class="hljs-built_in">super</span>()   <span class="hljs-comment">//调用父类空参数构造器</span><br>    <span class="hljs-built_in">super</span>(参数)  <span class="hljs-comment">//调用父类有参数构造器</span><br>    <br>注意：<span class="hljs-built_in">this</span>和<span class="hljs-built_in">super</span>访问构造方法，只能用到构造方法的第一句，否则会报错。<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>书生大模型实战营——L0G2000（Python基础知识）</title>
    <link href="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/"/>
    <url>/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="任务一：Leetcode-383"><a href="#任务一：Leetcode-383" class="headerlink" title="任务一：Leetcode 383"></a>任务一：Leetcode 383</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode.cn/problems/ransom-note/">383. 赎金信</a></p><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p><p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canConstruct</span>(<span class="hljs-params">self, ransomNote, magazine</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type ransomNote: str</span><br><span class="hljs-string">        :type magazine: str</span><br><span class="hljs-string">        :rtype: bool</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        my_dict = &#123;&#125;<br><br>        <span class="hljs-keyword">for</span> chari <span class="hljs-keyword">in</span> magazine:<br>            <span class="hljs-keyword">if</span>(chari <span class="hljs-keyword">in</span> my_dict):<br>                my_dict[chari] +=<span class="hljs-number">1</span> <br>            <span class="hljs-keyword">else</span>:<br>                my_dict[chari] = <span class="hljs-number">1</span> <br><br>        <span class="hljs-keyword">for</span> chari <span class="hljs-keyword">in</span> ransomNote:<br>            <span class="hljs-keyword">if</span> (chari <span class="hljs-keyword">in</span> my_dict) <span class="hljs-keyword">and</span> my_dict[chari]&gt;<span class="hljs-number">0</span>:<br>                my_dict[chari] -=<span class="hljs-number">1</span><br>            <br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;<br>            <br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>;   <br><br>        <br></code></pre></td></tr></table></figure><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027204108392.png" alt="image-20241027204108392"></p><h1 id="任务二：Vscode连接InternStudio-debug笔记"><a href="#任务二：Vscode连接InternStudio-debug笔记" class="headerlink" title="任务二：Vscode连接InternStudio debug笔记"></a>任务二：Vscode连接InternStudio debug笔记</h1><p>使用VScode连接开发机，用任务一的代码走一遍debug的流程并做笔记。</p><h2 id="使用Vscode进行Python-debug"><a href="#使用Vscode进行Python-debug" class="headerlink" title="使用Vscode进行Python debug"></a><strong>使用Vscode进行Python debug</strong></h2><p>**Step1：安装python扩展 **</p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027204529303.png" alt="image-20241027204529303"></p><p><strong>Step2： 配置调试</strong></p><p>生成launch.json文件</p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027204552545.png" alt="image-20241027204552545"></p><p><strong>Step3：设置断点</strong></p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027204634602.png" alt="image-20241027204634602"></p><p><strong>Step4：启动debug 查看变量</strong></p><p>目前，读入str2(“aab”)的’a’到字典my_dict中，在读第二个字符’a’，（chari &#x3D; ‘a’）</p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027204214177.png" alt="image-20241027204214177"></p><p>读入下一个字符’a’，此时my_dict里面是{‘a’: 2}</p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027204249666.png" alt="image-20241027204249666"></p><p>读入下一个字符’b’， chari &#x3D; ‘b’</p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027204352233.png" alt="image-20241027204352233"></p><p>此时 my_dict &#x3D; {‘a’:2, ‘b’:1}</p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027204448359.png" alt="image-20241027204448359"></p><p>至此，str2的所有字符被全部读入。</p><h2 id="vscode使用命令行进行debug"><a href="#vscode使用命令行进行debug" class="headerlink" title="vscode使用命令行进行debug"></a>vscode使用命令行进行debug</h2><p>远程附加：</p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027205619909.png" alt="image-20241027205619909"></p><p>debug命令行</p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027205913732.png" alt="image-20241027205913732"></p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027210031109.png" alt="image-20241027210031109"></p><p>使用别名简化命令</p><p>别名取作：pyd</p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027210047666.png" alt="image-20241027210047666"></p><p>debug:</p><p><img src="/2024/10/27/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G2000%EF%BC%88Python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027210127297.png" alt="image-20241027210127297"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>书生大模型实战营——L0G1000（Linux基础知识）</title>
    <link href="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/"/>
    <url>/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-InternStudio-关卡"><a href="#Linux-InternStudio-关卡" class="headerlink" title="Linux + InternStudio 关卡"></a>Linux + InternStudio 关卡</h1><h2 id="1-InternStudio开发机"><a href="#1-InternStudio开发机" class="headerlink" title="1. InternStudio开发机"></a>1. InternStudio开发机</h2><p><a href="https://studio.intern-ai.org.cn/">https://studio.intern-ai.org.cn/</a></p><p>功能：创建开发机、可视化文件夹、团队开发、SSH配置</p><h2 id="2-SSH及端口映射"><a href="#2-SSH及端口映射" class="headerlink" title="2. SSH及端口映射"></a>2. SSH及端口映射</h2><h3 id="2-1-SSH"><a href="#2-1-SSH" class="headerlink" title="2.1 SSH"></a>2.1 SSH</h3><p>SSH全称 secure shell， 即 安全外壳。 通过 加密和认证机制实现 安全访问 和 文件传输。</p><p>通信双方需要  先建立TCP连接，协商使用的版本号和各类法，并生成相同的会话密钥用于后续的对称加密。</p><h3 id="2-2-SSH远程连接"><a href="#2-2-SSH远程连接" class="headerlink" title="2.2 SSH远程连接"></a>2.2 SSH远程连接</h3><p>vscode远程连接</p><h3 id="2-3-端口映射"><a href="#2-3-端口映射" class="headerlink" title="2.3 端口映射"></a>2.3 端口映射</h3><p><strong>端口映射</strong>是一种网络技术，它可以将外网中的任意端口映射到内网中的相应端口，实现内网与外网之间的通信。通过端口映射，可以在外网访问内网中的服务或应用，实现跨越网络的便捷通信。</p><p>我们需要对运行web_demo的连接进行端口映射，将<strong>外网链接映射到我们本地主机</strong>，我们使用本地连接访问，解决这个代理问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ssh -p <span class="hljs-number">37367</span> root@ssh.intern-ai.org.cn -CNg -L <span class="hljs-number">7860</span>:<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">7860</span> -o StrictHostKeyChecking=no<br></code></pre></td></tr></table></figure><p>个人PC会远程连接到开发机唯一暴露在外的37367端口，（这个在SSH的时候提到过每个人的开发机暴露的端口都不一样），并设置隧道选项。暴露端口是作为中转站进行流量的转发。</p><h2 id="3-Linux基础命令"><a href="#3-Linux基础命令" class="headerlink" title="3. Linux基础命令"></a>3. Linux基础命令</h2><p><strong>任务1</strong>：将Linux基础命令在开发机上完成一遍</p><h3 id="3-1-文件管理"><a href="#3-1-文件管理" class="headerlink" title="3.1 文件管理"></a>3.1 文件管理</h3><ul><li><p><code>touch demo.py </code> 创建空文件</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022204309836.png" alt="image-20241022204309836"></p></li><li><p><code>mkdir test2 </code> 创建目录</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022204425360.png" alt="image-20241022204425360"></p></li><li><p><code>cd ../</code>切换到哪个目录</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022204542629.png" alt="image-20241022204542629"></p></li><li><p><code>pwd</code> 查看当前所在目录</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022204753289.png" alt="image-20241022204753289"></p></li><li><p><code>cat</code> 查看文件内容</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022204953903.png" alt="image-20241022204953903"></p></li><li><p><code>vim or vi</code> 编辑文件</p><p>命令模式：dd yy p gg H zz</p><p>末行模式：:wq  :q! :w &#x2F;</p><p>编辑模式： i(insert)</p></li><li><p><code>cp</code> 把一个文件获目录复制到另一个目录下方  cp 源文件 目标文件</p><p>软链接：ln [参数] [源文件或目录] [ 目标文件或目录]</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022205516468.png" alt="image-20241022205516468"></p></li><li><p><code>mv 和 rm</code> 移动文件 和 删除文件</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022205722213.png" alt="image-20241022205722213"></p></li><li><p><code>find</code> 在指定的目录及其子目录中查找符合条件的文件或目录</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022205939710.png" alt="image-20241022205939710"></p></li><li><p><code>ls</code> 列出目录的内容以及详细信息</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022210127362.png" alt="image-20241022210127362"></p></li><li><p><code>sed</code> 流编辑器，处理文本</p><ul><li><p><code>-e&lt;script&gt;</code> 或 <code>--expression=&lt;script&gt;</code>：直接在命令行中指定脚本进行文本处理</p></li><li><p><code>-f&lt;script文件&gt;</code> 或 <code>--file=&lt;script文件&gt;</code>：从指定的脚本文件中读取脚本进行文本处理。</p></li><li><p><code>-n</code> 或 <code>--quiet</code> 或 <code>--silent</code>：仅打印经过脚本处理后的输出结果，不打印未匹配的行</p></li></ul><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022211614243.png" alt="image-20241022211614243"></p></li></ul><h3 id="3-2-进程管理"><a href="#3-2-进程管理" class="headerlink" title="3.2 进程管理"></a>3.2 进程管理</h3><ul><li><p><code>ps aux</code> 显示系统所有进程的详细信息</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022211931028.png" alt="image-20241022211931028"></p></li><li><p><code>top</code> 动态显示系统进程状态，显示CPU和内存使用率最高的进程</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022212031006.png" alt="image-20241022212031006"></p></li><li><p><code>pstree</code> 以树状图形式显示当前运行的进程以及其父子关系</p></li><li><p><code>nvidia-smi</code> 显示GPU详细</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241022212601659.png" alt="image-20241022212601659"></p></li></ul><h2 id="4-Conda使用"><a href="#4-Conda使用" class="headerlink" title="4. Conda使用"></a>4. Conda使用</h2><p><strong>任务2</strong>： 使用 VSCODE 远程连接开发机并创建一个conda环境</p><p>（前文已经让VSCODE远程连接到开发机了）</p><p>显示所有的环境：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">conda env <span class="hljs-built_in">list</span> <br></code></pre></td></tr></table></figure><p>创建新环境：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">conda create -n wendyflv python=<span class="hljs-number">3.10</span><br></code></pre></td></tr></table></figure><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027193640377.png" alt="image-20241027193640377"></p><p>激活环境：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">conda <span class="hljs-built_in">activate</span> wendyflv<br></code></pre></td></tr></table></figure><p>退出环境：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">conda deactivate<br></code></pre></td></tr></table></figure><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027193652281.png" alt="image-20241027193652281"></p><p><strong>任务3</strong>： 创建并运行test.sh文件</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027194906114.png" alt="image-20241027194906114"></p><p>文件内容：</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027194952621.png" alt="image-20241027194952621"></p><p>运行结果：</p><p><img src="/2024/10/22/%E4%B9%A6%E7%94%9F%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%AE%9E%E6%88%98%E8%90%A5%E2%80%94%E2%80%94L0G1000%EF%BC%88Linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%89/image-20241027195020188.png" alt="image-20241027195020188"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AI掘金训练营刷题</title>
    <link href="/2024/10/14/AI%E6%8E%98%E9%87%91%E8%AE%AD%E7%BB%83%E8%90%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2024/10/14/AI%E6%8E%98%E9%87%91%E8%AE%AD%E7%BB%83%E8%90%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="题1-多米诺骨牌"><a href="#题1-多米诺骨牌" class="headerlink" title="题1 多米诺骨牌"></a>题1 多米诺骨牌</h1><p><strong># 问题描述</strong></p><p>多米诺骨牌游戏规则非常简单，将骨牌按一定间距的尺寸排成单行，或分行排成一片。推倒第一张骨牌，其余发生连锁反应依次倒下，或形成一条长龙，或形成一幅图案。</p><p>小 A 觉得多米诺骨牌超级没意思，所以他想了点小花招。</p><p>小 A 将 n 个多米诺骨牌放在一条线上，每一块都垂直竖立。他同时将一些骨牌向左或向右推倒。注意：不会出现连续向左或者向右推的情况。 每过一秒，被推向左边或右边的骨牌会将左边或右边的相邻骨牌推倒。当一个骨牌，其左边倒向它的骨牌数目与其右边倒向它的骨牌数目相等时，由于力的平衡，该骨牌将依然保持竖立。</p><p>给定小 A 最初推骨牌的方向，求出最后依然保持竖立的骨牌数目和位置。</p><p><strong>## 输入格式</strong></p><p>输入数据第一行包括一个整数 n（1≤n≤3000），表示这一行多米诺骨牌的数目。下一行包括一个长度为 n 的字符串，字符串的第 i 个字符意义如下：</p><p>“L”，第 i 个字符将要被向左推。</p><p>“R”，第 i 个字符将要被向右推。</p><p>“.”，第 i 个字符不会被推。</p><p><strong>## 输出格式</strong></p><p>首先输出保持竖立的骨牌数目。如果保持竖立的骨牌数目不为 0，下一行输出保持竖立的骨牌的位置，骨牌位置从 1 到 n。</p><p>每两个数之间用一个空格隔开，注意最后一个数后面没有空格。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>考虑 一个骨牌是否会保持竖立，仅需要考虑其最近的L或者R即可。</p><p>考虑四种情形：</p><ul><li>L……R：中间的’’.”会全部保留</li><li>R……L：如果中间的”.”为奇数个，保留最中间的一个”.”</li><li>R…….R：无”.”保留</li><li>L……..L：无”.”保留</li></ul><p>使用 双指针 “l”指向左边的L或者R， “r”指向右边的L或者R</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include &lt;string&gt;</span><br><br>using namespace std;<br><br><br>std::string solution(<span class="hljs-built_in">int</span> num, std::string data) &#123;<br>    // Please write your code here<br>    <br>    data = <span class="hljs-string">&#x27;L&#x27;</span> + data + <span class="hljs-string">&#x27;R&#x27;</span>;<br>    //cout&lt;&lt;data&lt;&lt;endl;<br>    <span class="hljs-built_in">int</span> res[data.length()];<br>    <span class="hljs-built_in">int</span> count =<span class="hljs-number">0</span> ;<br>    string rr = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">int</span> l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> r=<span class="hljs-number">1</span>; r&lt;data.length(); r++)&#123;<br><br>        <br>        <br>        <span class="hljs-keyword">if</span>(data[r] == <span class="hljs-string">&#x27;.&#x27;</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (data[l] == <span class="hljs-string">&#x27;R&#x27;</span> &amp;&amp; data[r] == <span class="hljs-string">&#x27;L&#x27;</span>) &#123;<br>            //cout&lt;&lt;<span class="hljs-string">&quot;l: &quot;</span>&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot;  r: &quot;</span>&lt;&lt;r&lt;&lt;endl;<br><br>            <span class="hljs-keyword">if</span>((r -l +<span class="hljs-number">1</span>)  % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)&#123;<br>                res[count] = (r+l) / <span class="hljs-number">2</span>;<br>                count++;<br>                //cout&lt;&lt;<span class="hljs-string">&quot;count: &quot;</span>&lt;&lt;count&lt;&lt;<span class="hljs-string">&quot; j: &quot;</span>&lt;&lt;res[count-<span class="hljs-number">1</span>]&lt;&lt;endl;<br>            &#125;<br>        <br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(data[l] == <span class="hljs-string">&#x27;L&#x27;</span> &amp;&amp; data[r] == <span class="hljs-string">&#x27;R&#x27;</span>)&#123;<br>            //cout&lt;&lt;<span class="hljs-string">&quot;l: &quot;</span>&lt;&lt;l&lt;&lt;<span class="hljs-string">&quot;  r: &quot;</span>&lt;&lt;r&lt;&lt;endl;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=l+<span class="hljs-number">1</span>; j&lt;r;j++)&#123;<br>                res[count] = j;<br>                count++;<br>                //cout&lt;&lt;<span class="hljs-string">&quot;count: &quot;</span>&lt;&lt;count&lt;&lt;<span class="hljs-string">&quot; j: &quot;</span>&lt;&lt;j&lt;&lt;endl;<br>            &#125;<br><br>        &#125;<br><br>        <br>        <br><br>        l = r;<br><br>        <br><br><br>    &#125;<br>    rr = to_string(count) ;<br>    <span class="hljs-keyword">if</span>(count!=<span class="hljs-number">0</span>)&#123;<br><br>        rr += <span class="hljs-string">&#x27;:&#x27;</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;count; i++)&#123;<br>        rr += to_string(res[i])  ;<br>        <span class="hljs-keyword">if</span>(i!= count-<span class="hljs-number">1</span>)&#123;<br>            rr += <span class="hljs-string">&#x27;,&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    &#125;<br>    <br><br><br><br><br>    <span class="hljs-keyword">return</span> rr;<br>&#125;<br><br><span class="hljs-built_in">int</span> main() &#123;<br>    //  You can add more test cases here<br>    std::cout &lt;&lt; (solution(<span class="hljs-number">14</span>, <span class="hljs-string">&quot;.L.R...LR..L..&quot;</span>) == <span class="hljs-string">&quot;4:3,6,13,14&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (solution(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;R....&quot;</span>) == <span class="hljs-string">&quot;0&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (solution(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;.&quot;</span>) == <span class="hljs-string">&quot;1:1&quot;</span>) &lt;&lt; std::endl;<br><br>    <br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题2-计算x到y的最少步数"><a href="#题2-计算x到y的最少步数" class="headerlink" title="题2 计算x到y的最少步数"></a>题2 计算x到y的最少步数</h1><p><strong>问题描述</strong></p><p>小F正在进行一个 AB 实验，需要从整数位置 <code>x</code> 移动到整数位置 <code>y</code>。每一步可以将当前位置增加或减少，且每步的增加或减少的值必须是连续的整数（即每步的移动范围是上一步的 <code>-1</code>，<code>+0</code> 或 <code>+1</code>）。首末两步的步长必须是 <code>1</code>。求从 <code>x</code> 到 <code>y</code> 的最少步数。</p><p><strong>输入描述</strong></p><p>输入包含两个整数 <code>x</code> 和 <code>y</code>，表示起始位置和目标位置。</p><p><strong>输出描述</strong></p><p>输出从 <code>x</code> 到 <code>y</code> 所需的最小步数。</p><p><strong>测试样例</strong></p><p><em><strong>样例1：</strong></em></p><blockquote><p>输入：<code>x_position = 12, y_position = 6</code><br>输出：<code>4</code></p></blockquote><p><em><strong>样例2：</strong></em></p><blockquote><p>输入：<code>x_position = 34, y_position = 45</code><br>输出：<code>6</code></p></blockquote><p><em><strong>样例3：</strong></em></p><blockquote><p>输入：<code>x_position = 50, y_position = 30</code><br>输出：<code>8</code></p></blockquote><p><em><strong>样例4：</strong></em></p><blockquote><p>输入：<code>x_position = 0, y_position = 0</code><br>输出：<code>0</code></p></blockquote><h1 id="题3-环形DNA序列整理"><a href="#题3-环形DNA序列整理" class="headerlink" title="题3 环形DNA序列整理"></a>题3 环形DNA序列整理</h1><h1 id="题4-DNA序列还原"><a href="#题4-DNA序列还原" class="headerlink" title="题4 DNA序列还原"></a>题4 DNA序列还原</h1><h1 id="题5-打点计数器"><a href="#题5-打点计数器" class="headerlink" title="题5 打点计数器"></a>题5 打点计数器</h1><h1 id="题6-叠盘子"><a href="#题6-叠盘子" class="headerlink" title="题6 叠盘子"></a>题6 叠盘子</h1><p><strong>问题描述</strong></p><p>小明是个讲究生活质量的人，家里的一切都井井有条，比如说家中的盘子都是一个系列，每个盘子都标有唯一的一个整数作为标识。在每次吃完饭后，小明都会将这些盘子按照特定的顺序叠放收拾起来，收拾的规则如下：</p><ul><li><p>盘子叠放后会被分为多堆，每一堆都可能是由一个或多个盘子组成</p></li><li><p>叠放在同一堆的盘子的序号都是不间断递增的（例如 1，2，3 为不间断递增，而 1，3，4 则只是普通的递增），并且这些盘子的数量至少是 3 个</p></li><li><p>这些盘子的序号在被叠放之前就是递增的</p></li></ul><p>请问你可以编写一个程序，帮助小明算一算盘子该如何叠放么？</p><p><strong>输入格式</strong></p><p>空格分隔输入所有的数字</p><p><strong>输出格式</strong></p><p>一个字符串，每个堆被逗号分隔开，如果堆中只有一个盘子，就用序号表达；如果堆中有多个盘子，用『起始编号』+『-』+『终止编号』来表达。</p><p><strong>输入样例(1)</strong></p><p>-3 -2 -1 2 10 15 16 18 19 20</p><p><strong>输出样例(1)</strong></p><p>“-3–1,2,10,15,16,18-20”</p><p><strong>输入样例(2)</strong></p><p>-6 -3 -2 -1 0 1 3 4 5 7 8 9 10 11 14 15 17 18 19 20</p><p><strong>输出样例(2)</strong></p><p>“-6,-3-1,3-5,7-11,14,15,17-20”</p><p><strong>输入样例(3)</strong></p><p>1 2 7 8 9 10 11 19</p><p><strong>输出样例(3)</strong></p><p>“1,2,7-11,19”</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>我的思路是 先把数字组成的字符串 ——&gt; 一个int型数组</p><p>双指针法：i指向左边的盘子序号，j指向右边的盘子序号</p><p>while((p2[j+1] ) - (p2[j] ) &#x3D;&#x3D; 1){</p><p>   j++;</p><p>  }</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">std::string <span class="hljs-title">solution</span><span class="hljs-params">(std::string plates)</span> </span>&#123;<br>  <span class="hljs-comment">// Please write your code here</span><br>  vector&lt;<span class="hljs-type">int</span>&gt; p2;<br>  <span class="hljs-type">int</span> t =<span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> p;<br>  <span class="hljs-keyword">for</span>(p =<span class="hljs-number">0</span>; p&lt;plates.<span class="hljs-built_in">length</span>(); p++)&#123;<br>    <span class="hljs-keyword">if</span>(plates[p] == <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>      p2.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">stoi</span>(plates.<span class="hljs-built_in">substr</span>(t, p-t)));<br>      t = p+<span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <br>  <span class="hljs-keyword">if</span> (t &lt; plates.<span class="hljs-built_in">length</span>()) &#123;<br>        p2.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">stoi</span>(plates.<span class="hljs-built_in">substr</span>(t, plates.<span class="hljs-built_in">length</span>() - t)));<br>   &#125;<br>   <span class="hljs-comment">//cout&lt;&lt;stoi(plates.substr(t, plates.length() - t))&lt;&lt;endl;</span><br><br>  <br>  string res = <span class="hljs-string">&quot;&quot;</span>;<br>  string tmp;<br>  <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> tp;<br>  <span class="hljs-keyword">while</span>(j&lt;p2.<span class="hljs-built_in">size</span>())&#123;<br>    tp = j;<br>    <span class="hljs-keyword">while</span>((p2[j+<span class="hljs-number">1</span>] ) - (p2[j] ) == <span class="hljs-number">1</span>)&#123;<br>      j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j-i&lt;<span class="hljs-number">2</span>)&#123;<br>      j = tp;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j == i )&#123;<br>      tmp = <span class="hljs-built_in">to_string</span>(p2[i]);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>      tmp = <span class="hljs-built_in">to_string</span>(p2[i]) + <span class="hljs-string">&quot;-&quot;</span> + <span class="hljs-built_in">to_string</span>(p2[j]);<br>    &#125;<br>    <br>    res += tmp + <span class="hljs-string">&quot;,&quot;</span>;<br>    <span class="hljs-comment">//cout&lt;&lt;&quot;res: &quot;&lt;&lt;res&lt;&lt;endl;</span><br>    j++;<br>    i = j;<br><br><br>  &#125;<br>  <span class="hljs-comment">//cout&lt;&lt;res.substr(0, res.length()-1)&lt;&lt;endl;</span><br>  <br>  <span class="hljs-keyword">return</span> res.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, res.<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">//  You can add more test cases here</span><br>  std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-string">&quot;-3 -2 -1 2 10 15 16 18 19 20&quot;</span>) ==<br>                <span class="hljs-string">&quot;-3--1,2,10,15,16,18-20&quot;</span>)<br>            &lt;&lt; std::endl;<br>  std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<br>                    <span class="hljs-string">&quot;-6 -3 -2 -1 0 1 3 4 5 7 8 9 10 11 14 15 17 18 19 20&quot;</span>) ==<br>                <span class="hljs-string">&quot;-6,-3-1,3-5,7-11,14,15,17-20&quot;</span>)<br>            &lt;&lt; std::endl;<br>  std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-string">&quot;1 2 7 8 9 10 11 19&quot;</span>) == <span class="hljs-string">&quot;1,2,7-11,19&quot;</span>) &lt;&lt; std::endl;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题7-飞行棋分组"><a href="#题7-飞行棋分组" class="headerlink" title="题7  飞行棋分组"></a>题7  飞行棋分组</h1><p><strong>问题描述</strong></p><p>现在桌子上有一堆飞行棋棋子，有 <code>N</code> 个，每个棋子上标有数字序号，现在想让你帮忙给这堆飞行棋分成 <code>M</code> 组，需要满足：</p><ul><li>每个分组只能包含 5 个棋子</li><li>每个棋子只能出现在一个分组里</li><li>每个分组里的棋子的数字序号相同</li></ul><p>请问可以完成上述分组么？</p><p><strong>输入格式</strong></p><p>空格分割的飞行棋棋子序号，如：<code>1 3 4 5 6 5 4</code></p><p><strong>输出格式</strong></p><p>是否可以完成分组，如果可以输出 <code>true</code>，否则输出 <code>false</code></p><p><strong>输入样例(1)</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>上述棋子只有 5 个只能分为一组，但组内棋子序号不一致，所以无法完成分组，输出 <code>false</code></p><p><strong>输出样例(2)</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>上述棋子可以分为两组，<code>[1, 1, 1, 1, 1]</code> 和 <code>[2, 2, 2, 2, 2]</code> 两组，可以完成分组，输出 <code>true</code></p><p><strong>数据范围</strong></p><ul><li>棋子数量：<code>1 &lt;= N &lt;= 10^5</code></li><li>棋子序号：<code>1 &lt;= pieces[i] &lt;= 40</code></li></ul><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><p>先对整个数组排序，如果数组形式为 [a,a,a,a,a] [b,b,b,b,b] [c,c,c,c,c] ——&gt;True</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>  b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a  &lt; b;<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">solution</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; nums)</span> </span>&#123;<br>    <span class="hljs-comment">// Please write your code here</span><br>    <span class="hljs-comment">// [a,a,a,a,a] [b,b,b,b,b] [c,c,c,c,c] True</span><br><br>    <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> j =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>() % <span class="hljs-number">5</span> !=<span class="hljs-number">0</span>  )&#123;<br>        <span class="hljs-comment">//cout&lt;&lt;&quot;False&quot;&lt;&lt;endl;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;False&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>( (j)*<span class="hljs-number">5</span>  &lt;nums.<span class="hljs-built_in">size</span>() <span class="hljs-number">-5</span>)&#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">5</span>*j; i&lt;<span class="hljs-number">5</span>*j+<span class="hljs-number">4</span>; i++)&#123;<br>        <br>            <span class="hljs-keyword">if</span>(nums[i+<span class="hljs-number">1</span>] != nums[i])&#123;<br>                <span class="hljs-comment">//cout&lt;&lt;&quot;False&quot;&lt;&lt;endl;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;False&quot;</span>;<br>            &#125;<br>        &#125;<br>        j++;<br><br>    &#125;<br>    <br>    <span class="hljs-comment">//cout&lt;&lt;&quot;True&quot;&lt;&lt;endl;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;True&quot;</span>;<br>    <br>    <br><br><br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// You can add more test cases here</span><br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>&#125;) == <span class="hljs-string">&quot;False&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;) == <span class="hljs-string">&quot;True&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(&#123;<span class="hljs-number">11</span>, <span class="hljs-number">45</span>, <span class="hljs-number">49</span>, <span class="hljs-number">37</span>, <span class="hljs-number">45</span>, <span class="hljs-number">38</span>, <span class="hljs-number">3</span>, <span class="hljs-number">47</span>, <span class="hljs-number">35</span>, <span class="hljs-number">49</span>, <span class="hljs-number">26</span>, <span class="hljs-number">16</span>, <span class="hljs-number">24</span>, <span class="hljs-number">4</span>, <span class="hljs-number">45</span>, <span class="hljs-number">39</span>, <span class="hljs-number">28</span>, <span class="hljs-number">26</span>, <span class="hljs-number">14</span>, <span class="hljs-number">22</span>, <span class="hljs-number">4</span>, <span class="hljs-number">49</span>, <span class="hljs-number">18</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">26</span>, <span class="hljs-number">47</span>, <span class="hljs-number">14</span>, <span class="hljs-number">1</span>, <span class="hljs-number">21</span>, <span class="hljs-number">9</span>, <span class="hljs-number">26</span>, <span class="hljs-number">17</span>, <span class="hljs-number">12</span>, <span class="hljs-number">44</span>, <span class="hljs-number">28</span>, <span class="hljs-number">24</span>, <span class="hljs-number">24</span>, <span class="hljs-number">10</span>, <span class="hljs-number">31</span>, <span class="hljs-number">33</span>, <span class="hljs-number">32</span>, <span class="hljs-number">23</span>, <span class="hljs-number">41</span>, <span class="hljs-number">41</span>, <span class="hljs-number">19</span>, <span class="hljs-number">17</span>, <span class="hljs-number">24</span>, <span class="hljs-number">28</span>, <span class="hljs-number">46</span>, <span class="hljs-number">28</span>, <span class="hljs-number">4</span>, <span class="hljs-number">18</span>, <span class="hljs-number">23</span>, <span class="hljs-number">48</span>, <span class="hljs-number">45</span>, <span class="hljs-number">7</span>, <span class="hljs-number">21</span>, <span class="hljs-number">12</span>, <span class="hljs-number">40</span>, <span class="hljs-number">2</span>, <span class="hljs-number">19</span>, <span class="hljs-number">19</span>, <span class="hljs-number">28</span>, <span class="hljs-number">32</span>, <span class="hljs-number">6</span>, <span class="hljs-number">27</span>, <span class="hljs-number">43</span>, <span class="hljs-number">6</span>, <span class="hljs-number">18</span>, <span class="hljs-number">8</span>, <span class="hljs-number">27</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">31</span>, <span class="hljs-number">37</span>, <span class="hljs-number">15</span>, <span class="hljs-number">26</span>, <span class="hljs-number">20</span>, <span class="hljs-number">43</span>, <span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">40</span>, <span class="hljs-number">20</span>&#125;) == <span class="hljs-string">&quot;False&quot;</span>) &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题8-和为偶数的数字组合"><a href="#题8-和为偶数的数字组合" class="headerlink" title="题8 和为偶数的数字组合"></a>题8 和为偶数的数字组合</h1><p><strong># 问题描述</strong></p><p>给定 1 到 9 共 9 个数字，随机将九个数字分成多组，按顺序从每组中任意取出一个数字组成一个新的数字，使得新组成的数字每位数字相加之和为偶数，求共有多少种组合方法。具体请配合样例理解。</p><p><strong>## 输入格式</strong></p><p>多个整型数字，数字之间用一个空格分隔</p><p><strong>## 输出格式</strong></p><p>一个整数</p><p><strong>## 数据范围</strong></p><p>数组 1 到 9 共 9 个数，随机分成多组（&gt;&#x3D;1）</p><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><p>一个一个累积的思想：从当前的和 如果当前和为偶数，要保持后面的和仍为偶数 &#x3D; 前期偶和 * 可以加的偶数的个数 + 前期奇和 * 可以加的奇数的个数</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solution</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; numbers)</span> </span>&#123;<br>    <span class="hljs-comment">// Please write your code here</span><br>    vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">pp</span>(numbers.<span class="hljs-built_in">size</span>()); <br>    <span class="hljs-type">int</span> res_odd = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> res_even = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> new_res_even =<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> new_res_odd = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> t=<span class="hljs-number">0</span>; t&lt;numbers.<span class="hljs-built_in">size</span>(); t++)&#123;<br>        string s = <span class="hljs-built_in">to_string</span>(numbers[t]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a =<span class="hljs-number">0</span>; a&lt;s.<span class="hljs-built_in">size</span>(); a++)&#123;<br>            <span class="hljs-keyword">if</span>( (s[a] - <span class="hljs-string">&#x27;0&#x27;</span>) % <span class="hljs-number">2</span> ==<span class="hljs-number">0</span> )&#123;<br>                pp[t].second ++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                pp[t].first ++;<br>            &#125;<br>            <br>            <br>        &#125;<br>        <br>        <br>        new_res_even = res_even*pp[t].second + res_odd*pp[t].first;<br>        new_res_odd = res_odd*pp[t].second + res_even*pp[t].first;<br>        <br>        res_even = new_res_even;<br>        res_odd = new_res_odd;<br>       <br><br><br>    &#125;<br>    <br><br><br>    <span class="hljs-keyword">return</span> res_odd;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// You can add more test cases here</span><br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(&#123;<span class="hljs-number">123</span>, <span class="hljs-number">456</span>, <span class="hljs-number">789</span>&#125;) == <span class="hljs-number">14</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(&#123;<span class="hljs-number">123456789</span>&#125;) == <span class="hljs-number">4</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(&#123;<span class="hljs-number">14329</span>, <span class="hljs-number">7568</span>&#125;) == <span class="hljs-number">10</span>) &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题9-两个数列"><a href="#题9-两个数列" class="headerlink" title="题9 两个数列"></a>题9 两个数列</h1><p><strong># 问题描述</strong></p><p>给定长度分别为 <code>n</code> 和 <code>m</code> 的两个数列<code>a[n]</code>、<code>b[m]</code>，和一个整数<code>k</code>。求<code>|(a[i] - b[j])^2 - k^2|</code>的最小值。</p><p><strong>## 输入格式</strong></p><p>第一行有 2 个整数 <code>n</code>、<code>m</code>、<code>k</code>，分别表示数列 <code>a</code>、<code>b</code> 的长度，以及公式中的整数 <code>k</code>。</p><p>第二行有 <code>n</code> 个整数，表示数列 <code>a</code> 的各个元素。</p><p>第三行有 <code>m</code> 个整数，表示数列 <code>b</code> 的各个元素。</p><p><strong>## 输出格式</strong></p><p>求上述公式的最小值。</p><p><em><strong>*数据范围*</strong></em></p><p>其中 20%的数据：<code>1 &lt;= n,m &lt;= 3000，-10^9 &lt;= a[i], b[j], k &lt;= 10^9，for all i, j</code></p><p>其中 30%的数据：<code>1 &lt;= n,m &lt;= 50000，k = 0，-10^9 &lt;= a[i], b[j] &lt;= 10^9，for all i, j</code></p><p>其中 50%的数据：<code>1 &lt;= n,m &lt;= 50000，-10^9 &lt;= a[i], b[j], k &lt;= 10^9，for all i, j</code></p><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><p>直接穷举了</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solution</span><span class="hljs-params">(std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; cases)</span> </span>&#123;<br>    <span class="hljs-comment">// Please write your code here</span><br>   <br>    vector&lt;<span class="hljs-type">int</span>&gt; l1 = cases[<span class="hljs-number">0</span>];<br>    vector&lt;<span class="hljs-type">int</span>&gt; l2 = cases[<span class="hljs-number">1</span>];<br>    vector&lt;<span class="hljs-type">int</span>&gt; l3 = cases[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> n = l1[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> m = l1[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> k = <span class="hljs-built_in">abs</span>(l1[<span class="hljs-number">2</span>]);<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-type">int</span> res;<br>    <span class="hljs-type">int</span> mini = <span class="hljs-number">100000</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;m; j++)&#123;<br>            t = <span class="hljs-built_in">abs</span>(l2[i] - l3[j]);<br>          <br>            res = <span class="hljs-built_in">abs</span>(t*t - k*k);<br>            mini = <span class="hljs-built_in">min</span>(mini, res);<br><br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">return</span> mini;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// You can add more test cases here</span><br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; case1 = &#123;&#123;<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>&#125;&#125;;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; case2 = &#123;&#123;<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>&#125;&#125;;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(case1) == <span class="hljs-number">0</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(case2) == <span class="hljs-number">1</span>) &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题10-升级"><a href="#题10-升级" class="headerlink" title="题10 升级"></a>题10 升级</h1><p>小 W 有 n 个英雄，能力值为 <code>a_i</code> (1 &lt;&#x3D; i &lt;&#x3D; n)，初始能力值都为 1，小 W 可以最多完成 <code>k</code> 次升级，每一次升级从 n 个英雄中挑选出某一个（例如 i ），然后任意选择一个正整数 <code>x</code>，对它进行升级，升级后能力值 <code>a_i = a_i + \text&#123;floor&#125;(a_i / x)</code> （floor 代表下取整）。其中每一个英雄能力值刚好升级成 <code>b_i</code> 时小 W 会获得 <code>c_i</code> 的奖励（每个英雄只能获取一次奖励），最后小 W 想知道最多能获得多少的奖励？</p><h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2><p>贪心？</p><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compare</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;a,  pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.second &gt; b.second;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solution</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, <span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; b, <span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; c)</span> </span>&#123;<br>    <span class="hljs-comment">// Edit your code here</span><br>    <span class="hljs-comment">// 2 4 8 ..  2^n</span><br>    <span class="hljs-comment">// 4次</span><br>    <span class="hljs-comment">//  3 3 1 0</span><br>    <span class="hljs-comment">//  6 5 2 2</span><br>    <span class="hljs-type">double</span> t;<br>    vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">bb</span>(n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        t = <span class="hljs-built_in">log2</span>(b[i]);<br>        <span class="hljs-keyword">if</span>(t == std::<span class="hljs-built_in">floor</span>(t))&#123;<br>            bb[i].first = <span class="hljs-built_in">int</span>(t);<br>            bb[i].second = c[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            bb[i].first = <span class="hljs-built_in">int</span>(t) + <span class="hljs-number">1</span>;<br>            bb[i].second = c[i];<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(bb.<span class="hljs-built_in">begin</span>(), bb.<span class="hljs-built_in">end</span>(), compare);<br>    <span class="hljs-type">int</span> total_k = <span class="hljs-number">0</span> ;<br>    <span class="hljs-type">int</span> total_w = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br><br>        <span class="hljs-keyword">if</span>(total_k + bb[i].first &lt;=k  )&#123;<br>            <span class="hljs-comment">//cout&lt;&lt;&quot;次数: &quot;&lt;&lt;bb[i].first&lt;&lt;&quot; 获得奖励：&quot;&lt;&lt;bb[i].second&lt;&lt;endl;</span><br>            total_k += bb[i].first;<br>            total_w += bb[i].second;<br>        &#125;<br><br>    &#125;<br><br><br><br><br>    <span class="hljs-comment">//cout&lt;&lt;&quot;total_w : &quot;&lt;&lt;total_w&lt;&lt;endl;</span><br>    <span class="hljs-keyword">return</span> total_w;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Add your test cases here</span><br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>&#125;) == <span class="hljs-number">10</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>&#125;) == <span class="hljs-number">0</span>) &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h2><p>使用动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">solution</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span>[] b, <span class="hljs-type">int</span>[] c)</span> &#123;<br>        <span class="hljs-comment">// Edit your code here</span><br>        <span class="hljs-type">int</span>[] cnta = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100000</span>];<br>        Arrays.fill(cnta, <span class="hljs-number">0x3f3f</span>);<br>        cnta[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        cnta[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 2 3 1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; num &lt;= <span class="hljs-number">10000</span>; num++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; x &lt;= num; x++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> num + (<span class="hljs-type">int</span>)(num / x);<br>                <br>                cnta[tmp] =Math.min(cnta[num] + <span class="hljs-number">1</span>, cnta[tmp]);<br>                <br>            &#125;<br>            <br>        &#125;<br><br>        <span class="hljs-comment">//System.out.println(&quot;cnt[5]: &quot;+ cnta[5]);</span><br>        <br><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalW</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//dp[j][k] 对前j个英雄升级k次获得的最大奖励</span><br>        <span class="hljs-comment">// dp[j][k] = max(dp[j-1][k-1] + c[i], dp[j-1][k])</span><br>        <span class="hljs-type">int</span> [][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>][k+<span class="hljs-number">1</span>];<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(b[i-<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)&#123;<br>                cnt += c[i-<span class="hljs-number">1</span>];<br>                <br>                <span class="hljs-comment">//System.out.println(&quot;cnt: &quot;+cnt);</span><br><br>            &#125;<br>            dp[i][<span class="hljs-number">0</span>] = cnt;<br>        &#125;<br><br>        <span class="hljs-comment">// dp[2][2] = dp[2][0] + 5</span><br>       <span class="hljs-comment">// System.out.println(&quot;dp[2][0]: &quot;+ dp[2][0]);</span><br><br><br>       <br>        <br><br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>; j&lt;=k; j++)&#123;<br>                <span class="hljs-keyword">if</span>(j-cnta[b[i-<span class="hljs-number">1</span>]]&gt;=<span class="hljs-number">0</span>)&#123;<br>                    dp[i][j] = Math.max(dp[i-<span class="hljs-number">1</span>][j-cnta[b[i-<span class="hljs-number">1</span>]]]+c[i-<span class="hljs-number">1</span>], dp[i-<span class="hljs-number">1</span>][j]);<br>                    <span class="hljs-comment">// System.out.println(&quot;前i-1个 + 这个： &quot;+ dp[i-1][j-cnta[b[i-1]]]+c[i-1] + &quot; 前i-1个k次： &quot;+ dp[i-1][j]);</span><br>                    <span class="hljs-comment">// System.out.println(&quot;dp[&quot; +i +&quot;][&quot; + j + &quot;]: &quot;+ dp[i][j]);</span><br><br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    dp[i][j] =  dp[i-<span class="hljs-number">1</span>][j];<br>                &#125;<br>                <br><br>           &#125;<br>        &#125;<br><br>        totalW = dp[n][k];<br><br>        <span class="hljs-comment">//System.out.println(&quot;total: &quot;+ totalW);</span><br>        <br><br>        <span class="hljs-keyword">return</span> totalW;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// Add your test cases here</span><br>        System.out.println(solution(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>&#125;) == <span class="hljs-number">12</span>);<br>        System.out.println(solution(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>&#125;) == <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="题11-青海湖租车之旅"><a href="#题11-青海湖租车之旅" class="headerlink" title="题11 青海湖租车之旅"></a>题11 青海湖租车之旅</h1><p><strong># 问题描述</strong></p><p>油价飞升的今天，我们尽量减少花费。我们出门旅游，有时候租车去旅游也是一种不错的方式。这次我们这次旅游是从「青海湖」到「景点 X」，景点 X 可以是「敦煌」、「月牙泉」等，线路的路径是唯一的，假设我们每走 1 km 消耗 1 L 的油，车油箱容量 400L。比如：如果「景点 X」是敦煌，我们在青海湖租车前油箱是 200L 的，在「景点 X」（敦煌）还车的时候也是 200L 的，路上有很多加油站，加油站在青海湖和「景点 X」的连线上。</p><p><strong>## 输入格式</strong></p><p>第 1 行表示「青海湖」到「景点 X」的距离，距离最远不超过 10000 km。</p><p>第 2 行表示接下来 N 行表示 N 个加油站（N 为正整数）。</p><p>接下来 N（1 &lt;&#x3D; N &lt;&#x3D; 100）行表示，每一个加油站情况。每一个加油站包括距离「景点 X」的距离 a km（0 &lt;&#x3D; a &lt;&#x3D; 10000），以及每升汽油的价格 b 元（0 &lt;&#x3D; b &lt;&#x3D; 2000），a 和 b 均为正整数。</p><p><strong>## 输出格式</strong></p><p>如果不能到达目的地「景点 X」，输出 Impossible。</p><p>如果能到达目的地「景点 X」，输出最小花费多少元。</p><p>****输入样例****：</p><p>500</p><p>4</p><p>100 1</p><p>200 30</p><p>400 40</p><p>300 20</p><p>****输出样例****：</p><p>4300</p><h2 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h2><p>500</p><p>100  200  300 400  500</p><p> 0 100 100 100 100</p><h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compare</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;a, vector&lt;<span class="hljs-type">int</span>&gt;&amp;b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] &lt; b[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">solution</span><span class="hljs-params">(<span class="hljs-type">int</span> distance, <span class="hljs-type">int</span> n, std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; gasStations)</span> </span>&#123;<br>    <span class="hljs-comment">// Please write your code here</span><br>    <span class="hljs-type">int</span> dp[<span class="hljs-number">110</span>][<span class="hljs-number">410</span>];<br>    gasStations.<span class="hljs-built_in">push_back</span>(&#123;distance&#125;);<br>    <span class="hljs-built_in">sort</span>(gasStations.<span class="hljs-built_in">begin</span>(), gasStations.<span class="hljs-built_in">end</span>(),<br>        [&amp;](vector&lt;<span class="hljs-type">int</span>&gt; &amp;a, vector&lt;<span class="hljs-type">int</span>&gt; &amp;b) &#123; <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] &lt; b[<span class="hljs-number">0</span>]; &#125;);<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    dis[<span class="hljs-number">0</span>] = gasStations[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        dis[i] = gasStations[i][<span class="hljs-number">0</span>] - gasStations[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dp);<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">200</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (gasStations[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == distance) &#123;<br>        n = i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">400</span>; j++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">400</span>; k++)<br>            <span class="hljs-keyword">if</span> (j + dis[i - <span class="hljs-number">1</span>] - k &gt;= <span class="hljs-number">0</span> &amp;&amp; gasStations[i - <span class="hljs-number">1</span>].<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>)<br>            dp[i][j] = <span class="hljs-built_in">min</span>(dp[i][j], dp[i - <span class="hljs-number">1</span>][k] + (j + dis[i - <span class="hljs-number">1</span>] - k) *<br>                                                        gasStations[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">// cout &lt;&lt; &quot;the answer is&quot;  &lt;&lt;  dp[n - 1][200 + dis[n - 1]] &lt;&lt; &#x27;\n&#x27;;</span><br><br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span> || <span class="hljs-number">200</span> + dis[n - <span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span> || dp[n][<span class="hljs-number">200</span> + dis[n - <span class="hljs-number">1</span>]] == <span class="hljs-number">0x3f3f3f3f</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Impossible&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">to_string</span>(dp[n][<span class="hljs-number">200</span> + dis[n - <span class="hljs-number">1</span>]]);<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; gasStations1 = &#123;&#123;<span class="hljs-number">100</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">200</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">400</span>, <span class="hljs-number">40</span>&#125;, &#123;<span class="hljs-number">300</span>, <span class="hljs-number">20</span>&#125;&#125;;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; gasStations2 = &#123;&#123;<span class="hljs-number">100</span>, <span class="hljs-number">999</span>&#125;, &#123;<span class="hljs-number">150</span>, <span class="hljs-number">888</span>&#125;, &#123;<span class="hljs-number">200</span>, <span class="hljs-number">777</span>&#125;, &#123;<span class="hljs-number">300</span>, <span class="hljs-number">999</span>&#125;, &#123;<span class="hljs-number">400</span>, <span class="hljs-number">1009</span>&#125;, &#123;<span class="hljs-number">450</span>, <span class="hljs-number">1019</span>&#125;, &#123;<span class="hljs-number">500</span>, <span class="hljs-number">1399</span>&#125;&#125;;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; gasStations3 = &#123;&#123;<span class="hljs-number">101</span>&#125;, &#123;<span class="hljs-number">100</span>, <span class="hljs-number">100</span>&#125;, &#123;<span class="hljs-number">102</span>, <span class="hljs-number">1</span>&#125;&#125;;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; gasStations4 = &#123;&#123;<span class="hljs-number">34</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">105</span>, <span class="hljs-number">9</span>&#125;, &#123;<span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;, &#123;<span class="hljs-number">134</span>, <span class="hljs-number">66</span>&#125;, &#123;<span class="hljs-number">215</span>, <span class="hljs-number">90</span>&#125;, &#123;<span class="hljs-number">999</span>, <span class="hljs-number">1999</span>&#125;, &#123;<span class="hljs-number">49</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">10</span>, <span class="hljs-number">1999</span>&#125;, &#123;<span class="hljs-number">200</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">300</span>, <span class="hljs-number">500</span>&#125;, &#123;<span class="hljs-number">12</span>, <span class="hljs-number">34</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">23</span>&#125;, &#123;<span class="hljs-number">46</span>, <span class="hljs-number">20</span>&#125;, &#123;<span class="hljs-number">80</span>, <span class="hljs-number">12</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1999</span>&#125;, &#123;<span class="hljs-number">90</span>, <span class="hljs-number">33</span>&#125;, &#123;<span class="hljs-number">101</span>, <span class="hljs-number">23</span>&#125;, &#123;<span class="hljs-number">34</span>, <span class="hljs-number">88</span>&#125;, &#123;<span class="hljs-number">103</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;&#125;;<br><br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">500</span>, <span class="hljs-number">4</span>, gasStations1) == <span class="hljs-string">&quot;4300&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">500</span>, <span class="hljs-number">7</span>, gasStations2) == <span class="hljs-string">&quot;410700&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">500</span>, <span class="hljs-number">3</span>, gasStations3) == <span class="hljs-string">&quot;Impossible&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">100</span>, <span class="hljs-number">20</span>, gasStations4) == <span class="hljs-string">&quot;0&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">100</span>, <span class="hljs-number">0</span>, std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt;&#123;&#125;) == <span class="hljs-string">&quot;Impossible&quot;</span>) &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题12-和的逆运算"><a href="#题12-和的逆运算" class="headerlink" title="题12 和的逆运算"></a>题12 和的逆运算</h1><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>n 个整数两两相加可以得到 <code>n(n - 1) / 2</code> 个和。我们的目标是：根据这些和找出原来的 n 个整数。</p><p><strong>输入格式</strong></p><p>输入每行一个整数 <code>n</code>（<code>2 &lt; n &lt; 10</code>）开头，接下来是 <code>n(n - 1) / 2</code> 个整数，代表两两相加的和，相邻整数以空格隔开。</p><p><strong>输出格式</strong></p><p>对于输入的每一行，输出一行，包含 n 个整数，按非降序排序，如果有多组解，任意输出一组即可。如果无解，输出 “Impossible”。</p><p><strong>输入样例</strong>：</p><ul><li>3 1269 1160 1663</li><li>3 1 1 1</li><li>5 226 223 225 224 227 229 228 226 225 227</li><li>5 -1 0 -1 -2 1 0 -1 1 0 -1</li><li>5 79950 79936 79942 79962 79954 79972 79960 79968 79924 79932</li></ul><p><strong>输出样例</strong>：</p><ul><li>383 777 886</li><li>Impossible</li><li>111 112 113 114 115</li><li>-1 -1 0 0 1</li><li>39953 39971 39979 39983 39989</li></ul><h2 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h2><table><thead><tr><th>x1+x2</th><th>x1+x3</th><th>x1+x4</th><th>x1+xn</th></tr></thead><tbody><tr><td></td><td>x2+x3</td><td>x2+x4</td><td>x2 + xn</td></tr><tr><td></td><td></td><td>x3 + x4</td><td>x3 + xn</td></tr><tr><td></td><td></td><td></td><td>xn-1 + xn</td></tr></tbody></table><p>s &#x3D; x1 + x2 +… +xn &#x3D; (sum1 +… sumk) &#x2F; (n-1)</p><p>对上述上三角矩阵 从左到右增大  从下到上增大。</p><p>假设，已知x1 </p><p>当前 sums中最小的是 x1+ x2 ——&gt; 推出x2 &#x3D; sums.min -  x1 ——&gt; 从sums里面提出 x1+ x2 </p><p>当前 sums中最小的是 x1+x3 ——&gt; 推出x3 &#x3D; sums.min -  x1 ——&gt;从sums里面剔除 x1+ x3  、 剔除 x2 + x3 (如果他们存在，不存在x1初始化错误)</p><p>当前 sums中最小的是 x1+x4 ——&gt; 推出x4 &#x3D; sums.min -  x1 ——&gt;从sums里面剔除 x1+ x4  、 剔除 x2 + x4 、 剔除 x3 +x4 (如果他们存在，不存在x1初始化错误)</p><h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function">std::string <span class="hljs-title">solution</span><span class="hljs-params">(<span class="hljs-type">int</span> n, std::vector&lt;<span class="hljs-type">int</span>&gt; sums)</span> </span>&#123;<br>    <span class="hljs-comment">// Please write your code here</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>    multiset&lt;<span class="hljs-type">int</span>&gt; s;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> s : sums)<br>    sum += s;<br>    <br>    <span class="hljs-type">int</span> findr = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">sort</span>(sums.<span class="hljs-built_in">begin</span>(), sums.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> s1;<br>    <br>    <span class="hljs-keyword">if</span> (sum % (n - <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>)<br>    &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Impossible&quot;</span>;&#125;<br><br>    <span class="hljs-keyword">for</span>(s1 = -<span class="hljs-built_in">abs</span>(sums[<span class="hljs-number">0</span>]); s1 &lt;= <span class="hljs-built_in">abs</span>(sums[<span class="hljs-number">0</span>]); s1++)&#123;<br>        s.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;sums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            s.<span class="hljs-built_in">insert</span>(sums[i]);<br>            <br>    &#125;<br>        <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>        ans[<span class="hljs-number">1</span>] = s1;<br>        <span class="hljs-comment">//a2 a3 a4...</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n ;i++)&#123;<br>            ans[i] =  *s.<span class="hljs-built_in">begin</span>() - ans[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;i ; j++)&#123;<br>                <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">find</span>(ans[i] + ans[j]) != s.<span class="hljs-built_in">end</span>())&#123;<br>                    s.<span class="hljs-built_in">erase</span>(s.<span class="hljs-built_in">find</span>(ans[i] + ans[j]));<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    flag = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>)&#123;<br>            <br>            <span class="hljs-keyword">break</span>;<br>           <br><br>        &#125;<br>        <br>        <br>            <br>        <br><br><br>    &#125;<br>    string res = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;= n; i++)&#123;<br>        <br>        <span class="hljs-keyword">if</span>(i == n  )&#123;<br>            res += <span class="hljs-built_in">to_string</span>(ans[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            res += <span class="hljs-built_in">to_string</span>(ans[i]) + <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;&quot;res : &quot;&lt;&lt;res&lt;&lt;endl;</span><br><br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// You can add more test cases here</span><br>    std::vector&lt;<span class="hljs-type">int</span>&gt; sums1 = &#123;<span class="hljs-number">1269</span>, <span class="hljs-number">1160</span>, <span class="hljs-number">1663</span>&#125;;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; sums2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; sums3 = &#123;<span class="hljs-number">226</span>, <span class="hljs-number">223</span>, <span class="hljs-number">225</span>, <span class="hljs-number">224</span>, <span class="hljs-number">227</span>, <span class="hljs-number">229</span>, <span class="hljs-number">228</span>, <span class="hljs-number">226</span>, <span class="hljs-number">225</span>, <span class="hljs-number">227</span>&#125;;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; sums4 = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; sums5 = &#123;<span class="hljs-number">79950</span>, <span class="hljs-number">79936</span>, <span class="hljs-number">79942</span>, <span class="hljs-number">79962</span>, <span class="hljs-number">79954</span>, <span class="hljs-number">79972</span>, <span class="hljs-number">79960</span>, <span class="hljs-number">79968</span>, <span class="hljs-number">79924</span>, <span class="hljs-number">79932</span>&#125;;<br><br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">3</span>, sums1) == <span class="hljs-string">&quot;383 777 886&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">3</span>, sums2) == <span class="hljs-string">&quot;Impossible&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">5</span>, sums3) == <span class="hljs-string">&quot;111 112 113 114 115&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">5</span>, sums4) == <span class="hljs-string">&quot;-1 -1 0 0 1&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">5</span>, sums5) == <span class="hljs-string">&quot;39953 39971 39979 39983 39989&quot;</span>) &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题13-简单四则计算"><a href="#题13-简单四则计算" class="headerlink" title="题13 简单四则计算"></a>题13 简单四则计算</h1><p><strong>问题描述</strong></p><p>实现一个基本的计算器来计算一个简单的字符串表达式的值。注意事项如下：</p><ul><li><p>输入是一个字符串表达式（可以假设所给定的表达式都是有效的）</p></li><li><p>字符串表达式可以包含的运算符号为：左括号 <code>(</code>, 右括号 <code>)</code>, 加号 <code>+</code>, 减号 <code>-</code></p></li><li><p>可以包含的数字为：非负整数（&lt; 10）</p></li><li><p>字符串中不包含空格</p></li><li><p>处理除法 case 的时候，可以直接省略小数部分结果，只保留整数部分参与后续运算</p></li><li><p>请不要使用内置的库函数 <code>eval</code></p></li></ul><p><strong>输入格式</strong></p><p>如：<code>3+4*5/(3+2)</code></p><p><strong>数据约束</strong></p><p>见题目描述</p><p><strong>输出格式</strong></p><p>计算之后的数字</p><p><strong>输入样例</strong>：</p><ul><li><code>1+1</code></li><li><code>3+4*5/(3+2)</code></li><li><code>4+2*5-2/1</code></li><li><code>(1+(4+5+2)-3)+(6+8)</code></li></ul><p><strong>输出样例</strong>：</p><ul><li><code>2</code></li><li><code>7</code></li><li><code>12</code></li><li><code>23</code></li></ul><h2 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h2><p>栈！</p><p>如： <code>(1+(4+5+2)-3)+(6+8)</code></p><p>数字栈  + 符号栈</p><p>数字：压入 数字栈</p><p>左括号：压入 符号栈</p><p>右括号：进行括号内的运算，直至遇到左括号</p><p>操作符：若当前操作符优先级 &lt;&#x3D;  栈顶操作符优先级 &amp;&amp; 栈不为空，则先对栈顶操作符进行运算。 把该操作符压栈</p><h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">apply</span><span class="hljs-params">(<span class="hljs-type">char</span> opt1, <span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span></span>&#123;<br>    <span class="hljs-type">int</span> res;<br>    <span class="hljs-keyword">if</span>(opt1 == <span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>            res =  v1 + v2;<br>        &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(opt1 == <span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>            res = v2 -v1;<br>        &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(opt1 == <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>            res =  v2 / v1;<br>        &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(opt1 == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>            res = v1 * v2;<br>        &#125;<br>        <span class="hljs-comment">//cout&lt;&lt;&quot;v1: &quot;&lt;&lt;v1&lt;&lt;&quot; v2: &quot;&lt;&lt;v2&lt;&lt;endl;</span><br>        <span class="hljs-comment">//cout&lt;&lt;&quot;res: &quot;&lt;&lt;res&lt;&lt;endl;</span><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solution</span><span class="hljs-params">(std::string expression)</span> </span>&#123;<br>    <span class="hljs-comment">// Please write your code here</span><br>    stack&lt;<span class="hljs-type">char</span>&gt; opt;<br>    stack&lt;<span class="hljs-type">int</span>&gt; number;<br>    map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; mp;<br>    mp[<span class="hljs-string">&#x27;+&#x27;</span>] = <span class="hljs-number">1</span>;<br>    mp[<span class="hljs-string">&#x27;-&#x27;</span>] = <span class="hljs-number">1</span>;<br>    mp[<span class="hljs-string">&#x27;*&#x27;</span>] = <span class="hljs-number">2</span>;<br>    mp[<span class="hljs-string">&#x27;/&#x27;</span>] = <span class="hljs-number">2</span>;<br><br><br><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;expression.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        <span class="hljs-keyword">if</span>(std::<span class="hljs-built_in">isdigit</span>(expression[i]))&#123;<br><br>            number.<span class="hljs-built_in">push</span>(expression[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(expression[i] == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>            opt.<span class="hljs-built_in">push</span>(expression[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(expression[i] == <span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>            <span class="hljs-comment">//对()里面进行运算</span><br>            <span class="hljs-keyword">while</span>(!opt.<span class="hljs-built_in">empty</span>() &amp;&amp; opt.<span class="hljs-built_in">top</span>()!= <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br><br>                <span class="hljs-type">int</span> v1 = number.<span class="hljs-built_in">top</span>();<br>                number.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">int</span> v2 = number.<span class="hljs-built_in">top</span>();<br>                number.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">char</span> opt1 = opt.<span class="hljs-built_in">top</span>();<br>                opt.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">int</span> res  = <span class="hljs-built_in">apply</span>(opt1, v1, v2);<br>                <span class="hljs-comment">//cout&lt;&lt;&quot;res: &quot;&lt;&lt;res&lt;&lt;endl;</span><br>                number.<span class="hljs-built_in">push</span>(res);<br><br><br><br><br>            &#125;<br>            <span class="hljs-keyword">if</span>(!opt.<span class="hljs-built_in">empty</span>())&#123;<br>                opt.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 读入 + - * /</span><br>            <span class="hljs-keyword">while</span>(!opt.<span class="hljs-built_in">empty</span>() &amp;&amp; mp[expression[i]] &lt;= mp[opt.<span class="hljs-built_in">top</span>()] )&#123;<br><br>                <span class="hljs-type">int</span> v1 = number.<span class="hljs-built_in">top</span>();<br>                number.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">int</span> v2 = number.<span class="hljs-built_in">top</span>();<br>                number.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">char</span> opt1 = opt.<span class="hljs-built_in">top</span>();<br>                opt.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">int</span> res  = <span class="hljs-built_in">apply</span>(opt1, v1, v2);<br>                <br>                <br>                <span class="hljs-comment">//cout&lt;&lt;&quot;res: &quot;&lt;&lt;res&lt;&lt;endl;</span><br>                number.<span class="hljs-built_in">push</span>(res);<br><br>            &#125;<br><br>            <br>            opt.<span class="hljs-built_in">push</span>(expression[i]);<br>            <br><br><br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(!opt.<span class="hljs-built_in">empty</span>())&#123;<br><br>        <span class="hljs-type">int</span> v1 = number.<span class="hljs-built_in">top</span>();<br>        number.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> v2 = number.<span class="hljs-built_in">top</span>();<br>        number.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">char</span> opt1 = opt.<span class="hljs-built_in">top</span>();<br>        opt.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> res  = <span class="hljs-built_in">apply</span>(opt1, v1, v2);<br>        <br>        <span class="hljs-comment">//cout&lt;&lt;&quot;v1: &quot;&lt;&lt;v1&lt;&lt;&quot; v2: &quot;&lt;&lt;v2&lt;&lt;endl;</span><br>        <span class="hljs-comment">//cout&lt;&lt;&quot;res: &quot;&lt;&lt;res&lt;&lt;endl;</span><br>        number.<span class="hljs-built_in">push</span>(res);<br>        <br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;&quot;top: &quot;&lt;&lt; number.top()&lt;&lt;endl;</span><br>    <span class="hljs-keyword">return</span> number.<span class="hljs-built_in">top</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// You can add more test cases here</span><br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-string">&quot;1+1&quot;</span>) == <span class="hljs-number">2</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-string">&quot;3+4*5/(3+2)&quot;</span>) == <span class="hljs-number">7</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-string">&quot;4+2*5-2/1&quot;</span>) == <span class="hljs-number">12</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-string">&quot;(1+(4+5+2)-3)+(6+8)&quot;</span>) == <span class="hljs-number">23</span>) &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题14-二进制之和"><a href="#题14-二进制之和" class="headerlink" title="题14 二进制之和"></a>题14 二进制之和</h1><p><strong># 问题描述</strong></p><p>给定两个二进制字符串，返回他们的和（用十进制字符串表示）。输入为非空字符串且只包含数字 1 和 0 ，请考虑大数问题。时间复杂度不要超过 O(n^2)，其中 n 是二进制的最大长度。</p><p><strong>## 输入格式</strong></p><p>每个样例只有一行，两个二进制字符串以英文逗号“,”分割</p><p><strong>## 输出格式</strong></p><p>输出十进制格式的两个二进制的和</p><p>****输入样例****：</p><p>101,110</p><p>****输出样例****：</p><p>11</p><p>****数据范围****：</p><p>每个二进制不超过 100 个字符，JavaScript 语言下请考虑大数的情况。</p><h2 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h2><p>先把 两个二进制数 按照 二进制加法 相加</p><p>如： 101 + 110 ——&gt; 1011</p><p>对这个新的二进制数，每一位(2^j)相加</p><h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">string <span class="hljs-title">add</span><span class="hljs-params">(string a1 , string a2)</span></span>&#123;<br>    <span class="hljs-comment">//  8918 + 19019</span><br>    string res = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">int</span> in = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> now ;<br>    <span class="hljs-type">int</span> minl = <span class="hljs-built_in">min</span>(a1.<span class="hljs-built_in">size</span>(), a2.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-comment">//cout&lt;&lt;&quot;minl: &quot;&lt;&lt;minl&lt;&lt;endl;</span><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;minl;i++)&#123;<br>        <span class="hljs-type">int</span> tmp = a1[a1.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span> + a2[a2.<span class="hljs-built_in">size</span>() - i <span class="hljs-number">-1</span>]  - <span class="hljs-string">&#x27;0&#x27;</span>+ in;<br>        <span class="hljs-comment">//cout&lt;&lt;&quot;tmp: &quot;&lt;&lt;tmp&lt;&lt;&quot; a1: &quot;&lt;&lt;a1[a1.size() - i - 1]&lt;&lt;&quot; a2: &quot;&lt;&lt;a2[a2.size() - i - 1]&lt;&lt;&quot; in: &quot;&lt;&lt;in&lt;&lt;&quot; i: &quot;&lt;&lt;i&lt;&lt;endl;</span><br>        <br>        in = tmp / <span class="hljs-number">10</span> ;<br>        now = tmp % <span class="hljs-number">10</span> ;<br>        res += <span class="hljs-built_in">to_string</span>(now);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a1.<span class="hljs-built_in">size</span>() &gt; a2.<span class="hljs-built_in">size</span>())&#123;<br>        <span class="hljs-keyword">while</span>(i&lt;a1.<span class="hljs-built_in">size</span>())&#123;<br><br>            <span class="hljs-type">int</span> tmp = a1[a1.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span> + in;<br>            in = tmp /<span class="hljs-number">10</span> ;<br>            now = tmp % <span class="hljs-number">10</span>;<br>            res += <span class="hljs-built_in">to_string</span>(now);<br>            i++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a1.<span class="hljs-built_in">size</span>() &lt; a2.<span class="hljs-built_in">size</span>())&#123;<br><br>        <span class="hljs-keyword">while</span>(i&lt;a2.<span class="hljs-built_in">size</span>())&#123;<br><br>            <span class="hljs-type">int</span> tmp = a2[a2.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span> + in;<br>            in = tmp / <span class="hljs-number">10</span>;<br>            now = tmp % <span class="hljs-number">10</span>;<br>            res += <span class="hljs-built_in">to_string</span>(now);<br>            i++;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;&quot;in: &quot;&lt;&lt;in&lt;&lt;endl;</span><br>    <span class="hljs-keyword">if</span>(in !=<span class="hljs-number">0</span>)&#123;<br>        res += <span class="hljs-built_in">to_string</span>(in);<br>    &#125;<br>    string res1 = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;res.<span class="hljs-built_in">size</span>(); i++)&#123;<br><br>        <span class="hljs-comment">//cout&lt;&lt;&quot;res: &quot;&lt;&lt; res[res.size() - i -1]&lt;&lt;endl;</span><br>res1 += res[res.<span class="hljs-built_in">size</span>() - i <span class="hljs-number">-1</span>];<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> res1;<br>    <br>    <br><br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">solution</span><span class="hljs-params">(std::string binary1, std::string binary2)</span> </span>&#123;<br>    <span class="hljs-comment">// Please write your code here</span><br>    <span class="hljs-type">int</span> in = <span class="hljs-number">0</span>;<br>    string out = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">int</span> i ;<br>    <span class="hljs-type">int</span> maxl = <span class="hljs-built_in">max</span>(binary1.<span class="hljs-built_in">size</span>(), binary2.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-type">int</span> minl = <span class="hljs-built_in">min</span>(binary1.<span class="hljs-built_in">size</span>(), binary2.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-type">int</span> detal = maxl - minl;<br>    <span class="hljs-comment">// 1111 111</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i + minl <span class="hljs-number">-1</span> &gt;=<span class="hljs-number">0</span> ; i--)&#123;<br>        <span class="hljs-type">int</span> b1 = binary1[i + binary1.<span class="hljs-built_in">size</span>() <span class="hljs-number">-1</span> ] - <span class="hljs-string">&#x27;0&#x27;</span> ;<br>        <span class="hljs-type">int</span> b2 = binary2[i + binary2.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-type">int</span> c = b1 + b2 + in;<br>        <br>        in = c / <span class="hljs-number">2</span>;<br>        out += <span class="hljs-built_in">to_string</span>(c%<span class="hljs-number">2</span>);<br>       <br>        <br>        <br>    &#125;<br>    <span class="hljs-keyword">if</span>(binary1.<span class="hljs-built_in">size</span>() &gt; binary2.<span class="hljs-built_in">size</span>())&#123;<br><br>        <span class="hljs-keyword">while</span>(i + binary1.<span class="hljs-built_in">size</span>()   &gt;=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">int</span> c = binary1[i + binary1.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span> + in;<br>            <span class="hljs-comment">//cout&lt;&lt;&quot;c: &quot;&lt;&lt;c&lt;&lt;endl;</span><br>        <br>            in = (c) / <span class="hljs-number">2</span>;<br>            out += <span class="hljs-built_in">to_string</span>(c%<span class="hljs-number">2</span>);<br>        <br>            <br>            <br>            i--;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(binary1.<span class="hljs-built_in">size</span>() &lt; binary2.<span class="hljs-built_in">size</span>())&#123;<br><br>        <span class="hljs-keyword">while</span>(i + binary2.<span class="hljs-built_in">size</span>() &gt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> c = binary2[i + binary2.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span> + in;<br>        <br>        in = (c) / <span class="hljs-number">2</span>;<br>        out += <span class="hljs-built_in">to_string</span>(c%<span class="hljs-number">2</span>);<br>        <br>        i--;<br>       &#125;<br><br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">if</span>(in!=<span class="hljs-number">0</span>)&#123;<br>        out += <span class="hljs-built_in">to_string</span>(in);<br>    &#125;<br>    <span class="hljs-comment">//1110111010101101</span><br>    <span class="hljs-comment">// 89+101 = </span><br>    string pow2j = <span class="hljs-string">&quot;1&quot;</span>;<br>    string pow2;<br><br>    string ress = <span class="hljs-string">&quot;0&quot;</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;out.<span class="hljs-built_in">size</span>(); j++)&#123;<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">if</span>(out[j] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>            pow2 = pow2j;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            pow2 = <span class="hljs-string">&quot;0&quot;</span>;<br>        &#125;<br>        <br>        <br>       <br>        ress = <span class="hljs-built_in">add</span>(ress, pow2);<br>        <span class="hljs-comment">//cout&lt;&lt;&quot;ress: &quot;&lt;&lt;ress&lt;&lt;&quot; pow2: &quot;&lt;&lt;pow2&lt;&lt;&quot; pow2j: &quot;&lt;&lt;pow2j&lt;&lt;endl;</span><br>        pow2j = <span class="hljs-built_in">add</span>(pow2j, pow2j);<br><br>        <br><br>    &#125;<br><span class="hljs-comment">//    cout&lt;&lt;&quot;out: &quot;&lt;&lt;out&lt;&lt;endl;</span><br><span class="hljs-comment">//    cout&lt;&lt;&quot;out1: &quot;&lt;&lt;ress&lt;&lt;endl;</span><br><br><br><br><br>    <span class="hljs-keyword">return</span> ress;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// You can add more test cases here</span><br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-string">&quot;110&quot;</span>) == <span class="hljs-string">&quot;11&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-string">&quot;111111&quot;</span>, <span class="hljs-string">&quot;10100&quot;</span>) == <span class="hljs-string">&quot;83&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-string">&quot;111010101001001011&quot;</span>, <span class="hljs-string">&quot;100010101001&quot;</span>) == <span class="hljs-string">&quot;242420&quot;</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-string">&quot;111010101001011&quot;</span>, <span class="hljs-string">&quot;10010101001&quot;</span>) == <span class="hljs-string">&quot;31220&quot;</span>) &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题15-不再贪心的小包"><a href="#题15-不再贪心的小包" class="headerlink" title="题15 不再贪心的小包"></a>题15 不再贪心的小包</h1><p><strong># 问题描述</strong></p><p>众所周知，小包是一名非常喜欢吃甜点的小朋友，他在工作时特别爱吃下午茶里的甜食。</p><p>这天，下午茶小哥像往常一样送来了今天的 N 个甜点。小包对每个甜点有自己的喜爱值。但是今天的他不再贪心，并不想要喜爱值越高越好。他今天吃的甜点的喜爱值的和，一定要等于他的预期值 S。</p><p>但是他的预期值很高，小哥的甜点似乎不一定满足得了他，所以他准备了 M 个魔法棒，每个魔法棒可以对一个他要吃的甜点使用 1 次，使用后这个甜点的喜爱值会变成原来的喜爱值的阶乘。无法对一个甜点使用多次魔法棒，也不需要使用完所有魔法棒，也无法对不吃的甜点使用魔法棒。</p><p>小包很好奇，他有多少种方案，可以吃到喜爱值刚好为他的预期值的甜点。如果 2 种方案，食用了不同的甜点，或者对不同的甜点使用了魔法棒，都算作不同的方案。</p><p><strong>## 输入格式</strong></p><p>输入第一行，包含 3 个整数 N，M，S</p><p>分别代表甜点的数量，魔法棒的数量，以及小包的预期值</p><p>接下来一行，包含 N 个整数，代表每个甜点的喜爱值</p><p><strong>## 输出格式</strong></p><p>输出为一个整数，代表小包的方案数</p><p><em><strong>*输入样例 1*</strong></em></p><p>3 2 6</p><p>1 2 3</p><p><em><strong>*输出样例 1*</strong></em></p><p>5</p><p><em><strong>*输入样例 2*</strong></em></p><p>3 1 1</p><p>1 1 1</p><p><em><strong>*输出样例 2*</strong></em></p><p>6</p><p><em><strong>*注解*</strong></em></p><p>样例 1 中 </p><p>小包有以下几种方案</p><p>选 1 2 3 不用魔法棒</p><p>选 1 2 3 对 1 用魔法棒</p><p>选 1 2 3 对 2 用魔法棒</p><p>选 1 2 3 对 1 2 用魔法棒</p><p>选 3 对 3 用魔法棒</p><p>样例 2 中 小包选任意 1 个甜点都是 1 种方案，每种方案都可以使用魔法棒不影响结果。所以一共 6 种方案</p><p><em><strong>*数据范围*</strong></em></p><p>10%的数据保证 M &#x3D; 0, 1 &lt;&#x3D; N &lt;&#x3D; 10</p><p>30%的数据保证 1 &lt;&#x3D; N &lt;&#x3D; 12</p><p>100%的数据保证 1 &lt;&#x3D; N &lt;&#x3D; 25,  0 &lt;&#x3D; M &lt;&#x3D; N, 1 &lt;&#x3D; S &lt;&#x3D; 10^16</p><h2 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h2><p>对每个甜点，可以选择 不使用魔法棒 或者 使用魔法棒（在魔法棒总数允许的情况下）</p><p>构造如下数据结构：pair&lt;使用的魔法棒个数， 累积喜爱值&gt;, 可用方法数</p><p>考虑 map[{1, 10}] &#x3D; 2</p><p>如果选择 新甜点like[i]， mp[{1 , 10+value}]  +&#x3D; 2</p><h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function">ll <span class="hljs-title">returnjc</span><span class="hljs-params">(ll v)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(v==<span class="hljs-number">1</span> || v==<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">returnjc</span>(v<span class="hljs-number">-1</span>)*v;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solution</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> s, std::vector&lt;<span class="hljs-type">int</span>&gt; like)</span> </span>&#123;<br>    <span class="hljs-comment">// Please write your code here</span><br>    map&lt;pair&lt;<span class="hljs-type">int</span>, ll&gt;, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-comment">// pair&lt;使用的魔法棒个数， 累积喜爱值&gt;, 可用方法数</span><br>    mp[&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0ll</span>&#125;] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>        <span class="hljs-keyword">auto</span> pp = mp;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [k,v] : pp)&#123;<br>            <span class="hljs-type">int</span> number = k.first;<br>            ll love_value = k.second;<br>            <span class="hljs-type">int</span> method = v;<br>            <span class="hljs-keyword">if</span>(love_value + like[i<span class="hljs-number">-1</span>] &lt;= s)&#123;<br>                <span class="hljs-comment">// 取like[i]，不使用魔法棒</span><br>                mp[&#123;number, love_value + like[i<span class="hljs-number">-1</span>]&#125;] += v;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(number +<span class="hljs-number">1</span> &lt;= m &amp;&amp; love_value + <span class="hljs-built_in">returnjc</span>(like[i<span class="hljs-number">-1</span>]) &lt;=s)&#123;<br>                mp[&#123;number+<span class="hljs-number">1</span>, love_value + <span class="hljs-built_in">returnjc</span>(like[i<span class="hljs-number">-1</span>])&#125;] += v;<br>            &#125;<br><br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;=m; i++)&#123;<br><br>        count += mp[&#123;i, s&#125;];<br><br>    &#125;<br><br>    <span class="hljs-comment">// 1 2 3</span><br>    <span class="hljs-comment">// 1 2 6</span><br>    <span class="hljs-comment">// </span><br><br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//  You can add more test cases here</span><br>    std::vector&lt;<span class="hljs-type">int</span>&gt; like1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; like2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br><br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, like1) == <span class="hljs-number">5</span>) &lt;&lt; std::endl;<br>    std::cout &lt;&lt; (<span class="hljs-built_in">solution</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, like2) == <span class="hljs-number">6</span>) &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题16-二分数字组合"><a href="#题16-二分数字组合" class="headerlink" title="题16 二分数字组合"></a>题16 二分数字组合</h1><p><strong>问题描述</strong></p><p>小F面临一个有趣的挑战：给定一个数组，她需要将数组中的数字分为两组。分组的目标是使得一组数字的和的个位数等于给定的 A，另一组数字的和的个位数等于给定的 B。除此之外，还有一种特殊情况允许其中一组为空，但剩余数字和的个位数必须等于 A 或 B。小F需要计算所有可能的划分方式。</p><p>例如，对于数组 <code>[1, 1, 1]</code> 和目标 A &#x3D; 1，B &#x3D; 2，可行的划分包括三种：每个 1 单独作为一组，其余两个 1 形成另一组。如果 A &#x3D; 3，B &#x3D; 5，当所有数字加和的个位数为 3 或 5 时，可以有一组为非空，另一组为空。</p><p><strong>测试样例</strong></p><p><em><strong>样例1：</strong></em></p><blockquote><p>输入：<code>n = 3,A = 1,B = 2,array_a = [1, 1, 1]</code><br>输出：<code>3</code></p></blockquote><p><em><strong>样例2：</strong></em></p><blockquote><p>输入：<code>n = 3,A = 3,B = 5,array_a = [1, 1, 1]</code><br>输出：<code>1</code></p></blockquote><p><em><strong>样例3：</strong></em></p><blockquote><p>输入：<code>n = 2,A = 1,B = 1,array_a = [1, 1]</code><br>输出：<code>2</code></p></blockquote><p><em><strong>样例4：</strong></em></p><blockquote><p>输入：<code>n = 5,A = 3,B = 7,array_a = [2, 3, 5, 7, 9]</code><br>输出：<code>0</code></p></blockquote><h2 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h2><p>a1 a2 a3 a4 a5 a6</p><p>dp(i,j, k)长i的数组 A&#x3D;j, B&#x3D;k</p><p>if i分给了A</p><p>dp(i+1, j+a[i], k ) +&#x3D; dp(i,j,k)</p><p>dp(i+1, j, k+a[i]) +&#x3D; dp(i,j,k)</p><p>dp[n,A,B]</p><h2 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">solution</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> A, <span class="hljs-type">int</span> B, <span class="hljs-type">int</span>[] array_a)</span> &#123;<br>        <span class="hljs-comment">// Please write your code here</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum_all</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> dp[][][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>][<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br>        <span class="hljs-comment">// dp[i][j][k] 长i的数组划分 满足A=j  B=k 的最多划分方案</span><br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n ;i++)&#123;<br>            sum_all += array_a[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;=<span class="hljs-number">9</span>; j++)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k&lt;=<span class="hljs-number">9</span>; k++)&#123;<br>                    <span class="hljs-comment">//i位置上的元素 要么分给A这边 要么分给B这边</span><br>                    dp[i+<span class="hljs-number">1</span>][(j+array_a[i])%<span class="hljs-number">10</span>][k] += dp[i][j][k];<br>                    dp[i+<span class="hljs-number">1</span>][j][(k+array_a[i])%<span class="hljs-number">10</span>] += dp[i][j][k];<br>                    <br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(sum_all%<span class="hljs-number">10</span> == A ||  sum_all%<span class="hljs-number">10</span> == B)&#123;<br>            dp[n][A][B]++;<br>        &#125;<br>        <br><br><br><br>        <br><br><br><br><br>        <span class="hljs-comment">//System.out.println(&quot;count: &quot;+dp[n][A][B]);</span><br>        <span class="hljs-keyword">return</span> dp[n][A][B];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//  You can add more test cases here</span><br>        <span class="hljs-type">int</span>[] array1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-type">int</span>[] array2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-type">int</span>[] array3 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br>        <br><br>        System.out.println(solution(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, array1) == <span class="hljs-number">3</span>);<br>        System.out.println(solution(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, array2) == <span class="hljs-number">1</span>);<br>        System.out.println(solution(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, array3) == <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题17-创意标题匹配问题"><a href="#题17-创意标题匹配问题" class="headerlink" title="题17 创意标题匹配问题"></a>题17 创意标题匹配问题</h1><p><strong>问题描述</strong></p><p>在广告平台中，为了给广告主一定的自由性和效率，允许广告主在创造标题的时候以通配符的方式进行创意提交。线上服务的时候，会根据用户的搜索词触发的 bidword 对创意中的通配符（通配符是用成对 {} 括起来的字符串，可以包含 0 个或者多个字符）进行替换，用来提升广告投放体验。例如：“{末日血战} 上线送 SSR 英雄，三天集齐无敌阵容！”，会被替换成“帝国时代游戏下载上线送 SSR 英雄，三天集齐无敌阵容！”。给定一个含有通配符的创意和n个标题，判断这句标题是否从该创意替换生成的。</p><p><strong>测试样例</strong></p><p><em><strong>样例1：</strong></em></p><blockquote><p>输入：<code>n = 4, template = &quot;ad&#123;xyz&#125;cdc&#123;y&#125;f&#123;x&#125;e&quot;, titles = [&quot;adcdcefdfeffe&quot;, &quot;adcdcefdfeff&quot;, &quot;dcdcefdfeffe&quot;, &quot;adcdcfe&quot;]</code><br>输出：<code>&quot;True,False,False,True&quot;</code></p></blockquote><p><em><strong>样例2：</strong></em></p><blockquote><p>输入：<code>n = 3, template = &quot;a&#123;bdc&#125;efg&quot;, titles = [&quot;abcdefg&quot;, &quot;abefg&quot;, &quot;efg&quot;]</code><br>输出：<code>&quot;True,True,False&quot;</code></p></blockquote><p><em><strong>样例3：</strong></em></p><blockquote><p>输入：<code>n = 5, template = &quot;&#123;abc&#125;xyz&#123;def&#125;&quot;, titles = [&quot;xyzdef&quot;, &quot;abcdef&quot;, &quot;abxyzdef&quot;, &quot;xyz&quot;, &quot;abxyz&quot;]</code><br>输出：<code>&quot;True,False,True,True,True&quot;</code></p></blockquote><h2 id="结题思路"><a href="#结题思路" class="headerlink" title="结题思路"></a>结题思路</h2><p>递归</p><p>顺序匹配，且删掉 从开始-匹配位 的所有内容，持续匹配。</p><p>全部匹配后可为True。 </p><h2 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">match</span><span class="hljs-params">(String template, String title)</span>&#123;<br><br>        <span class="hljs-keyword">if</span>(template.isEmpty() &amp;&amp; title.isEmpty())&#123;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(title.isEmpty())&#123;<br>            <span class="hljs-keyword">if</span>(template.charAt(<span class="hljs-number">0</span>)==<span class="hljs-string">&#x27;&#123;&#x27;</span> &amp;&amp; template.charAt(template.length()-<span class="hljs-number">1</span>)==<span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(template.isEmpty())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(template.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>            <span class="hljs-keyword">while</span>(template.charAt(i)!= <span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; k &lt;= title.length() ; k++)&#123;<br>                <span class="hljs-keyword">if</span>(match(template.substring(i+<span class="hljs-number">1</span>), title.substring(k)))&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(template.charAt(<span class="hljs-number">0</span>) != title.charAt(<span class="hljs-number">0</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> match(template.substring(<span class="hljs-number">1</span>), title.substring(<span class="hljs-number">1</span>));<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">solution</span><span class="hljs-params">(<span class="hljs-type">int</span> n, String template_, String[] titles)</span> &#123;<br>        <span class="hljs-comment">// Please write your code here</span><br>        <span class="hljs-comment">// ad&#123;xyz&#125;cdc&#123;y&#125;f&#123;x&#125;e 与 adcdcefdfeff</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i!=n-<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">if</span>(match(template_, titles[i]))&#123;<br>                    res += <span class="hljs-string">&quot;True,&quot;</span>;<br>    <br>                &#125;<br>                <span class="hljs-keyword">else</span> res += <span class="hljs-string">&quot;False,&quot;</span>;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(match(template_, titles[i]))&#123;<br>                    res += <span class="hljs-string">&quot;True&quot;</span>;<br>    <br>                &#125;<br>                <span class="hljs-keyword">else</span> res += <span class="hljs-string">&quot;False&quot;</span>;<br>            &#125;<br>            <br>        &#125;<br>        <br>        System.out.println(<span class="hljs-string">&quot;res: &quot;</span>+res);<br><br>        <span class="hljs-keyword">return</span> res;<br><br>        <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//  You can add more test cases here</span><br>        String[] testTitles1 = &#123;<span class="hljs-string">&quot;adcdcefdfeffe&quot;</span>, <span class="hljs-string">&quot;adcdcefdfeff&quot;</span>, <span class="hljs-string">&quot;dcdcefdfeffe&quot;</span>, <span class="hljs-string">&quot;adcdcfe&quot;</span>&#125;;<br>        String[] testTitles2 = &#123;<span class="hljs-string">&quot;CLSomGhcQNvFuzENTAMLCqxBdj&quot;</span>, <span class="hljs-string">&quot;CLSomNvFuXTASzENTAMLCqxBdj&quot;</span>, <span class="hljs-string">&quot;CLSomFuXTASzExBdj&quot;</span>, <span class="hljs-string">&quot;CLSoQNvFuMLCqxBdj&quot;</span>, <span class="hljs-string">&quot;SovFuXTASzENTAMLCq&quot;</span>, <span class="hljs-string">&quot;mGhcQNvFuXTASzENTAMLCqx&quot;</span>&#125;;<br>        String[] testTitles3 = &#123;<span class="hljs-string">&quot;abcdefg&quot;</span>, <span class="hljs-string">&quot;abefg&quot;</span>, <span class="hljs-string">&quot;efg&quot;</span>&#125;;<br>       <br>        System.out.println(solution(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;ad&#123;xyz&#125;cdc&#123;y&#125;f&#123;x&#125;e&quot;</span>, testTitles1).equals(<span class="hljs-string">&quot;True,False,False,True&quot;</span>));<br>        System.out.println(solution(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;&#123;xxx&#125;h&#123;cQ&#125;N&#123;vF&#125;u&#123;XTA&#125;S&#123;NTA&#125;MLCq&#123;yyy&#125;&quot;</span>, testTitles2).equals(<span class="hljs-string">&quot;False,False,False,False,False,True&quot;</span>));<br>        System.out.println(solution(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&#123;bdc&#125;efg&quot;</span>, testTitles3).equals(<span class="hljs-string">&quot;True,True,False&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题18-数字翻译成字符串的可能性"><a href="#题18-数字翻译成字符串的可能性" class="headerlink" title="题18 数字翻译成字符串的可能性"></a>题18 数字翻译成字符串的可能性</h1><p>小M获得了一个任务，需要将数字翻译成字符串。翻译规则是：0对应”a”，1对应”b”，依此类推直到25对应”z”。一个数字可能有多种翻译方法。小M需要一个程序来计算一个数字有多少种不同的翻译方法。</p><p>例如：数字<code>12258</code>可以翻译成 “bccfi”, “bwfi”, “bczi”, “mcfi” 和 “mzi”，共5种方式。</p><h2 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h2><p>dp</p><h2 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">solution</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-comment">// Please write your code here</span><br>        <span class="hljs-comment">// 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 </span><br>        <span class="hljs-comment">// a b c d e f g h i j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z</span><br>        <span class="hljs-comment">// 1* (*可以是0到9) </span><br>        <span class="hljs-comment">// 2*（*可以是0到5）</span><br>        <span class="hljs-comment">//dp[i]前i个字符最多有dp[i]种翻译方式</span><br>        <span class="hljs-comment">// dp[3] = dp[2] + dp[1]</span><br>        <span class="hljs-comment">// dp[i] = dp[i-1] + dp[i-2] //num[i:i+2]是一个小于25的数字</span><br>        <span class="hljs-type">int</span> []dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> []nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-type">int</span> []nums2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(num!=<span class="hljs-number">0</span>)&#123;<br>            <br>            nums[i] = num % <span class="hljs-number">10</span>;<br>            num /= <span class="hljs-number">10</span>;<br>            i++;<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;i; j++)&#123;<br>            nums2[j] = nums[i-j-<span class="hljs-number">1</span>];<br><br>        &#125;<br>        <span class="hljs-comment">// i为nums的长度</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>; j&lt;=i; j++)&#123;<br>            <span class="hljs-keyword">if</span>(nums2[j-<span class="hljs-number">2</span>] * <span class="hljs-number">10</span> + nums2[j-<span class="hljs-number">1</span>] &lt;= <span class="hljs-number">25</span>  &amp;&amp;  nums2[j-<span class="hljs-number">2</span>] * <span class="hljs-number">10</span> + nums2[j-<span class="hljs-number">1</span>] &gt;= <span class="hljs-number">10</span>  )&#123;<br>                dp[j] =  dp[j-<span class="hljs-number">1</span>] + dp[j-<span class="hljs-number">2</span>];<br><br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                dp[j] = dp[j-<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//System.out.println(&quot;res: &quot;+dp[i]);</span><br>        <span class="hljs-keyword">return</span> dp[i];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// You can add more test cases here</span><br>        System.out.println(solution(<span class="hljs-number">12258</span>) == <span class="hljs-number">5</span>);<br>        System.out.println(solution(<span class="hljs-number">1400112</span>) == <span class="hljs-number">6</span>);<br>        System.out.println(solution(<span class="hljs-number">2110101</span>) == <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="题19-五子棋获胜策略"><a href="#题19-五子棋获胜策略" class="headerlink" title="题19 五子棋获胜策略"></a>题19 五子棋获胜策略</h1><p>假设存在一个五子棋棋盘，大小未知。棋盘上已经摆放了一些白色棋子，现在你的手中还有一个白色棋子。你的任务是找出在棋盘的哪些位置摆放这个棋子，能够使棋盘上出现五颗棋子连成一线（不限于横向、纵向或斜向）。</p><p>备注：棋盘上当前不存在连成一条线的五个棋子，但至少存在一个点可以通过摆放使得形成五子连线。</p><p>（0，0） （0，1） （0，2） （0，3） （0，4）</p><p>（1，0） （1，1） （1，2） （1，3） （1，4）</p><p>（2，1） （2，2） （2，3） （2，4） （2，5）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于图片生成诗句（三）</title>
    <link href="/2024/09/17/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2024/09/17/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="基于图片生成诗句（三）"><a href="#基于图片生成诗句（三）" class="headerlink" title="基于图片生成诗句（三）"></a>基于图片生成诗句（三）</h1><h2 id="1-改进措施"><a href="#1-改进措施" class="headerlink" title="1 改进措施"></a>1 改进措施</h2><p>改进来源：<a href="https://aclanthology.org/2020.acl-main.68.pdf">Rigid Formats Controlled Text Generation (aclanthology.org)</a></p><p>诗句的生成对 句子的<strong>韵律，格式，完整性</strong> 要求较高。</p><p>是否能 指定 诗句的格式模板 从而生成诗句？</p><p>基于<strong>预定义格式约束</strong>的诗句生成</p><h3 id="1-1-Contributions"><a href="#1-1-Contributions" class="headerlink" title="1.1 Contributions"></a>1.1 Contributions</h3><ul><li>一个新的用于严格格式控制文本生成的 预训练和微调的架构</li><li>制定 <strong>符号集</strong> 来投稿建模性能、并改进注意力机制</li><li>收集了 中文和英文的语料集、并设计了 自动评价标准 和 人工评价标准</li></ul><h3 id="1-2-任务定义"><a href="#1-2-任务定义" class="headerlink" title="1.2 任务定义"></a>1.2 任务定义</h3><p><img src="/2024/09/17/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%B8%89%EF%BC%89/image-20240917191035371.png" alt="image-20240917191035371"></p><p><strong>Input：</strong>严格格式$C$</p><img src="/2024/09/17/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%B8%89%EF%BC%89/image-20240917191259757.png" alt="image-20240917191259757" style="zoom:80%;"><p>$C$包含 10 个单词 和 2个 标点符号。</p><p>$C$是任意的 灵活的！</p><p><strong>Output：</strong>符合定义格式C的自然语言句子$Y$</p><img src="/2024/09/17/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%B8%89%EF%BC%89/image-20240917191503177.png" alt="image-20240917191503177" style="zoom:80%;"><p><strong>Polishing：</strong>基于$Y$重建一个新格式$C^{‘}$，掩盖部分内容</p><img src="/2024/09/17/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%B8%89%EF%BC%89/image-20240917191835087.png" alt="image-20240917191835087" style="zoom:80%;"><p><strong>目标：</strong>找到一个从$C$到$Y$的映射函数 $Y &#x3D; G(C)$</p><h3 id="1-3-框架细节"><a href="#1-3-框架细节" class="headerlink" title="1.3 框架细节"></a>1.3 框架细节</h3><ul><li><p>引入符号：</p><p>$C &#x3D; { c_i}$ 控制格式，押韵</p><p>$P &#x3D; {p_i}$ 内部位置符号，每个句子中的tokens的局部位置 ， 以提高押韵和句子完整性</p><p>$S &#x3D; {s_i}$ 分段符号，识别句子边界，提高句子完整性</p></li><li><p>细节：</p><p><strong>输入：</strong><img src="/2024/09/17/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%B8%89%EF%BC%89/image-20240917192859778.png" alt="image-20240917192859778"></p><p>&lt;$&#x2F;s$&gt;代表子句间的分隔符  eos表示整个句子的结束。</p><p><strong>格式和押韵符号：</strong><img src="/2024/09/17/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%B8%89%EF%BC%89/image-20240917193108926.png" alt="image-20240917193108926" style="zoom:80%;"></p><p>$c_0$表示普通的tokens， $c_1$表示标点符号， $c_2$表示押韵的tokens如love, remove</p><p><strong>Intra-Position Symbols：</strong><img src="/2024/09/17/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%B8%89%EF%BC%89/image-20240917193409258.png" alt="image-20240917193409258" style="zoom:80%;"></p><p>$p_i$表示同一子句中的tokens的局部位置。按照降序排序位置索引符号。</p><p>这样，如果$p_0$表示标点符号 那么任意推测 $p_1$表示句子的结束词。</p><p><strong>分段符号：</strong><img src="/2024/09/17/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%B8%89%EF%BC%89/image-20240917193701760.png" alt="image-20240917193701760" style="zoom:80%;"></p><p>$s_i$表示句子$i$的符号索引。通过定义句子索引特征来增强不同位置的句子之间的相互作用。</p></li></ul><h3 id="1-4-训练"><a href="#1-4-训练" class="headerlink" title="1.4 训练"></a>1.4 训练</h3><ol><li><p>编码输入 ：</p><p>xs_tpl, xs_seg, xs_pos ——&gt; encode ——&gt; enc （输入序列的编码表示） + src_padding_mask （填充掩码）</p></li><li><p>初始化自注意力掩码：</p></li><li></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, xs_tpl, xs_seg, xs_pos, ys_truth, ys_inp, ys_tpl, ys_seg, ys_pos, msk</span>):<br>        enc, src_padding_mask = self.encode(xs_tpl, xs_seg, xs_pos)<br>        seq_len, bsz = ys_inp.size()<br>        self_attn_mask = self.attn_mask(seq_len)<br>        x = self.tok_embed(ys_inp) + self.pos_embed(ys_inp) + self.tok_embed(ys_tpl) + self.tok_embed(ys_seg) + self.tok_embed(ys_pos)<br>        x = self.emb_layer_norm(x)<br>        x = F.dropout(x, p=self.dropout, training=self.training)<br>        padding_mask = torch.eq(ys_truth, self.vocab.padding_idx)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> padding_mask.<span class="hljs-built_in">any</span>():<br>            padding_mask = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">for</span> layer <span class="hljs-keyword">in</span> self.layers:<br>            x, _ ,_ = layer(x, self_padding_mask=padding_mask, \<br>                               self_attn_mask = self_attn_mask, \<br>                               external_memories = enc, \<br>                               external_padding_mask = src_padding_mask,)<br><br>        x = self.one_more_layer_norm(gelu(self.one_more(x)))<br>        pred = torch.softmax(self.out_proj(x), -<span class="hljs-number">1</span>)<br><br>        loss = self.label_smotthing_loss(pred, ys_truth, msk)<br>        <br>        _, pred_y = pred.<span class="hljs-built_in">max</span>(-<span class="hljs-number">1</span>)<br>        tot_tokens = msk.<span class="hljs-built_in">float</span>().<span class="hljs-built_in">sum</span>().item()<br>        acc = (torch.eq(pred_y, ys_truth).<span class="hljs-built_in">float</span>() * msk).<span class="hljs-built_in">sum</span>().item()<br>       <br>        nll, ppl = self.nll_loss(pred, ys_truth, msk)<br>        <span class="hljs-keyword">return</span> (pred_y, ys_truth), loss, acc, nll, ppl, tot_tokens, bsz<br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="Q1：-格式控制解释一下？"><a href="#Q1：-格式控制解释一下？" class="headerlink" title="Q1： 格式控制解释一下？"></a>Q1： 格式控制解释一下？</h3><p>对于一首词来说，他每个分句的长度可能是5，5，7，5，那么我在最开始的时候就会给定对于这样一个诗句呢，就把它做如下的处理，首先第1点就是给他进行押韵的符号表示。那么什么是押韵的符号表示呢？就是我会在每一个句子句号的前一个字那么它可能是韵脚，那么我就会把这个字呢，就是用符号c2来代替，那么对于一般普通的字呢，那么我就用 c1来表示，那么对于那些标点符号我用c0来表示。第2点呢就是对于句子内部位置的这个字的处理，那么这是怎么处理的呢？我用这个符号p表示，那么对于一个分句从第1个字到最后一个字，那么我是用这样来表示的，如果说它有这个分句长度是5的话，那么第1个字我用p4第2个字就是p3，那我们意思类推一直到p0那么毗邻的。话，它就会是一个标点。然后第3个我做的处理就是对于每个分句之间的这样一个处理，第1个分句我用s0来表示，那么它的每一个字都是s0，那么第2分句就是s1。那么我对于我输入的一个诗句，首先经过这个押韵的表示，再经过再加上我的句子的内部。的表示，那第3个再经过我的啊分句这个sigma表示那么再输入到我的模型中通过多层的符号级的表示那么让我的模型更理解到我这个把我的这个诗句做一个更全面的表征，使他到时候是他最后生成诗句的时候呢，能够学习到我的样本的这样一个押韵韵脚这样一个句子内部的这样一个顺序已知的以及不同分级之间的区别那么。让它生成的时候的更符合我想要求的这样一个格式。</p><h3 id="Q2-用到的数据？如何处理数据？是否要分词？"><a href="#Q2-用到的数据？如何处理数据？是否要分词？" class="headerlink" title="Q2: 用到的数据？如何处理数据？是否要分词？"></a>Q2: 用到的数据？如何处理数据？是否要分词？</h3><p>宋词 （腾讯开源的数据集） + 唐诗（清华AI写诗的比赛上的数据）</p><p>词牌名&#x2F;标题   诗句内容</p><p>处理方法：1）提取关键词 （与关键词表交集最多的几个词）2) 把句子中的每个字作为一个单独的token，做以下处理：首先是对每个韵脚用符号c2表示，每个普通的字用c1表示，标点符号用c0表示； 第二个处理时 把不同的分句加以区别，如第一个分句s0, 第二个分句s2， 第三个处理是 对同一个句子内部顺序的表示，假如这个句子长度为5，那么第一个字表示为p_5，最后一个字表示为p_1,结尾的标点为p_0。</p><p>不用分词</p><h3 id="Q3：如何评价你生成的诗句？"><a href="#Q3：如何评价你生成的诗句？" class="headerlink" title="Q3：如何评价你生成的诗句？"></a>Q3：如何评价你生成的诗句？</h3><p>评价一：输出的诗句进入CLIP模型再做编码，与图片计算相似度</p><p>评价二：想要评价格式生成是否正确，在n个样本里面，统计有多少个样本的output的格式和原始一致。</p><p>评价三：人工评价</p><h3 id="Q4：介绍CLIP模型"><a href="#Q4：介绍CLIP模型" class="headerlink" title="Q4：介绍CLIP模型"></a>Q4：介绍CLIP模型</h3><h3 id="Q5：介绍Transformer"><a href="#Q5：介绍Transformer" class="headerlink" title="Q5：介绍Transformer"></a>Q5：介绍Transformer</h3><h3 id="Q6-什么是自回归语言模型？"><a href="#Q6-什么是自回归语言模型？" class="headerlink" title="Q6: 什么是自回归语言模型？"></a>Q6: 什么是自回归语言模型？</h3><h3 id="Q7：怎么改进的注意力机制？-那个掩码是什么"><a href="#Q7：怎么改进的注意力机制？-那个掩码是什么" class="headerlink" title="Q7：怎么改进的注意力机制？ 那个掩码是什么"></a>Q7：怎么改进的注意力机制？ 那个掩码是什么</h3><h3 id="Q8：Transformer中涉及的3种掩码？"><a href="#Q8：Transformer中涉及的3种掩码？" class="headerlink" title="Q8：Transformer中涉及的3种掩码？"></a>Q8：Transformer中涉及的3种掩码？</h3><p>1）对输入填充的部分，做padding， 那么在做自注意力计算时应该忽略这些填充的位置。填充掩码通常在softmax函数之前应用，奖填充位置的值设置为狠下的负数，让softmax之后其权重为0</p><p>2）DECODER的self_atten掩码：在DECODER中，以确保在预测下一个词时，模型只能使用当前位置以前的信息。</p><p>3）DECODER的cross-atten掩码：填充了padding，要掩码</p><h3 id="Q9：CLIP用到了对比学习，解释一下？"><a href="#Q9：CLIP用到了对比学习，解释一下？" class="headerlink" title="Q9：CLIP用到了对比学习，解释一下？"></a>Q9：CLIP用到了对比学习，解释一下？</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GCN相关介绍</title>
    <link href="/2024/09/15/GCN%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/09/15/GCN%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="GCN相关介绍"><a href="#GCN相关介绍" class="headerlink" title="GCN相关介绍"></a>GCN相关介绍</h1><p>图数据有一个很明显的特征，<strong>相邻或相近的节点存在一定的空间依赖关系</strong>，这种关系传统神经网络很难捕获，为此，图神经网络应运而出。</p><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h2><p>图网络核心思想是依据<strong>图结构的空间依赖关系</strong>来表征现实世界中真实的特征之间的相互作用关系，通过对节点特征进行<strong>聚合</strong>生成信的节点的特征表示。</p><p>GCN 本质： 提取 图结构 的<strong>空间特征</strong></p><h2 id="2-基于空间角度的GCN"><a href="#2-基于空间角度的GCN" class="headerlink" title="2 基于空间角度的GCN"></a>2 基于空间角度的GCN</h2><h3 id="2-1-邻接矩阵A"><a href="#2-1-邻接矩阵A" class="headerlink" title="2.1 邻接矩阵A"></a>2.1 邻接矩阵A</h3><p>对BP神经网络：$f &#x3D; \sigma(XW)$</p><p>对图卷积网络：$f &#x3D; \sigma(AXW)$， $A$指的是图结构的表示矩阵。</p><p>A：[n,n] $A_{i,j}$表示第$i$节点和第$j$节点之间的联系。 $AX$表示来利用图的结构对各个样本的特征创新整合为新的输入。</p><h3 id="2-2-考虑自身信息的邻接矩阵"><a href="#2-2-考虑自身信息的邻接矩阵" class="headerlink" title="2.2 考虑自身信息的邻接矩阵"></a>2.2 考虑自身信息的邻接矩阵</h3><p>在上一步 只考虑了节点的邻居节点的信息，并未考虑节点本身的信息，那么对于具有相同邻居的不同节点，他们的表示就是一样的，为了解决这个问题，在邻接矩阵上加一个单位矩阵：</p><p>$ \tilde{A} &#x3D; A + I$ ——&gt; $f &#x3D; \sigma( \tilde AXW)$</p><h3 id="2-3-归一化"><a href="#2-3-归一化" class="headerlink" title="2.3 归一化"></a>2.3 归一化</h3><p>我们对每个节点的空间信息都进行了聚合后，发现每一次相加都改变了特征的数量级，随着一次次特征的提取，会导致数量级越来越大。</p><p>这时，引入 度矩阵$D$（$A$行求和） 来求平均 </p><p>类比 $ \rho(a,b) &#x3D; \frac{cov(a,b)}{\sqrt{D(a)}\sqrt{D(b)}}$</p><p>做这样的归一化：${\tilde{D}}^{-\frac{1}{2}} \tilde{A} {\tilde{D}}^{-\frac{1}{2}} X$</p><h2 id="3-基于频域角度的GCN"><a href="#3-基于频域角度的GCN" class="headerlink" title="3 基于频域角度的GCN"></a>3 基于频域角度的GCN</h2><h2 id="4-实现"><a href="#4-实现" class="headerlink" title="4 实现"></a>4 实现</h2>]]></content>
    
    
    
    <tags>
      
      <tag>GCN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CLIP模型原理及实现</title>
    <link href="/2024/09/15/CLIP%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/09/15/CLIP%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="CLIP模型"><a href="#CLIP模型" class="headerlink" title="CLIP模型"></a>CLIP模型</h1><p>CLIP（Contrastive Language-Image Pre-training）是OpenAI在2021年发布的一种用于图像和文本联合表示学习的模型。CLIP的核心思想是通过<strong>对比学习</strong>来预训练一个模型，使其能够理解图像和文本之间的关系。</p><p>对于一个批次中的每个图像-文本对，模型会计算图像和文本的特征向量，并使用对比损失函数来优化模型参数。对比损失函数的目标是使得匹配的图像-文本对的特征向量尽可能接近，而不匹配的图像-文本对的特征向量尽可能远离。</p><h2 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="1 前置知识"></a>1 前置知识</h2><h3 id="1-1-对比学习"><a href="#1-1-对比学习" class="headerlink" title="1.1 对比学习"></a>1.1 对比学习</h3><p>侧重于通过<strong>对比正反两方面</strong>的实例来提取有意义的表征。</p><p>分类：</p><ul><li>监督对比学习：利用标记数据来明确训练模型以区分相似和不相似的实例。</li><li>自监督对比学习：从未标记的数据中学习表示，而不依赖于显式标签。 SSCL 利用借口任务的设计，从未标记的数据创建正负对。</li></ul><h3 id="1-2-图像编码器—VIT"><a href="#1-2-图像编码器—VIT" class="headerlink" title="1.2 图像编码器—VIT"></a>1.2 图像编码器—VIT</h3><p><img src="/2024/09/15/CLIP%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/image-20240915200023055.png" alt="image-20240915200023055"></p><ul><li><p>图像特征嵌入模块：</p><p>标准的VIT模型对图像的输入尺寸有要求，必须为$224<em>224$.图像输入之后首先是需要进行patch分块，一般设置patch的尺寸为$16</em>16$，那么一共能生成(224&#x2F;16)*(224&#x2F;16)&#x3D;196个patch块。</p><p>实现方法：[224,224,3]—(卷积块16*16, s&#x3D;16,p&#x3D;0, out_channels&#x3D;768)—&gt;[14,14,768]—（展平）—&gt;[196, 768]</p></li><li><p>Transformer Encoder：LN + Multi-Head + MLP</p><ul><li><p>LayerNom：对每一层的样本做归一化，不易受到batch_size的影响，能处理可变长的序列数据。且有助于在深层网络中保持训练的稳定性。</p></li><li><p>Multi-Head Attention：</p><ul><li><p>自注意力：$soft(\frac{X W^Q (X W^K)^T}{\sqrt(d_k)})XW^V$</p><p>多头注意力机制能够联合来自不同head部分学习到的信息。根据使用的head的数目h进一步把得到的$W^Q, W^K, W^V$均分成h份，之后再做concat。</p></li></ul><p><img src="/2024/09/15/CLIP%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/image-20240915201939362.png" alt="image-20240915201939362"></p></li><li><p>FFN：</p><p>norm——&gt; linear ——&gt; gelu ——&gt; dropout——&gt; linear ——&gt; dropout</p><p>(为什么是gelu函数？  RELU $max(0,x)$虽然非线性，但是在x&#x3D;0不可导，gelu：$x \phi(x)， \phi(x)$是N(0,1)的CDF，其在x&#x3D;0处可导）</p></li></ul></li><li><p>MLP分类：使用非线性激活函数去做分类的预测</p></li></ul><h3 id="1-3-文本编码器—BERT"><a href="#1-3-文本编码器—BERT" class="headerlink" title="1.3 文本编码器—BERT"></a>1.3 文本编码器—BERT</h3><h2 id="2-模型"><a href="#2-模型" class="headerlink" title="2 模型"></a>2 模型</h2><p><img src="/2024/09/15/CLIP%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/image-20240915210430393.png" alt="image-20240915210430393"></p><ul><li><p>特征提取：</p><p>Imag ——&gt; (Imag_Encoder) ——&gt; Imag_Feature [n, d_i]</p><p>Text ——&gt; (Text Encoder ) ——&gt; Text Feature [n, d_t]</p></li><li><p>线性投影到一个特征空间：</p><p>Imag_Feature ——&gt; (Projection) ——&gt; Image_projection [n, d_out]</p><p>Text_Feature ——&gt; (Projection) ——&gt; Text_projection [n, d_out]</p></li><li><p>计算余弦相似度 ：logits &#x3D; np.dot()…</p></li><li><p>计算损失：损失设计包括两个方向：从图像到文本和从文本到图像</p><p>loss_i &#x3D; cross_entropy_loss(logits, labels, axis&#x3D;0)</p><p>loss_t &#x3D; cross_entropy_loss(logits, labels, axis&#x3D;1)</p><p>loss &#x3D; (loss_i + loss_t)&#x2F;2</p></li></ul><h1 id="被问过的问题"><a href="#被问过的问题" class="headerlink" title="被问过的问题"></a>被问过的问题</h1><ul><li><p>Q1： 为什么CLIP模型每个输入被tokenizer成 77个 token？</p><p>A：CLIP模型在处理文本输入时，将每个输入限制为最多77个token，这是因为模型在设计时设置了一个固定长度的上下文窗口。。CLIP模型使用了Byte-Pair Encoding (BPE)分词器，这种方法会将常见的词作为单个token，但不常见的词会被拆分成多个token。</p></li><li><p>Q2：多头注意力机制里面为什么要除以$sqrt(d_k)$？</p><p>A：$d_k$指的是Q和K的维度，也就是隐藏层的维度。在进行dot-product操作时，$d_k$过大会导致数值变得很大，softmax后的值分散很大，模型的方差会很大，不利于模型的训练。</p></li><li><p>Q3：为什么残差连接能防止梯度消失？</p><p>A：梯度消失是指在深层网络中，梯度在反向传播过程中逐渐变小，以至于网络的权重无法得到有效更新的现象。在反向传播过程中，由于跳跃连接的存在，梯度可以直接流向网络的早期层，保持了梯度的规模，使得深层网络的训练变得更加稳定。上层梯度* (1+ 这层函数对参数的偏导数 )</p></li><li><p>Q4：VIT中的FFN的作用？</p><p>A：FFN通常时两个MLP+一个非线性激活构成，在前面的多头注意力中只有dot-product操作，除去softmax后，不包含非线性操作，所以在FFN中涌入非线性变换，能够提升模型的表征能力，从而捕获更复杂的特征。</p></li><li><p>Q5：VIT中dropout的作用？</p><p>Dropout是一种正则化技术，在训练过程中随机使得一些神经元失效，防止模型过度依赖于特定的输入特征，避免过拟合。VIT中使用的时DropPath，也叫Stochastic Depth， 他时随机丢弃整个网络层或者层的一部分，过随机地将网络中的某些路径的输出置为零，模拟了网络的不同子网络的组合。</p></li><li></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>diffusion模型介绍</title>
    <link href="/2024/09/07/diffusion%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/09/07/diffusion%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="Diffusion模型"><a href="#Diffusion模型" class="headerlink" title="Diffusion模型"></a>Diffusion模型</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h2><p>扩散模型本质是<strong>学习真实的数据分布</strong>，从而从中抽样，生成新样本。</p><p>diffusion过程：不断给真实图片加噪声，直至变成纯噪声。如何，训练一个解码器去噪，逐步进行，直至回复成原本的真实样本。</p><h2 id="2-生成模型的目标"><a href="#2-生成模型的目标" class="headerlink" title="2 生成模型的目标"></a>2 生成模型的目标</h2><p>学习到的数据分布要尽可能符合原始训练数据分布。</p><ul><li>$P_{\theta}(x)$模型所产生的图片的改了分布， $\theta$表示模型的参数</li><li>$P_{data}(x)$训练数据的概率分布，也就是真实图片的分布，$data$表示真十四数据，与模型无关。</li></ul><p>为了衡量这两个分布之间的距离，通常使用<strong>KL散度</strong>，则目标函数表示如下：</p><p>$$ \begin{align}<br>\arg\min_{\theta} KL(P_{data}||P_{\theta}) &amp;&#x3D; \arg\min_{\theta} \int_x P_{data}(x) \log\frac{p_{data}(x)}{p_{\theta}(x)} \<br>&amp;&#x3D; \arg\min_{\theta} \left( \int_x P_{data}(x) \log P_{data}(x) - \int_x P_{data}(x) \log p_{\theta}(x) \right) \  &amp;&#x3D; \arg\max_{\theta} \left( \int_x P_{data}(x) \log p_{\theta}(x) - \int_x P_{data}(x) \log P_{data}(x)  \right) (第二项为常数) \ &amp;&#x3D; \arg\max_{\theta} \int_x P_{data}(x) \log p_{\theta}(x)  \ &amp;&#x3D; \arg\max_{\theta} E_{x~P_{data(x)}} \log p_{\theta}(x) \ &amp; \approx \arg\max_{\theta} \sum_{i&#x3D;1}^{m} \log p_{\theta}(x_i) (近似为从真实世界抽样m张图片) \ &amp;&#x3D; \arg\max_{\theta} \log \prod_{i&#x3D;1}^{m} p_{\theta}(x_i) \ &amp;&#x3D; \arg\max_{\theta}  \prod_{i&#x3D;1}^{m} p_{\theta}(x_i)<br>\end{align}   $$</p><p>从上述推导过程，我们发现，优化目标变成了使得<strong>模型产生真实图片的概率最大</strong></p><h2 id="3-前向噪声扩散"><a href="#3-前向噪声扩散" class="headerlink" title="3 前向噪声扩散"></a>3 前向噪声扩散</h2><p>向原始图片逐步添加高斯噪声，直至最后的图像趋于高斯分布。</p><p><img src="/2024/09/07/diffusion%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/image-20240907160217949.png" alt="image-20240907160217949"></p><p>下面推导如何从初始图像得到第$t$时刻的图像：</p><p>$ x_t &#x3D; \sqrt{\alpha_t} x_{t-1} + \sqrt{1- \alpha_t} \epsilon_t, \epsilon_t \in N(0,1), i.i.d$</p><p>$$ \begin{align}<br>q(x_t| {x_{t-1}}) &amp;&#x3D; N(x_t; \sqrt{\alpha_t} x_{t-1}, (1-\alpha_t)I) \ &amp;&#x3D; \sqrt{\alpha_t} x_{t-1} + \sqrt{1- \alpha_t} \epsilon_t \ &amp;&#x3D; \sqrt{\alpha_t} (   \sqrt{\alpha_{t-1 } } x_{t-2} + \sqrt{1- \alpha_{t-1} } \epsilon_{t-1} ) + \sqrt{1- \alpha_t} \epsilon_t  \ &amp;&#x3D; \sqrt{\alpha_t \alpha_{t-1}} x_{t-2} + \sqrt{\alpha_t - \alpha_t \alpha_{t-1}} \epsilon_{t-1} + \sqrt{1- \alpha_t} \epsilon_t \ &amp;&#x3D; \sqrt{\alpha_t \alpha_{t-1}} x_{t-2} + \sqrt{1- \alpha_t \alpha_{t-1} }\epsilon (两个相互独立的正态分布相加，又均值为0，只用考虑方差) \ &amp;&#x3D; \sqrt{\alpha_t \alpha_{t-1}  \alpha_{t-2} … \alpha_{1}}x_0 + \sqrt{1 - \alpha_t \alpha_{t-1}  \alpha_{t-2} … \alpha_{1}} \epsilon \ &amp;&#x3D; \sqrt{\overline{\alpha_t}} x_0 + \sqrt{1 - \overline{\alpha_t}} \epsilon<br>\end{align}   $$</p><h2 id="4-反向扩散过程"><a href="#4-反向扩散过程" class="headerlink" title="4 反向扩散过程"></a>4 反向扩散过程</h2><p>由 $x_{t}$到$x_{t-1}$</p><p>$P(x_{t-1} | x_t) &#x3D; N(x_{t-1}; u_{\theta}(x_t, t), \sum_{\theta}(x_t, t) )$</p><p>在第2节中，我们提到了生成模型的目标，即$\arg\max_{\theta}  \prod_{i&#x3D;1}^{m} p_{\theta}(x_i)$</p><p>这里的$x$是指前扩散的初始图像，以后都记为$x_0$， 在反向扩撒的过程中，它依赖于$x_0$之前的所有步长，从$x_T$开始往后。。。</p><p>$\log P(x_0) &#x3D; \log \frac{P(x_0, x_1, x_2,…,x_T)}{ P(x_1,x_2,…,x_T | x_0)} (马尔科夫链的公式)$ </p><p>上式关于$q_{(x{1:T} |x_0)}$积分</p><p>等式左边：$\int \log P(x_0) q_{(x{1:T} |x_0)} dx_{1:T} &#x3D; \log P(x_0)$</p><p>等式右边：$\int \log \frac{P(x_0 :T)}{P(x_{1:T} |x_0) } q(x_{1:T} | x_0) dx_{1:T}$</p><p>故：$\log P(x_0) &#x3D; \int \log \frac{P(x_0 :T)}{P(x_{1:T} |x_0) } q(x_{1:T} | x_0) dx_{1:T}$</p><p>右侧的式子经过变形可以化成以下形式：</p><p>$\log P(x_0) &#x3D;  \int \log \frac{P(x_{0:T})}{q(x_{1:T} | x_0)} q(x_{1:T } |x_0) dx_{1:T}   + KL(q(x_{1:T} | x_0) || P(x_{1:T}|x_0))$</p><p>上述等式右边第二项有一个KL散度，但是我们并不知道$P(x_{1:T}|x_0)$，如果我们能求出$q(x_{1:T} | x_0)$，又KL散度是一个大于等于0的数，当两个概率分布相等时，KL&#x3D;0，只需让右式第二项最小即可。</p><p>即最小化$ KL(q(x_{1:T} | x_0) || P(x_{1:T}|x_0))$</p><p>对于确定的训练数据$x_0$与其似然参数，$\log P(x_0)$是唯一确定的。如果最小化第二项，则最大化了第一项。</p><p>由于第二项散度恒大于等于0，所以对于第一项①，$\log P(x_0) \geq ①$， ①也被称作变分下界。</p><p>$$ \begin{align}<br>\log P(x_0) &amp; \geq \int  \log \frac{P(x_{0:T})}{q(x_{1:T} | x_0)} q(x_{1:T } |x_0) dx_{1:T} \ &amp;&#x3D; \mathbf{E}<em>q[ \log \frac{P(x</em>{0:T})}{q(x_{1:T} | x_0)}] \ &amp;&#x3D; \mathbf{E}<em>q [\log \frac{P(x_T) P(x</em>{0:T-1} | x_T)}{q(x_{1:T} | x_0)} ] \ &amp;&#x3D; \mathbf{E}<em>q [\log P(x_T) +  \log \frac{P(x</em>{0:T-1} | x_T)}{q(x_{1:T} | x_0)} ] \ &amp;&#x3D; \mathbf{E}<em>q [\log P(x_T) +  \log \frac{\prod</em>{t&#x3D;1}^T P(x_{t-1} | x_t)}{\prod_{t&#x3D;1}^T q(x_t | x_{t-1})} ] \ &amp;&#x3D; \mathbf{E}<em>q [\log P(x_T) + \sum</em>{t&#x3D;1}^T \log \frac{ P(x_{t-1} | x_t)}{ q(x_t | x_{t-1})} ] \ &amp;&#x3D; \mathbf{E}<em>q [\log P(x_T) + \sum</em>{t&#x3D;2}^T \log \frac{ P(x_{t-1} | x_t)}{ q(x_t | x_{t-1})} + \log \frac{P(x_0 | x_1)}{q(x_1 |x_0)} ]<br>\end{align}  $$</p><p>再经过一大段推导。。。可以得到最终式子：</p><p>$\log P(x_0) \geq \mathbf{E}<em>{q</em>{(x_1|x_0)}}[\log P(x_0 | x_1) ] - \sum_{t&#x3D;2}^T \mathbf{E}<em>{q(x_t| x_0)} [kL(q(x</em>{t-1}|x_t,x_0) || P(x_{t-1} | x_t))] - KL(q(x_T|x_0) || P(x_T))$</p><p>上式就是我们的优化目标！</p><p>上式的第三项可以直接求取，没有需要学习的参数</p><p>第一项式重构损失，第二项是KL散度，$P(x_{t-1}|x_t)$需要使用神经网络来逼近</p><p>对$q(x_{t-1 } | x_t,x_0) $有：</p><p>$$ \begin{align}<br>q(x_{t-1 } | x_t,x_0) &amp;  &#x3D; \frac{q(x_{t-1},x_t | x_0)}{q(x_t |x_0)} \ &amp;&#x3D; \frac{q(x_t| x_{t-1},x_0)q(x_{t-1} | x_0)}{q(x_t |x_0)} \ &amp;&#x3D; \frac{N(\sqrt{\alpha_t} x_{t-1}, (1- \alpha_t)I) N(\sqrt{\overline{\alpha}<em>{t-1}} x_0, (1- \overline{\alpha}</em>{t-1})I)}{N(\sqrt{\overline{\alpha_t}} x_0, (1- \overline{\alpha_t})I)}<br>\end{align}  $$</p><p>带入正态分布公式展开，可以得到：</p><p>$$q(x_{t-1 } | x_t,x_0) \textasciitilde N(x_{t-1} | \frac{\sqrt{\alpha_t}(1-\overline{\alpha}<em>{t-1})x_t}{1- \overline{\alpha_t} } + \frac{\sqrt{\overline{\alpha}</em>{t-1}}\beta_t x_0}{ 1- \overline{\alpha_t}}, \frac{1- \overline{\alpha}_{t-1}}{1- \overline{\alpha}_t}\beta_t I)$$</p><p>对上式，$x_0$未知，尝试使用一个新的分布$q(x_{t-1}|x_t)$来替代</p><p><img src="/2024/09/07/diffusion%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/image-20240916202112915.png" alt="image-20240916202112915"></p><p>这个新的分布（绿色箭头），使其 方差与$q(x_{t-1} | x_t, x_0)$一致，而均值把 $x_0$替换成$\hat{x}_{\theta}(x_t, t)$， 即$x_0$由$x_t$和$t$基于一个深度模型预测。</p><p>接下来就是缩小$p$和$q$之间的差距，如果直接让模型从$x_t$去预测$x_0$，难度过大，在前面的前向过程中，$x_t &#x3D; \sqrt{\bar{\alpha_t}}x_0 +  \sqrt{(1- \bar{\alpha}_t)}\epsilon$，变成$x_0 &#x3D; \frac{x_t - \sqrt{1 - \bar{\alpha}_t}\epsilon}{\sqrt{\bar{\alpha}<em>t}}$，带入原来的$q(x</em>{t-1}| x_t, x_0)$的均值里面：$u &#x3D; \frac{1}{\sqrt(\alpha_t)}x_t - \frac{1- \alpha_t}{\sqrt{1- \bar{\alpha}_t}\sqrt{\alpha_t}}\epsilon$</p><p>则，构造的分布$p(x_{t-1}|x_t)$的均值$u &#x3D;  \frac{1}{\sqrt(\alpha_t)}x_t - \frac{1- \alpha_t}{\sqrt{1- \bar{\alpha}<em>t}\sqrt{\alpha_t}}\hat{\epsilon</em>{\theta}}$</p><p>这样，把由$x_t$,$t$去预测$x_0$ 变成了 由$x_t$,$t$去预测$\epsilon_t$。</p><img src="/2024/09/07/diffusion%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/image-20240916203405389.png" alt="image-20240916203405389" style="zoom: 67%;"><p>Step5就是训练一个模型:   $x_0$经过$t$时间步加噪声后的$x_t$  和 时间步$t$ 预测出加的噪声$\epsilon$，深度学习模型是类似 <code>UNet</code> 的结构</p><h2 id="5-推理过程"><a href="#5-推理过程" class="headerlink" title="5 推理过程"></a>5 推理过程</h2><p>模型训练好之后，在真实的推理阶段就必须从时间步 <code>T</code> 开始往前逐步生成图片，算法描述如下：</p><img src="/2024/09/07/diffusion%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/image-20240916203821820.png" alt="image-20240916203821820"><p>先生成一个服从高斯分布的noise: $x_T$</p><p>从最后一个时间步开始：由上一步图像$x_t$输入模型去预测噪声$\epsilon_t$，再由冲参数化技巧，计算$x_{t-1}$，一直到时间步1为止，从而生成$x_0$。</p><h2 id="6-实现"><a href="#6-实现" class="headerlink" title="6 实现"></a>6 实现</h2><h3 id="6-1-Algorithm1-Training"><a href="#6-1-Algorithm1-Training" class="headerlink" title="6.1 Algorithm1: Training"></a>6.1 Algorithm1: Training</h3><p>$x_0 $ ——&gt; $x_t$</p><ul><li>从数据中抽样本$x_0$</li><li>从$1$~$T$中随机抽取一个时间$t$，对该时间步做embedding</li><li>$x_0$ + t_embedding ——&gt;(GaussionDiffusion) ——&gt;$x_t$</li><li>$x_t$ + t_embedding ——&gt; (Unet) ——&gt; predicted noise</li><li>计算 predicted noise 和 GuassionDiffusion采样的noise的loss</li><li>重复上述步骤，直至Unet网络训练完成</li></ul><p><strong>前向扩散</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;&quot;</span><br><span class="hljs-string">    前向扩散：x_0 + t ——&gt; x_t   (x_t =   sqrt(bar&#123;alpha_t&#125;)x_0 + sqrt(1 - bar&#123;alpha_t&#125;) epsilon )</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">q_x</span>(<span class="hljs-params">x_0, t</span>):<br>    noise = torch.rand_like(x_0)<br>    alphas_bar_t = alphas_bar_sqrt[t]<br>    alphas_one_minus_bar_sqrt = one_minus_alphas_bars_sqrt[t]<br>    x_t = alphas_bar_t * x_0 + alphas_one_minus_bar_sqrt * noise<br></code></pre></td></tr></table></figure><p><strong>预测噪声：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    预测噪声的Unet模型（MLP模拟的UNET）</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MLPDiffusion</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n_steps, num_units=<span class="hljs-number">128</span></span>):<br>        <span class="hljs-built_in">super</span>(MLPDiffusion, self).__init__()<br><br>        self.linears = nn.ModuleList(<br>            [<br>                nn.Linear(<span class="hljs-number">2</span> , num_units),<br>                nn.ReLU(),<br>                nn.Linear(num_units, num_units),<br>                nn.ReLU(),<br>                nn.Linear(num_units, num_units),<br>                nn.ReLU(),<br>                nn.Linear(num_units,<span class="hljs-number">2</span>),<br>                <br>            ]<br>        )<br><br>        self.step_embeddings = nn.ModuleList(<br>            [<br>                nn.Embedding(n_steps, num_units),<br>                nn.Embedding(n_steps, num_units),<br>                nn.Embedding(n_steps, num_units),<br>            ]<br>        )<br>        <br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x ,t</span>):<br>        <span class="hljs-keyword">for</span> idx, embedding_layer <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.step_embeddings):<br>            t_embedding = embedding_layer(t)<br>            x = self.linears[<span class="hljs-number">2</span> * idx](x)<br>            x += t_embedding<br>            x = self.linears[<span class="hljs-number">2</span> * idx +<span class="hljs-number">1</span> ](x)<br>        x = self.linears[-<span class="hljs-number">1</span>](x)<br><br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h3 id="6-2-Algorithm2-Sampling"><a href="#6-2-Algorithm2-Sampling" class="headerlink" title="6.2 Algorithm2: Sampling"></a>6.2 Algorithm2: Sampling</h3><p>$x_t$ ——&gt; $x_{t-1}$</p><ul><li><p>从N(0,1)中采样$x_T$</p></li><li><p>对 $T, T-1, T-2,…,2,1$ 依次重复一下步骤：</p></li><li><p>$x_t$ + t_embedding ——&gt; (Unet) ——&gt; predicted noise</p><p>$x_t$ - predicted_noise ——&gt; $x_{t-1}$</p></li><li><p>循环结束得到$x_0$</p></li></ul><p><strong>单步逆扩散过程</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">p_sample</span>(<span class="hljs-params">model, x, t, betas, one_minus_alphas_bar_sqrt</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        由 x_t 去噪得到 x_&#123;t-1&#125;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    t = torch.tensor([t])<br>    coeff = betas[t] / one_minus_alphas_bar_sqrt[t]<br><br>    eps_theta = model(x ,t)<br>    mean = (<span class="hljs-number">1</span> / (<span class="hljs-number">1</span> - betas[t]).sqrt()) * (x  - (coeff * eps_theta))<br>    <span class="hljs-comment"># 采样得到 x_&#123;t-1&#125;</span><br>    z = torch.rand_like(x)<br>    sigma_t = betas[t].sqrt()<br>    sample = mean + sigma_t * z<br>    <span class="hljs-keyword">return</span> sample<br></code></pre></td></tr></table></figure><p><strong>循环逆扩散过程：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">p_sample_loop</span>(<span class="hljs-params">model, noise_x_t, n_steps, betas, one_minus_alphas_bar_sqrt</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        x[T] ——&gt; x[T-1] ——&gt; x[T-2] ——&gt; ... ——&gt; x[0]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    cur_x = noise_x_t<br>    x_seq = [noise_x_t]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(n_steps)):<br>        cur_x = p_sample(model, cur_x, i, betas, one_minus_alphas_bar_sqrt)<br>        x_seq.append(cur_x)<br>    <span class="hljs-keyword">return</span> x_seq, cur_x<br></code></pre></td></tr></table></figure><ul><li><p>从N(0,1)中采样$x_T$</p></li><li><p>对 $T, T-1, T-2,…,2,1$ 依次重复一下步骤：</p></li><li><p>$x_t$ + t_embedding ——&gt; (Unet) ——&gt; predicted noise</p><p>$x_t$ - predicted_noise ——&gt; $x_{t-1}$</p></li><li><p>循环结束得到$x_0$</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文生图的各种模型</title>
    <link href="/2024/09/06/%E6%96%87%E7%94%9F%E5%9B%BE%E7%9A%84%E5%90%84%E7%A7%8D%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/09/06/%E6%96%87%E7%94%9F%E5%9B%BE%E7%9A%84%E5%90%84%E7%A7%8D%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="各种文生图的模型"><a href="#各种文生图的模型" class="headerlink" title="各种文生图的模型"></a>各种文生图的模型</h1><h2 id="DALL-E"><a href="#DALL-E" class="headerlink" title="DALL-E"></a>DALL-E</h2><p>参数量：120亿</p><p>基于 dVAE</p><p>训练：</p><ul><li>训练一个dVAE， 训练dVAE编码器和dVAE解码器</li><li>将文本编码和图片token进行拼接，训练一个自回归transformer来建模文本和图片的联合分布</li></ul><p>训练目标：最大化ELBO</p><h2 id="GLIDE"><a href="#GLIDE" class="headerlink" title="GLIDE"></a>GLIDE</h2><p>参数量：35亿</p><p>把 指导扩散应用于文本生成图像的问题。 </p><p>使用文本编码器以自然语言描述为条件，然后比较了两种指导扩散模型至文本 prompt 的方法：CLIP 指导和无分类器指导。无分类器指导能够产生更高质量的图像。</p><h2 id="DALL-E2"><a href="#DALL-E2" class="headerlink" title="DALL-E2"></a>DALL-E2</h2><p><img src="/2024/09/06/%E6%96%87%E7%94%9F%E5%9B%BE%E7%9A%84%E5%90%84%E7%A7%8D%E6%A8%A1%E5%9E%8B/image-20240906205825105.png" alt="image-20240906205825105"></p><p>虚线上方为CLIP</p><p>虚线之下是文本到图像生成的改成。</p><p>一个CLIP text embedding输入到autoregressive或者扩散模型（prior部分）来生成一个image embedding，然后这个embedding输入到扩散模型decoder，生成最终的图像。</p><p>训练方法：</p><p>训练数据对$(x,y)$， $x$指图片，$y$指文字描述</p><p>对于$x$，通过CLIP模型生成imag embedding$z_i$</p><p>prior: 基于文本 生成imag embedding</p><p>decoder: 基于prior生成的imag embedding来生成图像</p><h2 id="Imagen"><a href="#Imagen" class="headerlink" title="Imagen"></a>Imagen</h2><p>使用了一个文字转图片的diffusion模型，然后使用了2个超分diffusion模型。</p><h2 id="Stable-Diffusion"><a href="#Stable-Diffusion" class="headerlink" title="Stable Diffusion"></a>Stable Diffusion</h2><p>模型latent diffusion models (LDMs)是两阶段的。第一部分就是下面左半部分（红色），对图片进行压缩，将图片压缩为隐变量表示（latent），这样可以减少计算复杂度；第二部分还是扩散模型（diffusion与denoising），中间绿色部分。此外引入了cross-attention机制，下图右半部分，方便文本或者图片草稿图等对扩散模型进行施加影响，从而生成我们想要的图片，比如根据文本生成我们想要的图片。<br><img src="/2024/09/06/%E6%96%87%E7%94%9F%E5%9B%BE%E7%9A%84%E5%90%84%E7%A7%8D%E6%A8%A1%E5%9E%8B/image-20240906210500817.png" alt="image-20240906210500817"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机视觉</title>
    <link href="/2024/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    <url>/2024/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机视觉第一节"><a href="#计算机视觉第一节" class="headerlink" title="计算机视觉第一节"></a>计算机视觉第一节</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li><p>图像预处理：</p></li><li><p>特征提取：SIFT 、HOG</p><p><strong>SIFT</strong>：尺度不变特征变换</p><ol><li>构建尺度空间，检测极值点作为特征点（LOG, DOG）</li><li>方向匹配</li><li>关键点描述符</li><li>关键点匹配</li></ol><p><strong>HOG</strong>：</p></li><li><p>特征表示：</p></li><li><p>训练ML模型：</p></li></ul><h2 id="传统图像分类"><a href="#传统图像分类" class="headerlink" title="传统图像分类"></a>传统图像分类</h2><ul><li><p>基于词袋的图像分类</p><p>计算特征点（SIFT, HOG）的相似度</p></li><li></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于图片生成诗句（二）</title>
    <link href="/2024/08/27/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2024/08/27/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="基于图片生成诗句（二）"><a href="#基于图片生成诗句（二）" class="headerlink" title="基于图片生成诗句（二）"></a>基于图片生成诗句（二）</h1><h1 id="一、CLIP模型"><a href="#一、CLIP模型" class="headerlink" title="一、CLIP模型"></a>一、CLIP模型</h1><p>该模型的核心思想是使用大量图像和文本的配对数据进行预训练，一学习图像和文本之间的对齐关系。CLIP包含2个模态：文本和视觉模态。</p><ul><li>Text Encoder： 用于把文本转成低维向量表示</li><li>Image Encoder：用于把图像转成类似向量表示</li></ul><p>在预测阶段，计算文本和图像向量之间的<strong>余弦相似度</strong>来生成预测。</p><h2 id="1-Components"><a href="#1-Components" class="headerlink" title="1. Components"></a>1. Components</h2><p><img src="/2024/08/27/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20240827143515727.png" alt="image-20240827143515727"></p><h3 id="1-1-Image-Encoder"><a href="#1-1-Image-Encoder" class="headerlink" title="1.1 Image Encoder"></a>1.1 Image Encoder</h3><ul><li>架构一：基于ResNet50, 根据ResNetD改进，还将<strong>全局平均池化层</strong>替换为<strong>注意力池化机制</strong>。</li><li>架构二：基于VIT</li></ul><h3 id="1-2-Text-Encoder"><a href="#1-2-Text-Encoder" class="headerlink" title="1.2 Text Encoder"></a>1.2 Text Encoder</h3><p>文本编辑器使用Transformer架构，并在此基础上根据Radford模型进行了架构修改。</p><h2 id="2-Method"><a href="#2-Method" class="headerlink" title="2. Method"></a>2. Method</h2><h3 id="2-1-数据集"><a href="#2-1-数据集" class="headerlink" title="2.1 数据集"></a>2.1 数据集</h3><p>文章构建了一个新的数据集，其中包含4亿对(图像、文本)，这些数据集来自互联网上各种公开可用的资源。为了尝试覆盖尽可能广泛的视觉概念集，文中将搜索(图像，文本)对作为构建过程的一部分，其文本包含500,000个查询集中的一个。</p><h3 id="2-2-预训练方法"><a href="#2-2-预训练方法" class="headerlink" title="2.2 预训练方法"></a>2.2 预训练方法</h3><p>给定一批N对的(img, text)对，CLIP来训练这$N \times N$的组合中哪几对会实际发生。最大化N对真实嵌入对的余弦相似度，最小化剩下$N^2 - N$对错误嵌入的余弦相似度。在这些相似性得分上优化对称交叉熵损失。</p><h3 id="2-3-训练方法"><a href="#2-3-训练方法" class="headerlink" title="2.3 训练方法"></a>2.3 训练方法</h3><p>CLIP预训练时训练的Text Encoder和Image Encoder在大量数据上能正确配对图像和文本。 然后， 使用这种方法把CLIP变成zero-shot分类器，把数据集种所有类转为文本，’a photo of a {object}’， 来预测CLIP估计的标题类与给定图像的最佳配对。</p><h1 id="二、本项目为什么要引入CLIP"><a href="#二、本项目为什么要引入CLIP" class="headerlink" title="二、本项目为什么要引入CLIP"></a>二、本项目为什么要引入CLIP</h1><p>在之前 版本1（<a href="https://wendyflv.github.io/2024/06/07/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E5%8F%A4%E8%AF%97/">基于图片生成古诗 - Wendyflv的博客</a>）中，我基于Resnet在Cifar100数据上进行图像分类，把图像的标签局限于100个标签（且关键词的对应还是自己人为设定的），尽管之后使用了word2vec进行补救充沛关键词，但是扩充的关键词只是基于原图像的标签，并不能发掘更多的特征。如果考虑使用CLIP模型，生成古诗意象关键词向量和图像向量，给图像匹配关键词，能提高模型的泛化性能。</p><p>先搜集一个关键词数据集(<code>keyword.txt</code>)，然后使用CLIP对图像和所有关键词进行编码，计算它们之间的相似度，取相似度最高的K个关键词，然后放置于语言模型进行生成.</p><h1 id="三、项目架构"><a href="#三、项目架构" class="headerlink" title="三、项目架构"></a>三、项目架构</h1><p><img src="/2024/08/27/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20240829155351418.png" alt="image-20240829155351418"></p><h2 id="1-CLIP模型"><a href="#1-CLIP模型" class="headerlink" title="1. CLIP模型"></a>1. CLIP模型</h2><p>直接调用中文CLIP模型</p><p>下面举个使用Chinese_CLIP对给定的一副图像和多个关键词匹配相似度的例子</p><p>img——&gt;(CLIP)——&gt;img_feature [1 × 512]</p><p>key_words ——&gt;(CLIP)——&gt; text_features [n × 512]</p><p>img , key_words——&gt; cosine_similariy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ChineseCLIPProcessor, ChineseCLIPModel<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> torch<br><br><span class="hljs-comment"># 加载模型</span><br>model = ChineseCLIPModel.from_pretrained(<span class="hljs-string">&quot;./Chinese_CLIP&quot;</span>)<br>processor = ChineseCLIPProcessor.from_pretrained(<span class="hljs-string">&quot;./Chinese_CLIP&quot;</span>)<br><br><span class="hljs-comment"># 对图像编码</span><br>imag = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;D:/NLP/CLIPForPoems/Image2Poem/datasets/images/chun.jpg&#x27;</span>)<br>inputs = processor(images=imag, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)<br>image_features = model.get_image_features(**inputs)<br><span class="hljs-built_in">print</span>(image_features.shape)<br><br><span class="hljs-comment"># 对关键词编码</span><br>key_words = [<span class="hljs-string">&#x27;余晖&#x27;</span>, <span class="hljs-string">&#x27;樱花&#x27;</span>, <span class="hljs-string">&#x27;春色&#x27;</span>,<span class="hljs-string">&#x27;晚霞&#x27;</span> ,<span class="hljs-string">&#x27;夏日&#x27;</span>, <span class="hljs-string">&#x27;沙漠&#x27;</span>, <span class="hljs-string">&#x27;旅人&#x27;</span>]<br>text_features = []<br><span class="hljs-keyword">for</span> keyword <span class="hljs-keyword">in</span> key_words:<br>    feature = processor(text=keyword, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)<br>    text_features.append(model.get_text_features(**feature))<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cosine_similarity</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> torch.<span class="hljs-built_in">sum</span>(x * y) / (torch.sqrt(torch.<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">pow</span>(x, <span class="hljs-number">2</span>))) * torch.sqrt(torch.<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">pow</span>(y, <span class="hljs-number">2</span>))))<br><br><br><span class="hljs-comment"># 将图片和关键词编码做余弦相似度计算</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> text_feature <span class="hljs-keyword">in</span> text_features:<br>    similar = cosine_similarity(text_feature, image_features)<br>    <span class="hljs-built_in">print</span>(key_words[i], similar)<br>    i +=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>结果：下面输出了每个关键词与图像的相似度（[0,1]）。</p><p>余晖 tensor(0.4195, grad_fn&#x3D;<DivBackward0>)<br>樱花 tensor(0.3808, grad_fn&#x3D;<DivBackward0>)<br>春色 tensor(0.4233, grad_fn&#x3D;<DivBackward0>)<br>晚霞 tensor(0.3944, grad_fn&#x3D;<DivBackward0>)<br>夏日 tensor(0.3573, grad_fn&#x3D;<DivBackward0>)<br>沙漠 tensor(0.3276, grad_fn&#x3D;<DivBackward0>)<br>旅人 tensor(0.3683, grad_fn&#x3D;<DivBackward0>)</DivBackward0></DivBackward0></DivBackward0></DivBackward0></DivBackward0></DivBackward0></DivBackward0></p><h2 id="2-诗句生成模型"><a href="#2-诗句生成模型" class="headerlink" title="2. 诗句生成模型"></a>2. 诗句生成模型</h2><p>之前自己训练的效果太差了，改用T5模型在古诗词上微调。</p><p>T5模型采用的是基于Transformer的Encoder-Decoder结构。</p><p><img src="/2024/08/27/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20240830141904021.png" alt="image-20240830141904021"></p><p>下面使用(<a href="https://modelscope.cn/models/langboat/mengzi-t5-base">孟子中文T5</a>)微调一个诗句生成模型。</p><h3 id="2-1-数据预处理"><a href="#2-1-数据预处理" class="headerlink" title="2.1 数据预处理"></a>2.1 数据预处理</h3><p>数据来源：中国古典诗歌匹配数据集</p><p><img src="/2024/08/27/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20240830145625233.png" alt="image-20240830145625233"></p><p>把数据处理成 输入：关键词+诗句的 输出：诗句</p><p>例如：</p><p>x &#x3D; [CLS]关键词：春日 细雨 余晖[EOS] 春山新雨后[EOS] 天气晚来秋[EOS] 明月松间照[EOS]  </p><p>y &#x3D; [CLS]清泉石上流[EOS]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取数据</span><br><span class="hljs-comment"># 把关键词和数据清洗出来</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./datasets/CCPC/ccpc_train_v1.0.json&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = []<br>    total_lines = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./datasets/CCPC/ccpc_train_v1.0.json&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> tqdm(f, desc=<span class="hljs-string">&quot;Loading Data&quot;</span>, total=total_lines):<br>        json_line = json.loads(line)<br>        keywords=  json_line[<span class="hljs-string">&quot;keywords&quot;</span>].strip()<br>        poems = json_line[<span class="hljs-string">&quot;content&quot;</span>].strip().split(<span class="hljs-string">&quot;|&quot;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(poems)):<br>            <span class="hljs-keyword">if</span> i ==<span class="hljs-number">0</span> :<br>                x = <span class="hljs-string">&quot;关键词：&quot;</span>+ keywords<br>            <span class="hljs-keyword">else</span>: x = <span class="hljs-string">&quot;关键词：&quot;</span>+ keywords + <span class="hljs-string">&quot;EOS&quot;</span> <br>            line = (x + <span class="hljs-string">&quot;EOS&quot;</span>.join(poems[:i]) + <span class="hljs-string">&quot;EOS&quot;</span>, poems[i] + <span class="hljs-string">&quot;EOS&quot;</span>)<br>            <span class="hljs-built_in">print</span>(line)<br>            lines.append((x + <span class="hljs-string">&quot;EOS&quot;</span>.join(poems[:i]) + <span class="hljs-string">&quot;EOS&quot;</span>, poems[i] + <span class="hljs-string">&quot;EOS&quot;</span>))<br>            <br>        corpus_lines = <span class="hljs-built_in">len</span>(lines)<br>        <span class="hljs-keyword">break</span><br><br>       <br></code></pre></td></tr></table></figure><p>构造一个batch输入和输出：确定输入长度，输出长度。对不满足的文本做填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">item</span>):<br>    <span class="hljs-comment"># 取 [item * bs: (item + 1) * bs ]的文本数据</span><br>    data = lines[item * batch_size : (item + <span class="hljs-number">1</span>) * batch_size]<br>    input_len = <span class="hljs-built_in">max</span>([ <span class="hljs-built_in">len</span>( s[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;EOS&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-keyword">for</span> s  <span class="hljs-keyword">in</span> data]) + <span class="hljs-number">6</span><br>    output_len = <span class="hljs-built_in">max</span>([ <span class="hljs-built_in">len</span>(s[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;EOS&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> data]) +<span class="hljs-number">3</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;input_len:&quot;</span>, input_len)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;output_len: &quot;</span>, output_len)<br><br>    tokens, targets, attens_x, attens_y = [], [], [], []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(batch_size):<br>        <span class="hljs-comment"># 处理输入</span><br>        <span class="hljs-comment"># 对不满足最长长度的文本后面补上PAD</span><br>        x = tokenizer.encode(data[i][<span class="hljs-number">0</span>])<br>        <span class="hljs-comment"># 有效字符为1</span><br>        atten_x = [<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x))]<br>        <span class="hljs-comment"># 填充部分为0</span><br>        atten_x += [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(input_len - <span class="hljs-built_in">len</span>(x))]<br>        x.extend([tokenizer.pad_token_id <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(input_len - <span class="hljs-built_in">len</span>(x))])<br><br>        <span class="hljs-comment"># 处理输出</span><br>        y = tokenizer.encode(data[i][<span class="hljs-number">1</span>])<br>        atten_y =[<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(y))]<br>        atten_y += [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(output_len - <span class="hljs-built_in">len</span>(y))]<br>        y.extend([tokenizer.pad_token_id <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(output_len - <span class="hljs-built_in">len</span>(y))])<br><br>        <span class="hljs-built_in">print</span>(x)<br>        <span class="hljs-built_in">print</span>(tokenizer.decode(x))<br>        <span class="hljs-built_in">print</span>(y)<br>        <span class="hljs-built_in">print</span>(tokenizer.decode(y))<br>        <span class="hljs-built_in">print</span>(atten_x)<br>        <span class="hljs-built_in">print</span>(atten_y)<br><br>        tokens.append(x)<br>        targets.append(y)<br>        attens_x.append(atten_x)<br>        attens_y.append(atten_y)<br><br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p><img src="/2024/08/27/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20240830153207649.png" alt="image-20240830153207649"></p><h3 id="2-2-T5模型"><a href="#2-2-T5模型" class="headerlink" title="2.2 T5模型"></a>2.2 T5模型</h3><p>简单输出一下模型的结构看看：</p><p>input——&gt;[Embedding Layer]——&gt;Encoder[n × T5Block ] ——&gt;Decoder[n ×T5Block ] ——&gt;LM Head——&gt; output</p><p>对于Encoder的一个T5Block：包括一个自注意力机制，前馈网络 和 层归一化。</p><p><img src="/2024/08/27/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20240830162646630.png" alt="image-20240830162646630"></p><p>对于Decoder的一个T5Block：包括：字注意力机制，跨注意力机制（关注解码器的输出）， 前馈网络 和 层归一化</p><p><img src="/2024/08/27/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%AF%97%E5%8F%A5%EF%BC%88%E4%BA%8C%EF%BC%89/image-20240830163003430.png" alt="image-20240830163003430"></p><h3 id="2-3-训练"><a href="#2-3-训练" class="headerlink" title="2.3 训练"></a>2.3 训练</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于解耦注意力的GraphTransformer</title>
    <link href="/2024/08/24/%E5%9F%BA%E4%BA%8E%E8%A7%A3%E8%80%A6%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%9A%84GraphTransformer/"/>
    <url>/2024/08/24/%E5%9F%BA%E4%BA%8E%E8%A7%A3%E8%80%A6%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%9A%84GraphTransformer/</url>
    
    <content type="html"><![CDATA[<h1 id="基于解耦注意力的GraphTransformer"><a href="#基于解耦注意力的GraphTransformer" class="headerlink" title="基于解耦注意力的GraphTransformer"></a>基于解耦注意力的GraphTransformer</h1><p>本项目致力于改进单目3D人体形状和姿态估计技术，基于 SMPL 模型实现高效和精准的姿态预测。项目的核心创新在于对VIT架构的优化，通过解耦注意力机制，显著降低了特征计算的复杂度，将计算成本从二次计算减少到线性层面。此外，我们在VIT中引入了图卷积网络（GCN），以对人体关节表示进行深度特征提取，增强了模型对空间结构信息的捕捉能力，从而进一步优化了目标表示。实验结果表明，我们提出的方法在多个基准上明显优于以前最先进的方法，包括 Human3.6M、3DPW数据集。</p><h2 id="GraphTransformer"><a href="#GraphTransformer" class="headerlink" title="GraphTransformer"></a>GraphTransformer</h2><h3 id="解耦的注意力机制"><a href="#解耦的注意力机制" class="headerlink" title="解耦的注意力机制"></a>解耦的注意力机制</h3><p>传统的方法都是将 feat + target拼接在一起做self-attention。</p><p>$h(Q,K,V) &#x3D; softmax(\frac{(QW_q)(KW_k)^T}{\sqrt d})(VW_v)$</p><p>这样会造成对$l_F$的二次计算</p><p>如果把$h_{self}(T||F)$ 改成$h_{self}(h_{cross}(T,F))$ 将会避免对$l_F$的二次计算。</p><p>在一个trans_unit中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">graphtrans_unit</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, config</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-comment"># feat:[b,c,h,w]</span><br>        <span class="hljs-comment"># q = cross_Attention(F, T)</span><br>        <span class="hljs-comment"># self_Attention(q)</span><br>        <br>        self.trans_layer = Graphformer(config=config)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, query, feat</span>):<br>        co_query = self.trans_layer(query, feat.flatten(-<span class="hljs-number">2</span>).transpose(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br>        <span class="hljs-keyword">return</span> self.trans_layer(co_query)<br></code></pre></td></tr></table></figure><h3 id="Graphformer"><a href="#Graphformer" class="headerlink" title="Graphformer"></a>Graphformer</h3><p>对于输入的特征和目标表示，经过如下模块。</p><p> input -&gt; (Norm) -&gt; (Attention)  -&gt; (Linear) -&gt; (Drop) -&gt; (Add) -&gt; (GCN)</p><p>​       -&gt; (Norm) -&gt; (Linear) -&gt; (Gelu) -&gt; (Linear) -&gt; (Drop) -&gt; (Add) -&gt; output</p><img src="/2024/08/24/%E5%9F%BA%E4%BA%8E%E8%A7%A3%E8%80%A6%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%9A%84GraphTransformer/image-20240904203450443.png" alt="image-20240904203450443" style="zoom:67%;"><h4 id="Graph-Residual-Block"><a href="#Graph-Residual-Block" class="headerlink" title="Graph Residual Block"></a>Graph Residual Block</h4><p>训练：20min&#x2F;次</p><p>测试：15min次</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>3DPW相关数据处理</title>
    <link href="/2024/08/24/3DPW%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <url>/2024/08/24/3DPW%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="3DPW相关数据处理"><a href="#3DPW相关数据处理" class="headerlink" title="3DPW相关数据处理"></a>3DPW相关数据处理</h1><h2 id="数据集介绍"><a href="#数据集介绍" class="headerlink" title="数据集介绍"></a>数据集介绍</h2><p>3DPW 全称 3D Poses in the Wild，是首个具有精确 3D 姿态的户外数据集，可用于解决姿态估计问题。</p><p>下载：<a href="https://datarelease.blob.core.windows.net/metro/datasets/3dpw.tar">https://datarelease.blob.core.windows.net/metro/datasets/3dpw.tar</a></p><p>包括：</p><ul><li><p>img: train.img.tsv 人体图像数据</p></li><li><p>hw: train.hw.tsv  图像height, width数据</p></li><li><p>label: train.label.tsv 图像标签（文件路径，中心点，尺度因子，2D关节，3D关节，pose，betas ）</p></li><li><p>linelist: train.linelist.tsv 图像编号</p></li></ul><h2 id="相关处理"><a href="#相关处理" class="headerlink" title="相关处理"></a>相关处理</h2><p>img ——&gt;imge_feat、grid_feat ——&gt;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>spark</title>
    <link href="/2024/08/21/spark/"/>
    <url>/2024/08/21/spark/</url>
    
    <content type="html"><![CDATA[<h1 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h1><h2 id="框架模块"><a href="#框架模块" class="headerlink" title="框架模块"></a>框架模块</h2><p>spark core：核心RDD</p><p>spark sql：针对结构化数据，本身针对离线计算。</p><p>spark streaming： 在core基础上，流式计算</p><h2 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h2><p>本地模式：local，以一个独立进程，通过其内部多个线程模拟spark（开发，测试）</p><p>standalone：集群，各个角色以独立进程的形式存在 </p><p>YARN：集群，角色运行在YARN的容器内，</p><p>Kubernets：在Kubernets容器内</p><p>云服务：在云平台上运行</p><h2 id="架构角色"><a href="#架构角色" class="headerlink" title="架构角色"></a>架构角色</h2><p>YARN</p><p>resoumanger:集群管理</p><p>nodemanger：单机管理</p><p>applicationmaster：单任务管理者</p><p>task：单任务执行</p><p><img src="/2024/08/21/spark/image-20240821164007378.png" alt="image-20240821164007378"></p><p>spark</p><p>master:集群资源管家</p><p>worker：单机资源管家</p><p>Driver：管理单任务 （在local模式在，既管理又干活）</p><p>Executor：运行单任务</p><h3 id="local模式"><a href="#local模式" class="headerlink" title="local模式"></a>local模式</h3><p>local[N] 指定N个线程模拟</p><p>local[*] 对线程数无限制，根据cpu的cores设定</p><p><img src="/2024/08/21/spark/image-20240821164406582.png" alt="image-20240821164406582"></p><h3 id="sparkcount"><a href="#sparkcount" class="headerlink" title="sparkcount"></a>sparkcount</h3><p>创建sparkconf对象</p><p>通过sparkcontext创建对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">conf = SparkConf(<span class="hljs-string">&quot;local[*]&quot;</span>).setAppName(<span class="hljs-string">&quot;WordCountHelloWorld&quot;</span>)<br><span class="hljs-comment"># 通过 SparkConf 对象构建 SparkContext 对象</span><br>sc = SparkContext(conf=conf)<br></code></pre></td></tr></table></figure><p>读文件</p><ul><li><p>读本地的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">file_rdd = sc.textFile(<span class="hljs-string">&quot;./data/input/word.tx&quot;</span>)<br><span class="hljs-comment"># &quot;file:///tmp/pycharm_project_846/data/input/word.txt&quot; linux上文件</span><br></code></pre></td></tr></table></figure></li><li><p>读HDFS上的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">file_rdd = sc.textFile(<span class="hljs-string">&quot;hdfs://node1:8020/input/word.txt&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h3 id="wordcount原理"><a href="#wordcount原理" class="headerlink" title="wordcount原理"></a>wordcount原理</h3><p><img src="/2024/08/21/spark/image-20240822085308917.png" alt="image-20240822085308917"></p><h2 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>RDD：弹性（数据讯息再内存或磁盘中）分布式（跨进程存储）数据集合，分布式框架下的统一数据抽象对象</p><p>特性：有分区；计算方法都会作用再每一个分片上；RDD之间又相互依赖关系；KV型RDD可以有分区器；分区数据的读取尽量靠近数据所在服务器</p><p>一份RDD本质分成了多个分区：</p><p><img src="/2024/08/21/spark/image-20240822095233696.png" alt="image-20240822095233696"></p><p>KV型RDD：RDD内存存储的数据式二元元组(“hadoop”,3)(“hadoop”,1)(“flink”,3)</p><p>默认分区器：hash分区器 </p><h3 id="编程操作"><a href="#编程操作" class="headerlink" title="编程操作"></a>编程操作</h3><p>程序入口：sparkcontext对象</p><p>RDD创建：</p><ul><li><p>并行化集合创建（本地转分布式RDD）；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">conf = SparkConf().setMaster(<span class="hljs-string">&quot;local[*]&quot;</span>).setAppName(<span class="hljs-string">&quot;test&quot;</span>)<br>    sc = SparkContext(conf=conf)<br>    <span class="hljs-comment"># 本地转分布式RDD对象</span><br>    rdd = sc.parallelize([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>],<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;分区：&quot;</span>,rdd.getNumPartitions())<br>    <span class="hljs-comment"># 把RDD每个分区的对象collect到driver</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;RDD内容：&quot;</span>, rdd.collect())<br></code></pre></td></tr></table></figure></li><li><p>读取外部文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取本地文件</span><br>    file_rdd = sc.textFile(<span class="hljs-string">&quot;../../data/input/word.txt&quot;</span>)<br>    <span class="hljs-built_in">print</span>(file_rdd.getNumPartitions())<br>    <span class="hljs-built_in">print</span>(file_rdd.collect())<br>    file_rdd2 = sc.textFile(<span class="hljs-string">&quot;../../data/input/word.txt&quot;</span>,<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(file_rdd2.getNumPartitions())<br>    file_rdd3 = sc.textFile(<span class="hljs-string">&quot;../../data/input/word.txt&quot;</span>, <span class="hljs-number">100</span>)<br>    <span class="hljs-built_in">print</span>(file_rdd3.getNumPartitions())<br><br>    <span class="hljs-comment"># 读取HDFS</span><br>    file_rdd4 = sc.textFile(<span class="hljs-string">&quot;hdfs://node1:8020/input/word.txt&quot;</span>)<br>    <span class="hljs-built_in">print</span>(file_rdd4.collect())<br><br>    <span class="hljs-comment"># 针对小文件</span><br>    rdd = sc.wholeTextFiles(<span class="hljs-string">&quot;../../data/input/tiny_files&quot;</span>)<br>    <span class="hljs-built_in">print</span>(rdd.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>]).collect())<br></code></pre></td></tr></table></figure></li></ul><p>RDD算子：分布式集合上的API</p><ul><li><p>Transformation转换算子 RDD——&gt;RDD</p><p>构建执行计划，对RDD迭代，无Action不干活</p><ol><li><p>map算子（接收处理函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(rdd.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x*<span class="hljs-number">10</span>).collect())<br></code></pre></td></tr></table></figure></li><li><p>flatmap算子（先map 再解除嵌套）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">rdd = sc.parallelize([<span class="hljs-string">&quot;hadoop spark map&quot;</span>, <span class="hljs-string">&quot;spark flink&quot;</span>, <span class="hljs-string">&quot;hadoop spark&quot;</span>])<br><span class="hljs-built_in">print</span>(rdd.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: (x.split(<span class="hljs-string">&quot; &quot;</span>))).collect())<br><span class="hljs-built_in">print</span>(rdd.flatMap(<span class="hljs-keyword">lambda</span> x: (x.split(<span class="hljs-string">&quot; &quot;</span>))).collect())<br></code></pre></td></tr></table></figure></li><li><p>reducebykey （自动按照key分组，完成组内数据的聚合）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 传入的参数只是对value</span><br>rdd = sc.parallelize([[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">2</span>]])<br><span class="hljs-built_in">print</span>(rdd.reduceByKey(<span class="hljs-keyword">lambda</span> a,b: a+b).collect())<br></code></pre></td></tr></table></figure></li><li><p>mapvalues 只针对value的map算子</p></li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">rdd = sc.parallelize([(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">1</span>)])<br><span class="hljs-built_in">print</span>(rdd.mapValues(<span class="hljs-keyword">lambda</span> value: value*<span class="hljs-number">10</span>).collect())<br></code></pre></td></tr></table></figure><ol start="5"><li>groupby （确定按照k还是v分组）</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">rdd = sc.parallelize([(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">4</span>), (<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">4</span>), (<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">6</span>)])<br><span class="hljs-built_in">print</span>(rdd.groupBy(<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">0</span>]).<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x:(x[<span class="hljs-number">0</span>], <span class="hljs-built_in">list</span>(x[<span class="hljs-number">1</span>]))).collect())<br><br></code></pre></td></tr></table></figure><ol start="6"><li>Filter （过滤数据，结果为True的保留）</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">rdd = sc.parallelize([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])<br>result = rdd.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x %<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(result.collect())<br></code></pre></td></tr></table></figure><ol start="7"><li>distinct（去重）</li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">rdd = sc.parallelize([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(rdd.distinct().collect())<br></code></pre></td></tr></table></figure><ol start="8"><li><p>union（2个RDD合并成一个）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">rdd = sc.parallelize([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>   <br>rdd2 = sc.parallelize([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>])<br>rdd3 = rdd.union(rdd2)<br><span class="hljs-built_in">print</span>(rdd3.collect())<br></code></pre></td></tr></table></figure></li><li><p>join （对两个RDD执行JOIN操作 只用于二元组， 内连接，左外，右外）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">rdd = sc.parallelize([(<span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>), (<span class="hljs-number">1002</span>, <span class="hljs-string">&#x27;lisi&#x27;</span>),<br>                          (<span class="hljs-number">1003</span>, <span class="hljs-string">&#x27;wangwu&#x27;</span>), (<span class="hljs-number">1004</span>, <span class="hljs-string">&#x27;laoliu&#x27;</span>)]<br>                         )<br>rdd2 = sc.parallelize([(<span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;科技部&#x27;</span>), (<span class="hljs-number">1002</span>,<span class="hljs-string">&#x27;教育部&#x27;</span>)])<br><span class="hljs-comment"># 按照key关联</span><br>rdd3 = rdd.join(rdd2)<br><span class="hljs-built_in">print</span>(rdd3.collect())<br><span class="hljs-built_in">print</span>(rdd.leftOuterJoin(rdd2).collect())<br><span class="hljs-built_in">print</span>(rdd.rightOuterJoin(rdd2).collect())<br></code></pre></td></tr></table></figure></li><li><p>intersection （求两个RDD的交集）</p><p>rdd.intersection(rdd2)</p></li><li><p>glom （将RDD数据加上嵌套， 这个嵌套按照分区处理）</p><p>rdd.glom().collect()</p></li><li><p>groupbykey（针对KV型，自动按照Key分组）</p></li><li><p>sortby（对RDD数据进行排序）</p></li></ol><pre><code class="hljs">rdd.sortby(func, ascending=True)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">rdd = sc.parallelize([(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">3</span>), (<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>)])<br><span class="hljs-built_in">print</span>(rdd.sortBy(<span class="hljs-keyword">lambda</span> x :x[<span class="hljs-number">0</span>], ascending=<span class="hljs-literal">True</span>, numPartitions=<span class="hljs-number">1</span>).collect())<br><br></code></pre></td></tr></table></figure></code></pre><ol start="14"><li><p>sortbykey（对KV型的，按Key排序）</p><p>sortbykey(ascending&#x3D;True, numparttions, func)</p><p>func： 再排序前对数据key处理</p></li><li><p>mappartitions （对每个分区只有一次IO）结果与map无差异</p><p>func里面传入的是迭代器对象</p></li><li><p>partitionby （自定义分区操作）</p></li><li><p>repartition（对RDD分区重新分区，仅改变数量，不约定新分区规则）</p></li></ol><p><strong>案例</strong>：对订单数据，提取背景的数据，组合北京合商品类别进行输出，并对结果进行去重，得到北京售卖的商品类别信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">rdd = sc.textFile(<span class="hljs-string">&quot;../../data/input/order.text&quot;</span>)<br>file_rdd = rdd.flatMap(<span class="hljs-keyword">lambda</span> line: line.split(<span class="hljs-string">&quot;|&quot;</span>))<br>dict_rdd = file_rdd.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> json_dir : json.loads(json_dir))<br><span class="hljs-comment"># 过滤数据</span><br>bj_rdd = dict_rdd.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> d : d[<span class="hljs-string">&#x27;areaName&#x27;</span>]==<span class="hljs-string">&#x27;北京&#x27;</span>)<br><span class="hljs-comment"># 组合北京合商品类型</span><br>ctg_rdd = bj_rdd.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> d : d[<span class="hljs-string">&#x27;areaName&#x27;</span>] + <span class="hljs-string">&#x27;-&#x27;</span> + d[<span class="hljs-string">&#x27;category&#x27;</span>])<br><span class="hljs-comment"># 去重</span><br>res_rdd = ctg_rdd.distinct()<br><span class="hljs-built_in">print</span>(res_rdd.collect())<br></code></pre></td></tr></table></figure></li><li><p>Action算子 RDD——&gt; not RDD</p><ol><li><p>countBykey（对key进行计数）</p></li><li><p>collect（把RDD各个分区数据收集到driver，形成一个List对象）</p></li><li><p>reduce （对RDD数据集按照传入逻辑聚合）</p></li><li><p>fold （带有初始值的聚合）</p><p>rdd.fold(10, lambda a,b:a+b) 初始值会在分区内 和 分区键聚合 都用到</p></li><li><p>first （取出RDD的第一个元素）</p></li><li><p>take （取RDD的前N个元素） 返回list</p></li><li><p>top （对RDD结果进行降序排序，取前N个）</p></li><li><p>count （RDD中数据量）</p></li><li><p>takesample（随机抽样RDD数据）</p><p>takesample(True， 采样数，随机数种子) True：允许重复取一个数字</p></li><li><p>takeordered 对RDD排序取前N个</p><p>takeordered（前N个， 对排序数据更改）  默认升序</p></li><li><p>foreach （对每个元素进行你想要的操作） +func 由excutor直接输出</p></li><li><p>saveastextfile （将RDD数据写入文件）由excutor直接输出</p></li><li><p>mappartitions （）</p></li><li><p>foreachpartiton （一次处理一整个分区的数据）</p></li></ol><p>流水线的开关</p></li></ul><h3 id="RDD缓存"><a href="#RDD缓存" class="headerlink" title="RDD缓存"></a>RDD缓存</h3><p>RDD是过程数据，老旧没用的会从内存清理</p><p>RDD缓存API：rdd.cache() rdd.persist()</p><h3 id="Spark案例练习"><a href="#Spark案例练习" class="headerlink" title="Spark案例练习"></a>Spark案例练习</h3><p>任务：搜索关键词统计，用户搜索点击统计，搜索时间段统计</p><h3 id="广播变量"><a href="#广播变量" class="headerlink" title="广播变量"></a>广播变量</h3><p>进程内资源共享，一个进程里面的数据发了一份即可</p><p>broadcast &#x3D; sc.broadcast(原数据)</p><p>value &#x3D; broadcast.value</p><p>本地集合对象和分布式对象操作时需要使用广播变量避免多次网络IO</p><p>累加器：</p><p>ac &#x3D; sc.accumalate(0)</p><p>能把每个分区的数据反映到全局变量中</p><h2 id="Spark-SQL"><a href="#Spark-SQL" class="headerlink" title="Spark SQL"></a>Spark SQL</h2><ul><li>概述</li></ul><p>Spark的用于处理<strong>结构化数据</strong>的module</p><p>pandas: dataframe 二维表，单机集合</p><p>sparkcore：RDD 无标准数据结构，分布式集合</p><p>sparksql：datatframe 二维表，分布式集合</p><p>dataset：用于java和scala</p><p>dataframe: 用于python java scala</p><ul><li>sparkSession对象：sparksql的入口对象，也可以用于RDD编程</li><li>dataframe组成：structtype描述表结构。structfield描述一个列的信息， row对象记录一行数据， column记录一列列数据并包含列的信息</li></ul><h3 id="dataframe代码构建"><a href="#dataframe代码构建" class="headerlink" title="dataframe代码构建"></a>dataframe代码构建</h3><ul><li><p>基于RDD</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">rdd = sc.textFile(<span class="hljs-string">&quot;../data/input/sql/people.txt&quot;</span>).\<br>        <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> line: line.split(<span class="hljs-string">&quot;,&quot;</span>)).\<br>        <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> line: (line[<span class="hljs-number">0</span>], <span class="hljs-built_in">int</span>(line[<span class="hljs-number">1</span>])))<br><br>        <span class="hljs-comment"># 参数1：rdd 参数2：列名</span><br>        df = spark.createDataFrame(rdd, schema=[<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>] )<br>        df.printSchema()<br>        <span class="hljs-comment"># n:展示多少数据 truncate:是否对数据进行截断</span><br>        df.show(<span class="hljs-number">20</span>, truncate=<span class="hljs-literal">False</span>)<br><br>        df.createOrReplaceTempView(<span class="hljs-string">&quot;people&quot;</span>)<br>        spark.sql(<span class="hljs-string">&quot;select * from people where age &gt; 30&quot;</span>).show()<br><br></code></pre></td></tr></table></figure></li><li><p>读取外部数据：parquet：SPARK的列式存储文件格式</p></li><li><p>编程操作：</p><ol><li><p>DSL语法 df.where().limit()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># df.select([&quot;id&quot;, &quot;subject&quot;]).show()</span><br><span class="hljs-comment"># df.select(&quot;subject&quot;, &quot;score&quot;).show()</span><br><span class="hljs-comment"># df.select(id_column, subject_column).show()</span><br><br><span class="hljs-comment"># # filter</span><br><span class="hljs-comment"># df.filter(&quot;score &lt; 99&quot;).show()</span><br><span class="hljs-comment"># df.filter(df[&quot;score&quot;] &lt; 99).show()</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># # where</span><br><span class="hljs-comment"># df.where(&quot;score &lt; 99&quot;).show()</span><br><span class="hljs-comment"># df.where(df[&quot;score&quot;] &lt; 99).show()</span><br><br><span class="hljs-comment"># groupby 分组 返回值groupeddata，不是df了 得接上聚合mean, max,count</span><br>df.groupBy(<span class="hljs-string">&quot;subject&quot;</span>).count().show()<br>df.groupBy(df[<span class="hljs-string">&quot;subject&quot;</span>]).count().show()<br></code></pre></td></tr></table></figure></li><li><p>SQL语法 spark.sql()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">df.createTempView(<span class="hljs-string">&quot;score&quot;</span>)<br>df.createOrReplaceTempView(<span class="hljs-string">&quot;score_1&quot;</span>)<br>df.createGlobalTempView(<span class="hljs-string">&quot;score_2&quot;</span>)<br><br>spark.sql(<span class="hljs-string">&quot;select subject, count(*) from score group by subject&quot;</span>).show()<br>spark.sql(<span class="hljs-string">&quot;select subject, count(*) from score_1 group by subject&quot;</span>).show()<br>spark.sql(<span class="hljs-string">&quot;select subject, count(*) from global_temp.score_2 group by subject&quot;</span>).show()<br><br></code></pre></td></tr></table></figure></li></ol></li><li><p>wordcount案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">rdd = sc.textFile(<span class="hljs-string">&quot;../data/input/word.txt&quot;</span>).\<br>flatMap(<span class="hljs-keyword">lambda</span> x: x.split(<span class="hljs-string">&quot; &quot;</span>)).\<br><span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: [x])<br><br>df = rdd.toDF([<span class="hljs-string">&quot;word&quot;</span>])<br>df.createTempView(<span class="hljs-string">&quot;words&quot;</span>)<br>spark.sql(<span class="hljs-string">&quot;select word, count(*) as cnt from words group by word order by cnt desc &quot;</span>).show()<br><br>df =spark.read.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;text&quot;</span>).load(<span class="hljs-string">&quot;../data/input/word.txt&quot;</span>)<br><span class="hljs-comment"># withcolumn：对已存在的列做新操作，返回一个新列</span><br>df2 = df.withColumn(<span class="hljs-string">&quot;value&quot;</span>, F.explode(F.split(df[<span class="hljs-string">&#x27;value&#x27;</span>], <span class="hljs-string">&quot; &quot;</span>)))<br>df2.groupBy(<span class="hljs-string">&quot;value&quot;</span>).count().\<br>withColumnRenamed(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;word&quot;</span>).\<br>withColumnRenamed(<span class="hljs-string">&quot;count&quot;</span>, <span class="hljs-string">&quot;cnt&quot;</span>).\<br>orderBy(<span class="hljs-string">&quot;cnt&quot;</span>, ascending=<span class="hljs-literal">False</span>).show()<br></code></pre></td></tr></table></figure></li><li><p>电影评分案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">schema= StructType().add(<span class="hljs-string">&quot;user_id&quot;</span>, StringType(), nullable=<span class="hljs-literal">True</span>).add(<span class="hljs-string">&quot;movie_id&quot;</span>, IntegerType(), nullable=<span class="hljs-literal">True</span>).add(<span class="hljs-string">&quot;rank&quot;</span>, IntegerType(), nullable=<span class="hljs-literal">True</span>).add(<span class="hljs-string">&quot;ts&quot;</span>, StringType(), nullable=<span class="hljs-literal">True</span>)<br>df = spark.read.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;csv&quot;</span>).option(<span class="hljs-string">&quot;header&quot;</span>, <span class="hljs-literal">False</span>).option(<span class="hljs-string">&quot;sep&quot;</span>, <span class="hljs-string">&quot;\t&quot;</span>).option(<span class="hljs-string">&quot;encoding&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>).schema(schema).load(<span class="hljs-string">&quot;../data/input/sql/u.data&quot;</span>)<br><br>df.groupBy(<span class="hljs-string">&quot;user_id&quot;</span>).avg(<span class="hljs-string">&quot;rank&quot;</span>).withColumnRenamed(<span class="hljs-string">&#x27;avg(rank)&#x27;</span>,<span class="hljs-string">&#x27;avg_rank&#x27;</span>).\<br>withColumn(<span class="hljs-string">&#x27;avg_rank&#x27;</span>, F.<span class="hljs-built_in">round</span>(<span class="hljs-string">&#x27;avg_rank&#x27;</span>, <span class="hljs-number">2</span>)).\<br>orderBy(<span class="hljs-string">&#x27;avg_rank&#x27;</span>, ascending=<span class="hljs-literal">False</span>).show()<br><br>df.createTempView(<span class="hljs-string">&quot;movie&quot;</span>)<br>spark.sql(<span class="hljs-string">&quot;select movie_id, round(avg(rank), 2) as avg_rank from movie group by movie_id order by avg_rank&quot;</span>).show()<br><br><span class="hljs-comment"># 查询大于平均分电影数量</span><br>num = df.<span class="hljs-built_in">filter</span>(df[<span class="hljs-string">&quot;rank&quot;</span>] &gt; df.select(F.avg(df[<span class="hljs-string">&quot;rank&quot;</span>])).first()[<span class="hljs-string">&#x27;avg(rank)&#x27;</span>]).count()<br><span class="hljs-built_in">print</span>(num)<br><br><span class="hljs-comment"># 查询大于3分电影中打分最多次的用户，其平均分</span><br>usr_id = df.where(df[<span class="hljs-string">&quot;rank&quot;</span>]&gt; <span class="hljs-number">3</span>).groupBy(<span class="hljs-string">&quot;user_id&quot;</span>).count().withColumnRenamed(<span class="hljs-string">&#x27;count&#x27;</span>, <span class="hljs-string">&#x27;cnt&#x27;</span>).\<br>orderBy(<span class="hljs-string">&#x27;cnt&#x27;</span>, ascending=<span class="hljs-literal">False</span>).limit(<span class="hljs-number">1</span>).first()[<span class="hljs-string">&quot;user_id&quot;</span>]<br>df.<span class="hljs-built_in">filter</span>(df[<span class="hljs-string">&quot;user_id&quot;</span>]==usr_id).select(F.<span class="hljs-built_in">round</span>(F.avg(df[<span class="hljs-string">&quot;rank&quot;</span>]),<span class="hljs-number">2</span>)).show()<br><br><span class="hljs-comment"># 查询每个用户的最低和最高打分</span><br>df.groupBy(<span class="hljs-string">&#x27;user_id&#x27;</span>).\<br>agg(<br>    F.<span class="hljs-built_in">round</span>( F.avg(<span class="hljs-string">&quot;rank&quot;</span>), <span class="hljs-number">2</span>).alias(<span class="hljs-string">&#x27;avg_rank&#x27;</span>),<br>    F.<span class="hljs-built_in">min</span>(<span class="hljs-string">&#x27;rank&#x27;</span>).alias(<span class="hljs-string">&#x27;min_rank&#x27;</span>),<br>    F.<span class="hljs-built_in">max</span>(<span class="hljs-string">&#x27;rank&#x27;</span>).alias(<span class="hljs-string">&#x27;max_rank&#x27;</span>)<br><br>).show()<br><br><span class="hljs-comment"># 查询评分超过100次的电影的平均分排名top10</span><br>df.groupBy(<span class="hljs-string">&#x27;movie_id&#x27;</span>). agg(<br>    F.count(<span class="hljs-string">&#x27;movie_id&#x27;</span>).alias(<span class="hljs-string">&#x27;cnt&#x27;</span>),<br>    F.<span class="hljs-built_in">round</span>(F.avg(<span class="hljs-string">&#x27;rank&#x27;</span>),<span class="hljs-number">2</span>).alias(<span class="hljs-string">&#x27;avg_rank&#x27;</span>)<br>).where(<span class="hljs-string">&#x27;cnt &gt; 100&#x27;</span> ).orderBy(<span class="hljs-string">&#x27;avg_rank&#x27;</span>, ascending=<span class="hljs-literal">False</span>).\<br>limit(<span class="hljs-number">10</span>).show()<br><br><span class="hljs-comment"># agg : 是groupeddata对象的api，在里面可以写多个聚合</span><br><span class="hljs-comment"># alias: 是column对象api，对列改名</span><br><span class="hljs-comment"># withcolumnRename： 是dataframe的api</span><br><span class="hljs-comment"># orderby:dataframe的api</span><br><span class="hljs-comment"># first: dataframe的API 返回第一个row对象，不再是df</span><br></code></pre></td></tr></table></figure></li><li><p>shuffle分区数目设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">spark = SparkSession.builder.appName(<span class="hljs-string">&quot;test&quot;</span>).\<br>        master(<span class="hljs-string">&quot;local[*]&quot;</span>).\<br>        config(<span class="hljs-string">&quot;spark.sql.shuffle.partitions&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>).\<br>        getOrCreate()<br></code></pre></td></tr></table></figure></li><li><p>数据清洗API</p></li><li></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于SMPL的单目3D人体姿态估计</title>
    <link href="/2024/08/21/%E5%9F%BA%E4%BA%8ESMPL%E7%9A%84%E5%8D%95%E7%9B%AE3D%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/"/>
    <url>/2024/08/21/%E5%9F%BA%E4%BA%8ESMPL%E7%9A%84%E5%8D%95%E7%9B%AE3D%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="基于SMPL的单目3D人体姿态估计——驱动virtual-Avatar"><a href="#基于SMPL的单目3D人体姿态估计——驱动virtual-Avatar" class="headerlink" title="基于SMPL的单目3D人体姿态估计——驱动virtual Avatar"></a>基于SMPL的单目3D人体姿态估计——驱动virtual Avatar</h1><p>输入一段视频——&gt;</p><p>对每一帧—SMPLer—&gt;进行3D形状和姿态估计（$\theta$,$cam$,$\beta$）</p><h2 id="1-SMPLer"><a href="#1-SMPLer" class="headerlink" title="1. SMPLer"></a>1. SMPLer</h2><p>前向传播：</p><p>Step1：提取图片全局特征 img——&gt;(HRNet)——&gt;global_feat</p><p>Step2：计算初步的SMPL参数 global_feat——&gt;（FC+dropout）——&gt;theta, beta, cam ——&gt;SMPL模型——&gt;smpl_joints, 2Djoints</p><p>Step3：融合初始查询向量 beta,theta,cam + global_feat ——&gt;query</p><p>Step4：Transfomer层</p><ul><li>query + feat_list——&gt;(全局多尺度单元)——&gt; global_query</li><li>query[:,:-2] + local_feat_list + 对应的local_spat_list ——&gt; （局部多尺度单元）——&gt; local_query</li><li>0.5(global_query[:,:-2] + local_query) ——&gt; global_query——&gt; (self trans)——&gt; query_embed</li></ul><h3 id="1-1-New-Contributions"><a href="#1-1-New-Contributions" class="headerlink" title="1.1 New Contributions"></a>1.1 New Contributions</h3><ol><li><p>解耦的注意力机制：target-feature  target-target</p><p>相较于全局注意力，把原二次方的计算降低到线性</p></li><li><p>多尺度注意力模块 和 关节感知注意力模块</p></li><li><p>基于参数化的SMPL模型的目标表示，只需要学习人体形状和三维身体旋转参数，使得学习的目标嵌入减少。</p></li></ol><p><img src="/2024/08/21/%E5%9F%BA%E4%BA%8ESMPL%E7%9A%84%E5%8D%95%E7%9B%AE3D%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/image-20240815155731933.png" alt="image-20240815155731933"></p><h3 id="1-2-Related-Work"><a href="#1-2-Related-Work" class="headerlink" title="1.2 Related Work"></a>1.2 Related Work</h3><p>GraphCMR（GNNS）、</p><p>SPIN、RSC-Net（CNNS）、</p><p>METRO、Mesh Graphormer（ViT）</p><h2 id="2-Attention"><a href="#2-Attention" class="headerlink" title="2 Attention"></a>2 Attention</h2><p>$h(Q,K,V) &#x3D; softmax(\frac{(QW_q)(KW_k)^T}{\sqrt d})(VW_v)$</p><p>Q：Query查询矩阵 $\in R^{l_Q \times d}$</p><p>K：Key键 $\in R^{l_K \times d}$</p><p>V：Value值 $\in R^{l_K \times d}$</p><p>$h(Q,K,V) \in R^{l_Q \times d}$ 又可看作一个新的Q</p><p>When query, key and value are the same, Eq. 1 is called <strong>self-attention</strong> which we denote as $h_{self}(Q) &#x3D; h(Q, Q, Q)$</p><p>When only key and value are the same while query is different, the operation becomes <strong>cross-attention</strong>, denoted as $h_{cross}(Q, K) &#x3D; h(Q, K, K)$.</p><h3 id="2-1-全局Attention"><a href="#2-1-全局Attention" class="headerlink" title="2.1 全局Attention"></a>2.1 全局Attention</h3><p>$h_{self}(T||F)$  即 Q 是将 目标特征 和 目标嵌入 进行concatenation</p><p>$T||F \in R^{(l_T+l_F, d)}$ 进行self-attention时会造成二次计算 $O((l_F  +l_T)^2)$</p><h3 id="2-2-解耦Attention"><a href="#2-2-解耦Attention" class="headerlink" title="2.2 解耦Attention"></a>2.2 解耦Attention</h3><p>建模特征-特征依赖关系在3D姿态估计中不太重要，因此全局Attention可以改进为一下公式：</p><p>$h_{self}(h_{cross}(T,F))$  复杂度 $O(l_T l_F + l_T^2)$ 避免了$l_F$的二次计算，而是线性的</p><h2 id="3-目标特征的表示"><a href="#3-目标特征的表示" class="headerlink" title="3. 目标特征的表示"></a>3. 目标特征的表示</h2><p>虽然注意解耦策略有效地减轻了计算负担，但较大的lT仍可能阻碍高分辨率特征的利用。</p><p>以往的工作都是回归SMPL的顶点坐标$Y \in R^{N \times 3}$作为目标，但是这里的$N&#x3D;6890$会导致注意力操作的计算量和内存消耗也很大</p><p>为此设计一个基于参数化人体模型SMPL的更紧凑的目标表示是有必要的。</p><p>SMPL是一种灵活且具有表现力的人体模型，已广泛应用于三维人体形状和姿态建模。它由一组姿态参数$θ∈ R^{ H×3}$和一个紧致形状向量$β∈R^{1×10}$来参数化。</p><p>通过$\theta, \beta$ 可以得到3D的身体mesh：$Y \in R^{N \times 3} &#x3D; f_{SMPL }(\theta, \beta)$</p><p>对顶点做线性映射可得到3D关节坐标：$J \in R^{H \times 3} &#x3D; M Y$</p><p>如果有相机参数$C \in R^3$，可通过弱透视投影计算得到2D关节坐标：$\mathcal{J}&#x3D; \Pi_C (J)  $</p><p>故对目标${\theta_i }_{i&#x3D;1}^H, \beta, C$可表示为$\mathcal{T} \in \mathbb{R}^{(H+2) \times d}$</p><h2 id="4-多尺度注意力设计"><a href="#4-多尺度注意力设计" class="headerlink" title="4. 多尺度注意力设计"></a>4. 多尺度注意力设计</h2><h3 id="4-1-结合多尺度特征"><a href="#4-1-结合多尺度特征" class="headerlink" title="4.1 结合多尺度特征"></a>4.1 结合多尺度特征</h3><p>$h_{ms}(\mathcal{T, \mathcal{F}} )&#x3D; \frac{1}{S} \sum_{i&#x3D;1}^{S}h_{cross}(\mathcal{T}, F_i)$</p><p>为每个尺度使用不同的投影权重，输出是所有尺度的平均值</p><h3 id="4-2-多尺度特征位置编码"><a href="#4-2-多尺度特征位置编码" class="headerlink" title="4.2 多尺度特征位置编码"></a>4.2 多尺度特征位置编码</h3><p><img src="/2024/08/21/%E5%9F%BA%E4%BA%8ESMPL%E7%9A%84%E5%8D%95%E7%9B%AE3D%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/image-20240815172531617.png" alt="image-20240815172531617"></p><p>我们对目标和特征使用可学习的位置编码，通常采用x + φ的形式，其中φ是一组可学习的参数，表示标记x的位置信息。</p><p>只学习最高尺度的位置嵌入，即ϕ1，而其他尺度的嵌入是通过聚集ϕ1来产生的:</p><p>![image-20240815172749418](D:\blog\基于SMPL的单目3D人体姿态估计——驱动virtual Avatar\image-20240815172749418.png)</p><p>递推可得：$\phi_i &#x3D; f_{pool}^2(\phi _{i-1})$</p><h2 id="5-关节感知注意力"><a href="#5-关节感知注意力" class="headerlink" title="5. 关节感知注意力"></a>5. 关节感知注意力</h2><p><img src="/2024/08/21/%E5%9F%BA%E4%BA%8ESMPL%E7%9A%84%E5%8D%95%E7%9B%AE3D%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/image-20240821153416897.png" alt="image-20240821153416897"></p><p>人体关节周围的局部关节状态强烈暗示了邻近身体部位之间的相对旋转。$F_1^{\mathcal{N}(\mathcal{J}_i)}$局部特征是从<strong>最高分辨率</strong>的图像特征（F1）中采样得到的，覆盖了以关节为中心的r×r大小的区域。</p><p>由此，对$\mathcal{T}_i$关节，有如下cross-attention：</p><p>$h_{ja}(\mathcal{T}<em>i, \mathcal{F}) &#x3D; f</em>{soft}(\frac{(QW_q)(KW_k)^T}{\sqrt{d}} + \eta) (F_1^{\mathcal{J}_i}W_v)$</p><p>在softmax函数中加入了一个相对位置编码$η∈ \mathbb{R}^{1 \times r^2} $， 它是从一个可学习的张量中根据$\mathcal{J}_i$与$N (\mathcal{J}_i)$中像素之间的距离进行双线性采样。</p><p>与多尺度注意力结合，取平均值即可。</p><p>$$h_{co}(\mathcal{T}<em>i, \mathcal{F}) &#x3D; \begin{cases} \frac{1}{2}(h</em>{ja}(\mathcal{T}<em>i, \mathcal{F}) + h</em>{ms}(\mathcal{T, \mathcal{F}} ) ), i \leq H \ h_{ms}(\mathcal{T, \mathcal{F}} ), i &gt;H \end{cases}$$</p><p>注意力模块的最终公式：</p><p>$h_{final}(\mathcal{T}, \mathcal{F}) &#x3D; h_{self}(h_{co}(\mathcal{T}, \mathcal{F}))$</p><h2 id="6-整体结构"><a href="#6-整体结构" class="headerlink" title="6. 整体结构"></a>6. 整体结构</h2><p>当前设计的一个重要问题是关节感知注意力依赖于二维关节$J$，这应该是我们算法的一个输出。</p><p>换句话说，我们需要$J$来重构三维人，同时需要三维人来回归$J$。为了避免这个问题，SMPLer提出了一个层次结构来<strong>迭代</strong>地改进二维联合估计和三维重建结果。见下图。</p><p><img src="/2024/08/21/%E5%9F%BA%E4%BA%8ESMPL%E7%9A%84%E5%8D%95%E7%9B%AE3D%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/image-20240821160629116.png" alt="image-20240821160629116"></p><p>把b阶段的结果写作$P^b &#x3D; {R_{\theta_1}^b,…,R_{\theta_H}^b, \beta^b, C^b }$，迭代过程：</p><p>$\mathcal{T}^b &#x3D;  f_{TB}^b (\mathcal{T}^{b-1} , P^{b-1}, \mathcal{F})$</p><p>$P^b &#x3D; f_{fusion}(\mathcal{T}^b, P^{b-1}), b &#x3D; 1,2,…,B$</p><p>初始化操作：$\mathcal{T}<em>0 &#x3D; f</em>{global}(F_S) + f_{linear}(P^0)$</p><h2 id="7-损失与评价"><a href="#7-损失与评价" class="headerlink" title="7. 损失与评价"></a>7. 损失与评价</h2><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><ul><li>顶点坐标损失：$w_Y · ||Y-\hat{Y}||_1$</li></ul><ul><li>3D关节损失：$w_J · ||J - \hat{J}||_2 $</li><li>2D关节损失：$w_\mathcal{J} · ||\mathcal{J} - \hat{\mathcal{J}}||_2 $</li><li>旋转正则化项：$w_R · \frac{1}{H} \sum_{i&#x3D;1}^{H} ||R_{\theta_i} - \hat{R_{\theta_i}}||_1$</li></ul><h3 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h3><p><strong>MPJPE</strong>(mean per-joint position error)：$\frac{1}{H} \sum_{i&#x3D;1}^{H}||J_i - \hat{J_i}||_2$，易被缩放，旋转，平移等操作影响。</p><p>PA-MPJPE(Procrustes-aligned mean per-joint position error)：</p><p><img src="/2024/08/21/%E5%9F%BA%E4%BA%8ESMPL%E7%9A%84%E5%8D%95%E7%9B%AE3D%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1/image-20240820170041042.png" alt="image-20240820170041042"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="Q1：-什么是SMPL模型？"><a href="#Q1：-什么是SMPL模型？" class="headerlink" title="Q1： 什么是SMPL模型？"></a>Q1： 什么是SMPL模型？</h3><p>蒙皮的人体线性模型（参数化人体模型），通过确定关于人体的形状和姿态参数就可以确定这个人体模型使其展现出相应的姿态。我的方法是 通过我的模型能输出SMPL模型的参数 + 相机参数从而得到人体mesh的各个顶点的坐标，通过通过线性投影能得到3D关节坐标，3D关节坐标+相机参数投影能得到2D坐标</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HRNet</title>
    <link href="/2024/08/21/HRNet/"/>
    <url>/2024/08/21/HRNet/</url>
    
    <content type="html"><![CDATA[<h1 id="HRNet"><a href="#HRNet" class="headerlink" title="HRNet"></a>HRNet</h1><p>针对2D单一人体姿态估计。对于人体姿态估计问题，现有的基于深度学习的方法分2种：</p><ol><li><strong>regressing</strong>方式：直接预测关键点的坐标位置</li><li><strong>heatmap</strong>方式：针对每个关键点预测一张热力图（出现在每个位置上的分数）</li></ol><p>HRNet（<a href="https://arxiv.org/abs/1902.09212)%E9%87%87%E5%8F%96%E7%9A%84%E4%B9%9F%E6%98%AF%E5%9F%BA%E4%BA%8Eheatmap%E7%9A%84%E6%96%B9%E5%BC%8F%E3%80%82">https://arxiv.org/abs/1902.09212)采取的也是基于heatmap的方式。</a></p><ul><li><strong>并行连接</strong>高分辨率到低分辨率的子网，而不是像大多数现有解决方案那样串行连接。因此，能够<strong>保持高分辨率</strong>，而不是通过一个低到高的过程恢复分辨率，因此预测的热图可能在空间上更精确。（parallel high-to-low resolution subnetworks）</li><li>大多数现有的融合方案都将低层和高层的表示集合起来。HRNet使用<strong>重复的多尺度融合</strong>，利用相同深度和相似级别的低分辨率表示来提高高分辨率表示，反之亦然，从而使得高分辨率表示对于姿态的估计也很充分。multi-resolution subnetworks (multi-scale fusion)</li></ul><h2 id="HRNet网络结构"><a href="#HRNet网络结构" class="headerlink" title="HRNet网络结构"></a>HRNet网络结构</h2><p><img src="/2024/08/21/HRNet/image-20240821150014049.png" alt="image-20240821150014049"></p><p><strong>· Step1</strong>: 首先通过两个卷积核大小为<code>3x3</code>步距为2的卷积层下采样4倍</p><p><strong>· Step2</strong>: 通过<code>layer1</code>模块，重复堆叠<code>Bottleneck</code>，不改变特征层大小，只改变了通道数</p><p><strong>· Step3</strong>: 接着通过<code>Transition1</code>结构，增一个尺度分支。在<code>layer1</code>的输出基础上通过并行两个卷积核大小为<code>3x3</code>的卷积层得到两个不同的尺度分支。（上方s&#x3D;1,不改变特征层大小； 下方s&#x3D;2，进一步下采样）</p><img src="/2024/08/21/HRNet/image-20240819192135837.png" alt="image-20240819192135837" style="zoom:67%;" align="center"><p><strong>· Step4</strong>: 通过<code>stage2</code>模块，对于每个尺度分支，首先通过4个<code>Basic Block</code>，然后融合不同尺度上的信息。</p><p>分支1的输出+分支2的输出<strong>上采样2倍</strong>——&gt;ReLU——&gt;分支1 </p><p>分支2的输出+分支1的输出<strong>下采样2倍</strong>——&gt;ReLU——&gt;分支2</p><p><img src="/2024/08/21/HRNet/image-20240819193145151.png" alt="image-20240819193145151"></p><p><strong>上采样</strong>：先通过 $1 \times 1$的的卷积核，不改变特征层大小，缩减通道数；——&gt;(BN)——&gt;(最近邻插值)——&gt;特征层增大，通道数不变</p><p><img src="/2024/08/21/HRNet/image-20240819202701453.png" alt="image-20240819202701453"></p><p><strong>下采样</strong>：通过$2 \times 2$的卷积核，特征层$h,w$减小，通道数增大——&gt;BN   （Down×2）</p><p>Down×4：通过两个$2 \times 2$的卷积核——&gt;BN</p><p>Down×8：通过3个$2 \times 2$的卷积核——&gt;BN</p><p><img src="/2024/08/21/HRNet/image-20240819203532603.png" alt="image-20240819203532603"></p><p><strong>· Step5</strong>: 在<code>Transition2</code>中在原来的两个尺度分支基础上再新加一个下采样的尺度，注意这里是直接在之前尺度基础上通过一个卷积核大小为<code>3x3</code>步距为2的卷积层得到的。之前的分支（$32 \times 24 \times 64$）做一个下采样即可。</p><img src="/2024/08/21/HRNet/image-20240819204504759.png" alt="image-20240819204504759" style="zoom:67%;" align="center"><p><strong>· Step6</strong>: 在<code>stage3</code>模块，对于每个尺度分支，首先通过4个<code>Basic Block</code>，然后融合不同尺度上的信息。对于每个尺度分支上的输出都是由所有分支上的输出进行融合得到的。</p><img src="/2024/08/21/HRNet/image-20240819204800517.png" alt="image-20240819204800517" style="zoom:80%;" align="center"><p><strong>· Step7</strong>: 在<code>Transition3</code>中，在原来的3个尺度分支基础上再新加一个下采样的尺度，对最后一个分支做一个下采样即可。</p><img src="/2024/08/21/HRNet/image-20240819204936420.png" alt="image-20240819204936420" style="zoom:80%;" align="center"><p><strong>· Step8</strong>: 在<code>stage4</code>模块，对于每个尺度分支，首先通过4个<code>Basic Block</code>，然后融合不同尺度上的信息。（重复2遍）然后，四个分支在通过4个<code>Basic Block</code>，下面三个分支分别进行不同程度的上采样，只返回分辨率最高的分支的输出，再经过一个$1\times 1$，卷积核个数为17的卷积层（COCO有17个关节点），返回最终结果。</p><img src="/2024/08/21/HRNet/image-20240819205528156.png" alt="image-20240819205528156" style="zoom:80%;"><h2 id="损失的计算"><a href="#损失的计算" class="headerlink" title="损失的计算"></a>损失的计算</h2><p>针对每个关键点，我们先生成一张值全为0的heatmap，然后将对应关键点坐标处填充1。以关键点坐标为中心应用一个2D的高斯分布（没有做标准化处理）得到GT。利用这个GT heatmap配合网络预测的heatmap就能计算MSE损失了。</p><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><p>随机翻转</p><p>随机缩放</p><p>随机水平翻转</p><p>half-body 一定概率对目标裁剪</p><p>要注意再图片缩放过程中人物的比例不变！不要直接简单粗暴的拉伸！</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>这里在SMPL模型的3D姿态估计的背景下实现</p><p>img——&gt;(HRNet)——&gt;feat_list——&gt;(MLP)——&gt;beta,theta,cam——&gt;(smplx)——&gt;2D_joints</p><h3 id="一、前置工作"><a href="#一、前置工作" class="headerlink" title="一、前置工作"></a><strong>一、前置工作</strong></h3><p>&#x3D;&#x3D;BasicBlock&#x3D;&#x3D;: 2个$3 \times 3$的卷积块， 在ResNet18、ResNet34中有使用 </p><img src="/2024/08/21/HRNet/image-20240820094057284.png" alt="image-20240820094057284" style="zoom:67%;" align="center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">conv3x3</span>(<span class="hljs-params">inchanel,outchanel, stride=<span class="hljs-number">1</span> </span>):<br>    <span class="hljs-comment"># (w,h,i)——&gt;s=1,k=3,p=1——&gt;(w,h,o)只改变通道数</span><br>    <span class="hljs-keyword">return</span> nn.conv2d(inchanel, outchanel, kernel_size=<span class="hljs-number">3</span>, stride=stride, padding=<span class="hljs-number">1</span>, bias=<span class="hljs-literal">False</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicBlock</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, inchanel, outchanel, stride=<span class="hljs-number">1</span>, downsample=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(BasicBlock, self).__init__()<br>        self.conv1 = conv3x3(inchanel, outchanel, stride) <span class="hljs-comment">#s=1,2</span><br>        self.bn1 = nn.BatchNorm2d(outchanel)<br>        self.relu = nn.ReLU(inplace=<span class="hljs-literal">True</span>)<br>        self.conv2 = conv3x3(outchanel, outchanel) <span class="hljs-comment"># s=1</span><br>        self.bn2 = nn.BatchNorm2d(outchanel)<br>        self.downsample = downsample <span class="hljs-comment">#if s=2, need downsample</span><br>        self.stride = stride<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        residual = x<br>        out = self.conv1(x)<br>        out = self.bn1(out)<br>        out = self.relu(out)<br>        out = self.conv2(out)<br>        out = self.bn2(out)<br><br>        <span class="hljs-keyword">if</span> self.downsample <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            residual = self.downsample(x)<br><br>        out += residual<br>        <span class="hljs-keyword">return</span> self.relu(out)<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;Bottleneck&#x3D;&#x3D;:</p><img src="/2024/08/21/HRNet/image-20240820102828722.png" alt="image-20240820102828722" style="zoom:67%;" align="center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bottleneck</span>(nn.modules):<br>    expansion = <span class="hljs-number">4</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, inchanel, outchanel, stride=<span class="hljs-number">1</span>, downsample=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">super</span>(BasicBlock, self).__init__()<br>        self.conv1= nn.Conv2d(inchanel, outchanel, kernel_size=<span class="hljs-number">1</span>, stride=<span class="hljs-number">1</span>, bias=<span class="hljs-literal">False</span>)<br>        self.bn1 = nn.BatchNorm2d(outchanel)<br>        self.relu = nn.ReLU(inplace=<span class="hljs-literal">True</span>)<br>        self.conv2 = conv3x3(inchanel, outchanel, stride) <span class="hljs-comment">#s=1,2</span><br>        self.conv3 = conv3x3(outchanel, outchanel*self.expansion) <span class="hljs-comment"># s=1, outchanel扩展</span><br>        self.bn2 = nn.BatchNorm2d(outchanel)<br>        self.bn3 = nn.BatchNorm2d(outchanel*self.expansion)<br>        self.downsample = downsample <span class="hljs-comment">#if s=2, need downsample</span><br>        self.stride = stride<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        residual = x<br>        out = self.conv1(x)<br>        out = self.bn1(out)<br>        out = self.relu(out)<br>        out = self.conv2(out)<br>        out = self.bn2(out)<br>        out = self.relu(out)<br>        out = self.conv3(out)<br>        out = self.bn3(out)<br><br>        <span class="hljs-keyword">if</span> self.downsample <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            residual = self.downsample(x)<br><br>        out += residual<br>        <span class="hljs-keyword">return</span> self.relu(out)<br><br></code></pre></td></tr></table></figure><h3 id="二、HRNet实现"><a href="#二、HRNet实现" class="headerlink" title="二、HRNet实现"></a><strong>二、HRNet实现</strong></h3><p>&#x3D;&#x3D;make_layer&#x3D;&#x3D;： 对每个分支做BasicBlock（通道数不变）或者Bottleneck（通道数*4）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_make_layer</span>(<span class="hljs-params">self, block, planes, blocks, stride=<span class="hljs-number">1</span></span>):<br>        downsample = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">if</span> stride != <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> self.inplanes != planes * block.expansion:<br>            downsample = nn.Sequential(<br>                nn.Conv2d(<br>                    self.inplanes, planes*block.expansion,<br>                    kernel_size=<span class="hljs-number">1</span>, stride=stride, bias=<span class="hljs-literal">False</span><br>                ),<br>                nn.BatchNorm2d(planes * block.expansion)<br>            )<br>        layers = []   <br>        layers.append(block(self.inplanes, planes, stride, downsample))<br>        self.inplanes = planes * block.expansion<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, blocks):<br>            layers.append(block(self.inplanes, planes))<br><br>        <span class="hljs-keyword">return</span> nn.Sequential(*layers)<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;make_transition_layer&#x3D;&#x3D;: 增一个尺度分支</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_make_transition_layer</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                               num_channels_pre_layer, num_channels_cur_layer</span>):<br>        num_branches_cur = <span class="hljs-built_in">len</span>(num_channels_cur_layer)<br>        num_branches_pre = <span class="hljs-built_in">len</span>(num_channels_pre_layer)<br><br>        transition_layers = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_branches_cur):<br>            <span class="hljs-keyword">if</span> i &lt; num_branches_pre:<br>                <span class="hljs-keyword">if</span> num_channels_cur_layer[i] != num_channels_pre_layer[i]:<br>                    transition_layers.append(<br>                        nn.Sequential(<br>                            nn.Conv2d(num_channels_pre_layer[i],<br>                                      num_channels_cur_layer[i],<br>                                      <span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,bias=<span class="hljs-literal">False</span>),<br>                                      nn.BatchNorm2d(num_channels_cur_layer[i]),<br>                                      nn.ReLU(<span class="hljs-literal">True</span>)<br>                        )<br>                    )<br>                <span class="hljs-keyword">else</span>:<br>                    transition_layers.append(<span class="hljs-literal">None</span>)<br>            <span class="hljs-keyword">else</span>:<br>                conv3x3 = []<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>-num_branches_pre):<br>                    inchannels = num_branches_pre[-<span class="hljs-number">1</span>]<br>                    outchannels = num_channels_cur_layer[i] \<br>                        <span class="hljs-keyword">if</span> j == i-num_branches_pre <span class="hljs-keyword">else</span> inchannels<br>                    conv3x3.append(<br>                        nn.Sequential(<br>                            nn.Conv2d(<br>                                inchannels, outchannels,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,bias=<span class="hljs-literal">True</span><br>                            ),<br>                            nn.BatchNorm2d(outchannels),<br>                            nn.ReLU(inplace=<span class="hljs-literal">True</span>)<br>                        )<br>                    )<br>                transition_layers.append(nn.Sequential(*conv3x3))<br><br>            <br>        <span class="hljs-keyword">return</span> nn.ModuleList(transition_layers)<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;make_fuse_layers&#x3D;&#x3D;  ：融合不同尺度的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_make_fuse_layers</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.num_branches == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        num_branches = self.num_branches<br>        num_inchannels = self.num_inchannels<br>        fuse_layers = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_branches <span class="hljs-keyword">if</span> self.multi_scale_output <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>):<br>            fuse_layer = []<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_branches):<br>                <span class="hljs-keyword">if</span> j &gt; i:<br>                    fuse_layer.append(<br>                        nn.Sequential(<br>                            nn.Conv2d(<br>                                num_inchannels[j],<br>                                num_inchannels[i],<br>                                <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, bias=<span class="hljs-literal">False</span><br>                            ),<br>                            nn.BatchNorm2d(num_inchannels[i]),<br>                            nn.Upsample(scale_factor=<span class="hljs-number">2</span>**(j-i), mode=<span class="hljs-string">&#x27;nearest&#x27;</span>)<br>                        )<br>                    )<br>                <span class="hljs-keyword">elif</span> j == i:<br>                    fuse_layer.append(<span class="hljs-literal">None</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    conv3x3s = []<br>                    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i-j):<br>                        <span class="hljs-keyword">if</span> k == i - j - <span class="hljs-number">1</span>:<br>                            num_outchannels_conv3x3 = num_inchannels[i]<br>                            conv3x3s.append(<br>                                nn.Sequential(<br>                                    nn.Conv2d(<br>                                        num_inchannels[j],<br>                                        num_outchannels_conv3x3,<br>                                        <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, bias=<span class="hljs-literal">False</span><br>                                    ),<br>                                    nn.BatchNorm2d(num_outchannels_conv3x3)<br>                                )<br>                            )<br>                        <span class="hljs-keyword">else</span>:<br>                            num_outchannels_conv3x3 = num_inchannels[j]<br>                            conv3x3s.append(<br>                                nn.Sequential(<br>                                    nn.Conv2d(<br>                                        num_inchannels[j],<br>                                        num_outchannels_conv3x3,<br>                                        <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, bias=<span class="hljs-literal">False</span><br>                                    ),<br>                                    nn.BatchNorm2d(num_outchannels_conv3x3),<br>                                    nn.ReLU(<span class="hljs-literal">True</span>)<br>                                )<br>                            )<br>                    fuse_layer.append(nn.Sequential(*conv3x3s))<br>            fuse_layers.append(nn.ModuleList(fuse_layer))<br><br>        <span class="hljs-keyword">return</span> nn.ModuleList(fuse_layers)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>人体模型SMPL介绍</title>
    <link href="/2024/07/29/%E4%BA%BA%E4%BD%93%E6%A8%A1%E5%9E%8BSMPL%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/07/29/%E4%BA%BA%E4%BD%93%E6%A8%A1%E5%9E%8BSMPL%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>SMPL: A Skinned Multi-Person Linear Model （<a href="https://dl.acm.org/doi/pdf/10.1145/2816795.2818013">SMPL (acm.org)</a>）</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>SMPL是一种3D人体建模方法，支持人体的各种形状及动作。这些人体模型的形状、姿态都可以被参数化表示。</p><p>下面记录下面特有名词的解释：</p><p>**· **vertex（顶点）：模型由多个小三角形或四边形构成。一个小三角形可看作一个顶点，顶点越多，模型越精细。</p><p><strong>·</strong> Joints（骨骼点）：人体的一些关节点，类似于人体姿态估计的关键点。每个骨骼点都由一个三元组作为参数去控制（）</p><p><strong>·</strong> 骨骼蒙皮（Rig）：建立骨骼点和顶点的关联关系。每个骨骼点会关联许多顶点，并且每一个顶点权重不一样。通过这种关联关系，就可以通过控制骨骼点的旋转向量来控制整个人运动。</p><h1 id="SMPL"><a href="#SMPL" class="headerlink" title="SMPL"></a>SMPL</h1><p>一个3D人体mesh由<strong>6890</strong>个网格顶点和<strong>23</strong>个关节点组成：</p><p><img src="/2024/07/29/%E4%BA%BA%E4%BD%93%E6%A8%A1%E5%9E%8BSMPL%E4%BB%8B%E7%BB%8D/image-20240729165318535.png" alt="image-20240729165318535"></p><p>输入：体型参数$\beta$和姿态参数$\theta$，前者决定人体的高矮胖瘦身材比例等，后者决定人体具体姿态。</p><p>每个人体模型有10个体型参数，以及$3 \times (23 +1 )&#x3D; 72$个姿态参数 （23代表骨架节点数，1是人体中心）</p><p>输出： N 个顶点的坐标，维度为 3N。N: 顶点数（6890）</p><h1 id="SMPLer"><a href="#SMPLer" class="headerlink" title="SMPLer"></a>SMPLer</h1><p>对单目图片进行人体的姿态和形状估计。</p><p><img src="/2024/07/29/%E4%BA%BA%E4%BD%93%E6%A8%A1%E5%9E%8BSMPL%E4%BB%8B%E7%BB%8D/image-20240731190342631.png" alt="image-20240731190342631"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>变量选择</title>
    <link href="/2024/06/29/%E5%8F%98%E9%87%8F%E9%80%89%E6%8B%A9/"/>
    <url>/2024/06/29/%E5%8F%98%E9%87%8F%E9%80%89%E6%8B%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="带有约束条件的高维空间自回归模型的稳健的变量选择"><a href="#带有约束条件的高维空间自回归模型的稳健的变量选择" class="headerlink" title="带有约束条件的高维空间自回归模型的稳健的变量选择"></a>带有约束条件的高维空间自回归模型的稳健的变量选择</h1><p><img src="/2024/06/29/%E5%8F%98%E9%87%8F%E9%80%89%E6%8B%A9/image-20240629212115046.png" alt="image-20240629212115046"></p><p>如何求解参数$\theta$</p><p><img src="/2024/06/29/%E5%8F%98%E9%87%8F%E9%80%89%E6%8B%A9/image-20240629212821871.png" alt="image-20240629212821871"></p><p>优化步3和4：一维非线性问题——Brent方法（以已经得到的三个点（比如从bracketing来的）为基础，构建一个二次曲线，如果迭代目标函数与二次函数相似，那么二次函数的顶点就是极值点；如果不是，这次迭代就变成普通的黄金分点搜索。）</p><p>优化步5：LQA算法</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计网——网络互连</title>
    <link href="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E4%BA%92%E8%BF%9E/"/>
    <url>/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E4%BA%92%E8%BF%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="网络互连"><a href="#网络互连" class="headerlink" title="网络互连"></a>网络互连</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>互链：用网络设备把不同网络连接起来使得不同网络中计算机之间可相互通信</p><p>中继系统&#x2F;中间设备：把网络相互连接起来的设备</p><p>中继系统：</p><ol><li>物理层：转发器</li><li>数据链路层：网桥</li><li>网络层中断系统：路由器</li><li>网桥和路由器混合：桥路器</li><li>网络层以上：网关</li></ol><p>网络互连使用 路由器</p><p>直接交付：两个主机在一个网络上，不用经过路由器</p><p>间接交付：两主机不在同一个网络，要经过路由交付</p><h2 id="因特网的网际协议IP"><a href="#因特网的网际协议IP" class="headerlink" title="因特网的网际协议IP"></a>因特网的网际协议IP</h2><p>IP协议：提供无连接的IP数据传输机制，不可靠但是有效</p><p>IP地址（4B）：把每个连接在因特网上的主机分配一个在全世界范围是唯一的32位的标识符</p><h3 id="IP地址编址方法"><a href="#IP地址编址方法" class="headerlink" title="IP地址编址方法"></a>IP地址编址方法</h3><ol><li><p>分类的IP地址</p><p>网络号 + 主机号</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E4%BA%92%E8%BF%9E/image-20240625210916852.png" alt="image-20240625210916852"></p><p>点分十进制记法：128.11.3.31</p><p>127.0.0.0保留使用</p><p>127.0.0.1 指代本地本机</p><p><strong>ARP协议</strong>：广播报文，询问目的主机的IP地址与物理地址映射关系，目的主机响应报文，回答</p><p>IP数据报格式：首部固定部分20字节</p></li><li><p>子网划分</p><p>子网划分：从主机部分拿出若干字节作为子网号</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E4%BA%92%E8%BF%9E/image-20240626153711328.png" alt="image-20240626153711328"><br>子网掩码：找出IP地址中的子网部分</p><p>将 三级IP地址 位&amp; 子网掩码 &#x3D; 划分子网时的网络地址</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E4%BA%92%E8%BF%9E/image-20240626154006849.png" alt="image-20240626154006849"></p><p>路由分组转发算法：</p><ol><li>从分组首部提取目的IP地址D</li><li>把各网络的子网掩码与D逐比特相与，若与相应网络地址匹配，则直接交付，否则，转3</li><li>若 路由表中由目的地址为D的特定主机路由，则把分组传给指明的下一跳路由，否则，转4</li><li>将 路由表 的 每一行 的 子网掩码 与D 位与， 若结果等于改行的目的网络，则将分组传给该行指明的吓一跳路由，否则，转5</li><li>若路由表有默认路由，则把分组传给默认路由，否则，转6</li><li>报告失败</li></ol></li><li><p>构成超网</p><p>无分类的两级编址：IP地址 ::&#x3D; {&lt;网络前缀&gt;, &lt;主机号&gt;}  </p><p>CIDR记法：IP地址&#x2F;网络前缀长度  </p><p>CIDR地址块：网络前缀都相同的连续IP地址组成的</p><p>构成超网：一个CIDR地址块可以表示多个地址</p><p>最长前缀匹配：正在路由表查找时，一个在匹配结果里选择具有最长网络前缀的路由</p></li></ol><h2 id="因特网控制报文协议ICMP"><a href="#因特网控制报文协议ICMP" class="headerlink" title="因特网控制报文协议ICMP"></a>因特网控制报文协议ICMP</h2><p>ICMP作用：允许主机或路由器报告差错情况和提供有关异常情况的报告</p><p>首部：8字节</p><p>分类：</p><ol><li><p>差错报告报文</p><p>报文类型：终点不可达、源点抑制、时间超过、参数问题、改变路由</p><p>不应发送情况：对ICMP差错报文、第一个分片的数据报片的所有后续数据报片都步发送、广播，多播的、特殊地址</p></li><li><p>询问报文</p><p>报文类型：回送请求或回答报文、时间戳请求或回答报文</p></li></ol><p>应用举例：Ping，Tracert</p><h2 id="IP多播"><a href="#IP多播" class="headerlink" title="IP多播"></a>IP多播</h2><p>多播使用组地址——IP使用D类地址支持多播</p><p>224.0.1.0——238.255.255.255</p><p>多播地址只能用于目的地址，而不能用于源地址</p><p>局域网中的多播帧中，只要MAC地址后23位与网卡设置的多播IP地址的后23位相同的，本机网卡才接收</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E4%BA%92%E8%BF%9E/image-20240626163736392.png" alt="image-20240626163736392"></p><p>两个或多个IP多播地址可能映射到同一个MAC多播地址  </p><p>隧道技术：</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E4%BA%92%E8%BF%9E/image-20240626163939578.png" alt="image-20240626163939578"></p><h2 id="虚拟专用网络VPN和网络地址转换NAT"><a href="#虚拟专用网络VPN和网络地址转换NAT" class="headerlink" title="虚拟专用网络VPN和网络地址转换NAT"></a>虚拟专用网络VPN和网络地址转换NAT</h2><p>本地地址（内部地址、专用地址）：仅在机构内部使用的IP地址</p><p>全球地址：全球唯一的IP地址</p><p>因特网的所有路由器对目的地址时专用地址的数据一律步转发</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9C%E4%BA%92%E8%BF%9E/image-20240626164420235.png" alt="image-20240626164420235"></p><p>VPN对IP进行二次封装</p><p>NAT：更改了IP地址</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计网——局域网</title>
    <link href="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
    <url>/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E5%B1%80%E5%9F%9F%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h1 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h1><h2 id="局域网概述"><a href="#局域网概述" class="headerlink" title="局域网概述"></a>局域网概述</h2><h2 id="MAC层"><a href="#MAC层" class="headerlink" title="MAC层"></a>MAC层</h2><ol><li><p>MAC地址（6字节）：</p><p>局域网地址、以太网地址、物理地址，确认网络设备位置的地址</p><p>唯一标识一个网卡</p></li><li><p>MAC帧分类：单播帧（收到的帧的MAC地址与本站NAC地址相同）、广播帧（发给局域网内所有站点全1）、多播帧</p></li><li><p>以太网V2格式MAC帧：</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E5%B1%80%E5%9F%9F%E7%BD%91/image-20240625200107309.png" alt="image-20240625200107309"></p><p>对无效MAC帧，直接丢弃</p></li></ol><h2 id="扩展的局域网"><a href="#扩展的局域网" class="headerlink" title="扩展的局域网"></a>扩展的局域网</h2><ol><li><p>在物理层扩展（使用集线器）</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E5%B1%80%E5%9F%9F%E7%BD%91/image-20240625200542135.png" alt="image-20240625200542135"></p></li><li><p>在数据链路层扩展</p><p>网桥：</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E5%B1%80%E5%9F%9F%E7%BD%91/image-20240625201017826.png" alt="image-20240625201017826"></p><p>多接口网桥——以太网交换机</p></li></ol><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E5%B1%80%E5%9F%9F%E7%BD%91/image-20240625201744754.png" alt="image-20240625201744754"></p><h2 id="WLAN"><a href="#WLAN" class="headerlink" title="WLAN"></a>WLAN</h2><p>WLAN可分为两大类：</p><ol><li>有固定基础设施的 WLAN   </li><li>无固定基础设施的 WLAN</li></ol><p>IEEE 802.11  ：</p><ol><li><p>基本服务集BSS：一个AP+若干移动站STA</p><p>为该 AP 分配一个不超过 32 字节的服务集标识符 SSID （该局域网名称）和 通信信道</p><p>每个 AP 有一个唯一的 48 位 MAC 地址，名称是基本服务集标识符 BSSID  </p></li><li><p>扩展服务集ESS：一个 BSS 可以通过 AP 连接到一个分配系统 DS (Distribution System)，然后再连接到另一个 BSS，构成了一个扩展服务集ESS  </p><p>ESS 也有个标识符，是不超过 32 字符的字符串名字 (不是地址)，叫做扩展服务集标识符 ESSID</p></li></ol><p>建立关联：一个移动站若要加入到一个 BSS，就必须先与某个 AP 建立关联。分 被动扫描 和 主动扫描</p><p>CASM&#x2F;CA协议：增加碰撞避免 CA (Collision Avoidance) ：尽量减少碰撞发生的概率</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E5%B1%80%E5%9F%9F%E7%BD%91/image-20240625203146180.png" alt="image-20240625203146180"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计网——数据链路层</title>
    <link href="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <url>/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="数据链路层协议"><a href="#数据链路层协议" class="headerlink" title="数据链路层协议"></a>数据链路层协议</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><p>链路：物理链路，无源的点到点的物理线路段0</p></li><li><p>数据链路：带规程的软硬件+物理链路（逻辑链路）</p></li><li><p>数据链路层协议作用：在不太可靠的数据链路层上实现可靠的数据传输</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20240625160502358.png" alt="image-20240625160502358"></p><p>在发送端将网络层的数据流封装成帧并交给物理层进行传输；<br>在接收端将从物理层得到的帧进行差错检测， 拆封还原成数据流并交给网络层。</p></li></ol><h2 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h2><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20240625163256738.png" alt="image-20240625163256738"></p><p>关键问题：帧定界，即确定帧的界限  </p><p>方法：</p><ol><li><p>字符计数法</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20240625163431597.png" alt="image-20240625163431597"></p></li><li><p>带字符填充的首尾字符定界法</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20240625163450460.png" alt="image-20240625163450460"></p></li><li><p>使用比特填充的首位标记定界</p><p>帧的起始和结束都用一个特殊的位串:“01111110”，称为标记(Flag)</p></li></ol><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><p>与传输的数据无关  </p><ol><li><p>面向字符——字节插入法</p><p>在数据中出现的控制字符SOH或EOT前面插入一个转义字符ESC(一个字节， 0x1B)；</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20240625163746999.png" alt="image-20240625163746999"></p></li><li><p>面向比特——0比特插入删除法</p><p>当数据中连续出现5个1即“11111”时就在其后插入”0”比特，即将其转换成“111110”。</p><p><img src="/2024/06/25/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/image-20240625163818107.png" alt="image-20240625163818107"></p></li></ol><h3 id="差错控制技术"><a href="#差错控制技术" class="headerlink" title="差错控制技术"></a>差错控制技术</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计网——计算机网络概述</title>
    <link href="/2024/06/24/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"/>
    <url>/2024/06/24/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h1><h2 id="计算机网络的形成"><a href="#计算机网络的形成" class="headerlink" title="计算机网络的形成"></a>计算机网络的形成</h2><p>计算机技术与通信技术的结合</p><h3 id="发展阶段"><a href="#发展阶段" class="headerlink" title="发展阶段"></a>发展阶段</h3><ol><li><p>阶段一：电路交换</p><p><img src="/2024/06/24/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20240624201506659.png" alt="image-20240624201506659"></p></li><li><p>阶段二：分组交换</p><p>核心：分组转发 + 动态分配资源</p><p>路由器功能：存储分组+转发分组</p><p>处理过程：把收到的分组暂存，查转发表，找到目的地址应从哪个口转发，把分组送至该端口</p><p>主机功能：为用户进行信息处理，发生分组，接受分组</p><p><img src="/2024/06/24/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20240624201645558.png" alt="image-20240624201645558"></p></li><li><p>阶段三：网络体系结构和协议标准化</p><p>国际标准化组织  ISO ——&gt;开放系统互连参考模型  (OSI&#x2F;RM)</p><p>传输控制协议和网络协议 TCP&#x2F;IP</p></li><li><p>阶段四：Internet技术</p></li></ol><h2 id="计算机网络定义"><a href="#计算机网络定义" class="headerlink" title="计算机网络定义"></a>计算机网络定义</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>以能够<strong>相互共享资源</strong>的方式互连起来的<strong>自治</strong>计算机系统的集合。</p><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><ol><li><p>早期网络结构</p><p>资源子网（由网络上的主机和终端组成  ） + 通信子网（由传输线和交换单元组成  ）</p><p><img src="/2024/06/24/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20240624203258305.png" alt="image-20240624203258305"></p></li><li><p>现代网络结构</p></li></ol><p><img src="/2024/06/24/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20240624204140538.png" alt="image-20240624204140538"></p><h2 id="计算机网络的拓扑构型"><a href="#计算机网络的拓扑构型" class="headerlink" title="计算机网络的拓扑构型"></a>计算机网络的拓扑构型</h2><p>网络拓扑：通过网中结点与通信线路之间的几何关系表示网络结构，反映出网络中各实体间的结构关系。（在通信子网）</p><p>通信信道类型：</p><ol><li>广播信道：总线型、树型、环型（局域网）</li><li>点-点线路：星型、环型、树型、网状（广域网）</li></ol><h2 id="计算机网络分类"><a href="#计算机网络分类" class="headerlink" title="计算机网络分类"></a>计算机网络分类</h2><ol><li>按传输技术分：广播式网络、点-点式网络</li><li>按网络覆盖范围分：个人区域网、局域网、城域网、广域网</li><li>按使用范围分：专用网、公用网</li></ol><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><ol><li><p>速率（b&#x2F;s)</p></li><li><p>带宽：数字信道的传送的最高数据率（b&#x2F;s)</p></li><li><p>吞吐量：单位时间通过某网络的数据量(b&#x2F;s)</p></li><li><p>时延：传播时延+传输时延+处理时延+等待时延</p><p><img src="/2024/06/24/%E8%AE%A1%E7%BD%91%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/image-20240624205949493.png" alt="image-20240624205949493"></p></li><li><p>时延带宽积：传播时延*带宽</p></li><li><p>利用率</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>应用统计——线性回归</title>
    <link href="/2024/06/22/%E5%BA%94%E7%94%A8%E7%BB%9F%E8%AE%A1%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <url>/2024/06/22/%E5%BA%94%E7%94%A8%E7%BB%9F%E8%AE%A1%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><h2 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>贝叶斯统计学</title>
    <link href="/2024/06/19/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    <url>/2024/06/19/%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BB%9F%E8%AE%A1%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="贝叶斯统计学"><a href="#贝叶斯统计学" class="headerlink" title="贝叶斯统计学"></a>贝叶斯统计学</h1><h2 id="统计推断中可用的三种信息"><a href="#统计推断中可用的三种信息" class="headerlink" title="统计推断中可用的三种信息"></a>统计推断中可用的三种信息</h2><ol><li>总体信息</li><li>样本信息</li><li>先验信息</li></ol><h2 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h2><ol><li><p>事件形式</p></li><li><p>密度形式</p><p>$p(\theta|x_1, x_2,…,x_n) &#x3D; \frac{p(\theta ) p (x_1,x_2,…,x_n|\theta)}{\int p(\theta ) p (x_1,x_2,…,x_n|\theta) d\theta} $</p></li><li><p>离散形式</p><p>若$\theta$是离散形式，写作$p(\theta_i|x_1, x_2,…,x_n) &#x3D; \frac{p(\theta_i ) p (x_1,x_2,…,x_n|\theta_i)}{\sum_j p(\theta_j ) p (x_1,x_2,…,x_n|\theta_j) }$</p><p>若$x$也是离散形式，写作$p(x|\theta)$换成$p(X&#x3D;x|\theta)$</p></li></ol><p><strong>后验概率的计算</strong>：</p><p>step1: 假设先验分布$p(\theta)$（一般假设为$U ～ [0,1]$）</p><p>step2: 计算联合分布$h(\theta, x)$</p><p>step3: 计算边际分布$m(x) &#x3D; \int h(\theta,x)d\theta$</p><p>step4: 由贝叶斯公式计算后验概率$p(\theta|x)$</p><p><strong>共轭先验分布</strong>：先验—似然—&gt;后验 （其与先验分布服从同一类分布）</p><p>二项分布的成功概率θ的共轭先验分布是贝塔分布。</p><h1 id="贝叶斯推断"><a href="#贝叶斯推断" class="headerlink" title="贝叶斯推断"></a>贝叶斯推断</h1><h2 id="条件方法："><a href="#条件方法：" class="headerlink" title="条件方法："></a>条件方法：</h2><p>贝叶斯推断的后验信息集三种信息为一体，基于后验分布的统计推断实际上只考虑已出现的数据（样本观察值）而认为<strong>未出现的数据与推断无关</strong>。</p><p>条件方法 和 频率方法 的区别：频率方法要考虑样本空间中所有可能出现的样本，而条件方法认为为出现的数据与推断无关</p><h2 id="参数估计"><a href="#参数估计" class="headerlink" title="参数估计"></a>参数估计</h2><ol><li><p>最大后验估计</p></li><li><p>后验中位数估计</p></li><li><p>后验期望估计</p></li><li><p>误差估计</p><p>$MSE(\hat{\theta}_E|x) &#x3D; var(\theta|x) $</p><p>$MSE(\hat{\theta}|x) &#x3D; var(\theta|x) + (\hat{\theta}_E  - \hat{\theta})^2$</p><p>可见，当$\hat{\theta}  &#x3D; \hat{\theta}_E$时，有最小值</p></li></ol><h2 id="区间估计"><a href="#区间估计" class="headerlink" title="区间估计"></a>区间估计</h2><h2 id="假设检验"><a href="#假设检验" class="headerlink" title="假设检验"></a>假设检验</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数理统计初步</title>
    <link href="/2024/06/18/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%88%9D%E6%AD%A5/"/>
    <url>/2024/06/18/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%88%9D%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="数理统计初步"><a href="#数理统计初步" class="headerlink" title="数理统计初步"></a>数理统计初步</h1><p>数理统计：由样本推断总体情况</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="总体、样品、样本"><a href="#总体、样品、样本" class="headerlink" title="总体、样品、样本"></a>总体、样品、样本</h3><p>总体：统计上要研究的对象的全体 $X$</p><p>样品：从总体中随机抽取的一个个体 $X_i$</p><p>样本：由若跟样品构成的样本 $X_1, X_2,..,X_n$</p><p>对<strong>简单随机样本</strong>（i.i.d)而言，其联合分布函数：</p><h3 id="样本的联合分布"><a href="#样本的联合分布" class="headerlink" title="样本的联合分布"></a>样本的联合分布</h3><h3 id="统计量"><a href="#统计量" class="headerlink" title="统计量"></a>统计量</h3><p>统计量定义</p><p>常用统计量</p><p>定理1</p><h3 id="三大分布"><a href="#三大分布" class="headerlink" title="三大分布"></a>三大分布</h3><p>卡方分布、t分布、F分布</p><p>三大结论</p><h2 id="参数估计"><a href="#参数估计" class="headerlink" title="参数估计"></a>参数估计</h2><h3 id="点估计"><a href="#点估计" class="headerlink" title="点估计"></a>点估计</h3><p>矩估计</p><p>极大似然估计</p><p>评价标准：相合性、无偏性、有效性</p><h3 id="区间估计"><a href="#区间估计" class="headerlink" title="区间估计"></a>区间估计</h3><p>方差已知，求均值的区间估计</p><p>方差未知，求均值的区间估计</p><p>求方差的区间估计</p><p>方差比的区间估计</p><h2 id="假设检验"><a href="#假设检验" class="headerlink" title="假设检验"></a>假设检验</h2><p>双边假设（$\alpha&#x2F;2$）</p><p>单边假设（$\alpha$）</p><p><img src="/2024/06/18/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%E5%88%9D%E6%AD%A5/image-20240621211830888.png" alt="image-20240621211830888"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ResNet18介绍</title>
    <link href="/2024/06/13/ResNet18%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/06/13/ResNet18%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>神经网络知识点总结</title>
    <link href="/2024/06/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2024/06/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="神经网络知识点总结"><a href="#神经网络知识点总结" class="headerlink" title="神经网络知识点总结"></a>神经网络知识点总结</h1><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><ol><li><p>神经网络，深度学习和人工智能的关系：</p><p>神经网络和深度学习是人工智能的一个子领域，神经网络是一种以神经元为基本单位的模型，深度学习是一类机器学习问题，主要解决贡献度分配问题。</p></li><li><p>人工智能发展的三个阶段：</p><p>符号主义（规则驱动）——&gt;联结主义（数据驱动）——&gt;行为主义（交互驱动）</p></li><li><p>机器学习和深度学习步骤的区别：</p><p>输入——&gt;特征工程——&gt;分类——&gt;输出</p><p>输入——&gt;特征工程+分类——&gt;输出</p></li><li><p>什么是表示学习：通过深度模型学习特征（底层特征——&gt;中层特征——&gt;高层特征）</p></li><li><p>什么是深度学习：构建具有一定深度的模型，可以让模型来自动学习好的特征表示，最终提升预测或识别的准确性。</p></li><li><p>人工神经网络三部分：</p><p>神经元激活规则、网络拓扑结构、学习算法</p></li></ol><h2 id="机器学习概述"><a href="#机器学习概述" class="headerlink" title="机器学习概述"></a>机器学习概述</h2><ol><li><p>什么是机器学习：</p><p>通过算法使得机器能从大量数据中学习规律从而对新样本做决策</p></li><li><p>机器学习的分类：</p><p>有监督学习、无监督学习、（半监督学习）、强化学习</p></li><li><p>机器学习四要素：</p><p>数据、模型、学习准则、优化方法</p></li><li><p>风险函数：</p><p>经验风险：只考虑了损失</p><p>结构风险：损失+惩罚项</p></li></ol><h2 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h2><ol><li><p>交叉熵损失</p><p>二分类：$-\frac{1}{N}\sum_{i&#x3D;1}^{N}(y^ilog(\hat{y}^i) + (1-y^i)log(1-\hat{y}^i ))$</p></li><li><p>均方误差：</p><p>二分类：$-\frac{1}{N}\sum_{i&#x3D;1}^N (y^i - \hat{y}^i)^2$</p></li></ol><h2 id="前馈神经网络"><a href="#前馈神经网络" class="headerlink" title="前馈神经网络"></a>前馈神经网络</h2><ol><li><p>感知机模型的功能：</p><p>单计算节点感知机能实现逻辑运算“与”，“或“问题，却无法解决线性不可分问题</p><p>两计算层感知机能解决线性不可分问题，实现逻辑运算”异或“</p><p>双隐层感知器足以解决任何复杂分类问题</p></li><li><p>激活函数的性质：</p><p>（1）连续可导的非线性函数</p><p>（2）单增</p><p>（3）函数值和其导数值在一个合适范围内</p></li><li><p>常见的激活函数：</p><p>（1）S型：$\sigma(x)$， $tanh(x)$ 都是饱和函数，会出现梯度消失现象</p><p>（2）斜坡函数：ReLU （在一定程度上缓解梯度消失）， LeakyReLU,  PReLU, ELU, softplus(x)</p><p>（3）符合函数：$swish(x) &#x3D; x \sigma(\beta x) $， $GELU (x )&#x3D; xP(X \leq x)$</p></li><li><p>前馈神经网络的结构：</p><p>（1）层内无连接</p><p>（2）两层之间两两神经元相连</p><p>（3）网络无反馈，信号从输入向输出单向传播，无反馈</p></li><li><p>前馈计算：</p></li><li><p>万能逼近定理：对任意一个函数，可以使用两层网络来近似实现。</p></li><li><p>反向传播计算：</p><p>step1: 正向传播，计算每一层的净输入和激活后的值</p><p>step2：反向传播，计算每一层的误差</p><p>step3：计算参数的导数，更新每一层的参数</p></li></ol><h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><ol><li><p>卷积类型：</p><p>窄卷积：步长为1，无填充，输出：</p><p>宽卷积：步长为1，两侧填充，输出：</p><p>等宽卷积：步长为1，两端填充，输出：</p></li><li><p>二维卷积的定义</p></li><li><p>卷积神经网络的结构</p><p>卷积：局部特征提取，参数学习，每个卷积核提取特定模式的特征</p><p>池化：降维，增强感受野，提高平移不变性</p><p>全连接：特征提取到分类的桥梁</p></li><li><p>卷积神经网络的结构特性：</p><p>局部连接、权重共享、空间或时间上的次采样</p></li><li><p>多个卷积核的卷积结构的计算</p></li><li><p>整个卷积网络的结构组织方式</p></li><li><p>resnet结构</p></li></ol><h2 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h2><ol><li>递归神经网络的结构</li><li>递归神经网络正向传播</li><li>RNN梯度消失和梯度爆炸的原因</li><li>LSTM结构</li><li>LSTM能解决梯度消失和梯度爆炸的原因</li></ol><h2 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h2><ol><li>BGD</li><li>SGD</li><li>mini-batch GD</li></ol><h2 id="深度生成模型"><a href="#深度生成模型" class="headerlink" title="深度生成模型"></a>深度生成模型</h2><ol><li>生成模型定义</li><li>生成模型和判别模型的区别</li><li>GAN结构（生成器和判别器）</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>深度生成模型</title>
    <link href="/2024/06/10/%E6%B7%B1%E5%BA%A6%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/06/10/%E6%B7%B1%E5%BA%A6%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="深度生成模型"><a href="#深度生成模型" class="headerlink" title="深度生成模型"></a>深度生成模型</h1><h2 id="生成模型"><a href="#生成模型" class="headerlink" title="生成模型"></a>生成模型</h2><p>机器学习的两种范式</p><p><img src="/2024/06/10/%E6%B7%B1%E5%BA%A6%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/image-20240610154818533.png" alt="image-20240610154818533"></p><p>生成模型：用于随机生成可观测数据的模型，是一种密度估计问题。</p><p>包括两个步骤：</p><ol><li>密度估计：分显式密度估计（明确定义模型，直接从样本来估计概率分布）和隐式密度估计（通过拟合模型，使其能够生成符合数据分布的样本）。</li><li>采样</li></ol><p>深度生成模型：</p><p>👉<a href="#VAE">变分自编码器VAE</a></p><p>👉<a href="#GAN">生成对抗网络GAN</a></p><h2 id="变分自编码器"><a href="#变分自编码器" class="headerlink" title="变分自编码器"></a>变分自编码器</h2><h3 id="自编码器"><a href="#自编码器" class="headerlink" title="自编码器"></a>自编码器</h3><p><span id="VAE">对</span>一组$D$维的样本$x^n \in R^D, 1 \leq n  \leq N$，自编码器将这组数据样本映射到特征空间，得到样本的编码$z^n \in R^M$。每个样本都有对应的一个编码， 并且通过这组编码可以重构出原来的样本集合。</p><p><img src="/2024/06/10/%E6%B7%B1%E5%BA%A6%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/image-20240610160021264.png" alt="image-20240610160021264"></p><p>自编码器的结构可分为两部分：</p><p>（1） 编码器（Encoder）$f: R^D \rightarrow R^M  $  $z &#x3D; f(W^1x + b^1)$</p><p>（2） 解码器（Decoder）$g:R^M \rightarrow R^D$  $x^{‘} &#x3D; g(W^2z + b^2)$</p><p>优化目标： $L &#x3D; \sum_{n &#x3D;1}^N ||x^{(n)} - x^{‘(n)}||^2$</p><p><strong>·</strong> 如果特征空间的维度$M$小于原始空间的维度$D$，自编码器相当于是一种<strong>降维</strong>或者<strong>特征提取</strong>的方法。</p><p><strong>·</strong> 如果令$W^2$等于$W^1$的转置，则称为<strong>捆绑权重</strong>。捆绑权重自编码器的参数更少，因此更容易学习，且捆绑权重还在一定程度上起到正则化的作用。</p><h3 id="变分自编码器-1"><a href="#变分自编码器-1" class="headerlink" title="变分自编码器"></a>变分自编码器</h3><p>变分自编码器是一种深度生成模型，其思想是利用神经网络来分别建模两个复杂的<strong>条件概率密度函数</strong>。</p><ol><li><p>用神经网络来估计概率分布$q(z|x;\phi )$称为推断网络$f_I(x;\phi)$。 推断网络输入为$x$，输出为概率分布$q(z|x;\phi)$</p></li><li><p>用神经网络来估计概率分布$p(x|z;\phi)$称为生成网络$f_G(z;\theta)$。生成网络输入为$z$，输出为概率分布$p(x|z;\theta)$</p><p><img src="/2024/06/10/%E6%B7%B1%E5%BA%A6%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/image-20240610161941447.png" alt="image-20240610161941447"></p></li></ol><h3 id="VAE和AE的区别"><a href="#VAE和AE的区别" class="headerlink" title="VAE和AE的区别"></a>VAE和AE的区别</h3><ol><li>AE的隐变量服从的分布未知，而VAE中的隐变量是假设服从某种分布的（如高斯分布）</li><li>AE的编码器输出为确定的编码，而VAE的编码器和编码器的输出为分布（或分布的参数）</li><li>AE智能从一个$x$，重构出相对应的$\hat{x}$，而VAE可以采样生成新的$z$，从而得到新的$\hat{x}$，即产生不同的新样本</li></ol><h2 id="生成对抗网络（GAN）"><a href="#生成对抗网络（GAN）" class="headerlink" title="生成对抗网络（GAN）"></a>生成对抗网络（GAN）</h2><p><img src="/2024/06/10/%E6%B7%B1%E5%BA%A6%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/image-20240610162904606.png" alt="image-20240610162904606"></p><p>$Z$ : <span id="GAN">服从</span>$p_z$分布的样本集（$p_z$为预先自定义的分布）</p><p>$G$：生成器（三层BP网络）——&gt;模仿原始数据集的分布$p_{data}$</p><p>$G(Z)$：生成器的输出</p><p>$p_g$：生成器的分布</p><p>$X$：原始数据集</p><p>$p_{data}$：原始数据集的分布</p><p>$D$：判别器（三层BP网络）——&gt;判别输入来自与$p_g$还是$p_{data}$</p><p>生成器最大化其对$p_{data}$的<strong>模仿能力</strong></p><p>判别器最大化其对数据是来与$p_g$还是$p_{data}$的<strong>判别能力</strong></p><p><strong>目标函数：</strong> $\underset{G}{\min} \underset{D}{\max} V(G,D) &#x3D; E_{x ～p_{data}(x)}[log(D(X))] + E_{z ～p_{z}(z)}[1- log(D(G(z)))]$</p><p>$D($ *  $)$是判别器输出，标量，即样本*自于$p_{data}$而不是$p_g$的概率</p><p>生成器最大化其对$p_{data}$的模仿能力，即最小化$log(1- D(G(z)))$</p><p><strong>算法：</strong></p><p><img src="/2024/06/10/%E6%B7%B1%E5%BA%A6%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/image-20240610164827734.png" alt="image-20240610164827734"></p><p>for i in 1…n do: (把上述算法的k取1)</p><p><strong>Step1:</strong> 从噪声中采样输入生成器生成出样本${z^{(1)}, z^{(2)},.., z^{(m)}}$</p><p>**Step2:**从真实样本中采样生成样本${x^{(1)}, x^{(2)},…,x^{(m)}}$</p><p>**Step3:**根据目标函数计算器损失，求梯度$\triangledown_{\theta_d} \frac{1}{m} \sum_{i&#x3D;1}^{m} [logD(x^{(i)}) + log(1 - D(G(z^{(i)})))]$，更新判别器的参数$\theta_d$</p><p>**Step4:**再从噪声中采样输入生成器生成出样本${z^{(1)}, z^{(2)},.., z^{(m)}}$</p><p>**Step5:**计算生成器的梯度$\triangledown_{\theta_g} \frac{1}{m} \sum_{i&#x3D;1}^{m} [log(1 - D(G(z^{(i)})))]$，更新生成器的参数$\theta_g$</p><p>end for 判别器收敛即可（判别器无法区分输入样本是来自于生成器还是原始数据集）</p><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><ol><li><p>掌握什么是生成模型，以及机器学习的两大范式</p></li><li><p>自编码器和变分自编码器的结构</p></li><li><p>GAN的结构以及算法</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络优化与正则化</title>
    <link href="/2024/06/09/%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%E4%B8%8E%E6%AD%A3%E5%88%99%E5%8C%96/"/>
    <url>/2024/06/09/%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%E4%B8%8E%E6%AD%A3%E5%88%99%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="网络优化与正则化"><a href="#网络优化与正则化" class="headerlink" title="网络优化与正则化"></a>网络优化与正则化</h1><h2 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h2><p>网络优化的难点：</p><ol><li>不同网络的结构差异大，没有通用的优化算法，超参数多</li><li>非凸优化问题，如何继续参数初始化和逃离局部最优</li><li>梯度消失和梯度爆炸问题</li></ol><p>网络优化的方法</p><p>梯度下降法（GD）</p><ol><li><p>批量梯度下降法（BGD)</p><p>批量梯度下降得到的是一个所有训练数据上的全局最优解，每一次的参数更新都用到了所有的训练数据，如果训练数据非常多的话，执行效率较低。</p><p>$\theta_j^{‘} &#x3D; \theta_j + \frac{1}{m}\sum_{i&#x3D;1}^{m}(y^i - h_\theta(x^i))x_j^i$</p><p>缺点：处理大型数据缓慢，易导致内存溢出； 更新快慢由学习率决定，在非凸曲面中可能会趋于局部最优； </p></li><li><p>随机梯度下降法（SGD）</p><p>利用单个样本的损失函数对θ求偏导得到对应的梯度，来更新θ</p><p>$\theta_j^{‘} &#x3D; \theta_j + (y^i - h_\theta(x^i))x_j^i$</p><p>缺点：噪音较BGD要多，使得SGD并不是每次迭代都向着整体最优化方向，； 当数据较多时，训练缓慢。</p></li><li><p>小批量梯度下降法（Mini-Batch GD）</p><p>利用部分样本的损失函数对θ求偏导得到对应的梯度，来更新θ</p><p>for k &#x3D; 1, 11, 21, ..,,99 do</p><p>$\theta_j^{‘} &#x3D; \theta_j + \frac{1}{10}\sum_{i&#x3D;k}^{k+9}(y^i - h_\theta(x^i))x_j^i$</p><p>优点：能减少参数更新的波动，获得更好和更稳定的收敛</p></li></ol><p><img src="/2024/06/09/%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%E4%B8%8E%E6%AD%A3%E5%88%99%E5%8C%96/image-20240609204358288.png" alt="image-20240609204358288"></p><p><strong>优化方法：</strong></p><p><img src="/2024/06/09/%E7%BD%91%E7%BB%9C%E4%BC%98%E5%8C%96%E4%B8%8E%E6%AD%A3%E5%88%99%E5%8C%96/image-20240610181701007.png" alt="image-20240610181701007"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>循环神经网络</title>
    <link href="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h1><h2 id="递归神经网络RNN"><a href="#递归神经网络RNN" class="headerlink" title="递归神经网络RNN"></a>递归神经网络RNN</h2><p>RNN按照时间序列展开：</p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609180740711.png" alt="image-20240609180740711"></p><h3 id="正向传播"><a href="#正向传播" class="headerlink" title="正向传播"></a>正向传播</h3><p>$t$时刻中间隐层输入$s_t &#x3D; Ux_t + Wh_{t-1}$</p><p>$t$​时刻中间隐层输出$h_t &#x3D; f(s_t)$​（其中$f$为sigmoid函数）</p><p>$t$时刻输出层输出$o_t &#x3D; g(Vh_t)$（其中$g$为softmax函数）</p><p>损失函数为$L_t &#x3D; -[y_tlogo_t + (1-y_t)log(1-o_t)]$</p><p>所有时间的损失为$L &#x3D; sum_{t&#x3D;1}^{T}L_t$</p><h3 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h3><p>首先对$V$求导，直接得到：</p><p>$\frac{\partial L}{\partial V} &#x3D; \sum_{t&#x3D;1}^T \frac{\partial L_t}{\partial V} &#x3D; \sum_{t&#x3D;1}^{T} \frac{\partial L_t}{\partial o_t} \frac{\partial o_t}{\partial V} &#x3D;  \sum_{t&#x3D;1}^{T} -(\frac{y_t}{o_t} + \frac{y_t-1}{1-o_t}o_t(1-o_t)h_t^T) &#x3D;  \sum_{t&#x3D;1}^{T} (o_t - y_t)h_t^T$</p><p>对$W$求梯度，</p><p>$\frac{\partial L}{\partial W} &#x3D; \sum_{t&#x3D;1}^T \frac{\partial L_t}{\partial W}  &#x3D;\sum_{t&#x3D;1}^T \frac{\partial L_t}{\partial o_t} \sum_{k&#x3D;1}^t \frac{\partial o_t}{\partial h_t} \frac{\partial h_t}{\partial h_k} \frac{\partial h_k}{\partial W} &#x3D; \sum_{t&#x3D;1}^T \sum_{k&#x3D;1}^t \frac{\partial L_t}{\partial o_t}\frac{\partial o_t}{\partial h_t}(\prod_{j&#x3D;k+1}^t \frac{\partial h_j}{\partial h_{j-1}})\frac{\partial h_k}{\partial W}   $</p><p>依此类推出：</p><p>$\frac{\partial L}{\partial U} &#x3D; \sum_{t&#x3D;1}^T \sum_{k&#x3D;1}^t \frac{\partial L_t}{\partial o_t}\frac{\partial o_t}{\partial h_t}(\prod_{j&#x3D;k+1}^t \frac{\partial h_j}{\partial h_{j-1}})\frac{\partial h_k}{\partial U} $ </p><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>传统RNN都采用反向传播时间算法（BPTT），随着时间流逝，网络层数增加，会产生梯度消失或者梯度爆炸的问题。</p><p>以$W$的梯度更新举例，使用激活函数假如是$tanh$</p><p>$\frac{\partial h_j}{\partial h_{j-1}}  &#x3D; W^T \odot tanh^{‘}， tanh^{‘} \in [0,1]$</p><p>👉梯度消失：如果$W$也是大于0小于1的数，当$t$很大时，$W^T \odot tanh^{‘} &lt;1 $，连乘起来就会趋于0.</p><p>👉梯度爆炸：如果梯度比较大的话（$\frac{\partial h_j}{\partial h_{j-1}} &gt; 1$），经过多层迭代，又会导致梯度大的不得了，比如$1,01^{100}$。</p><p>梯度消失和爆炸实际上导致了网络只能学习到<strong>短周期的依赖关系</strong>。</p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609184920246.png" alt="image-20240609184920246"></p><p>随着时间的推移，对于 t&gt;1 时刻的产生的影响会越来越小，由图中的颜色的深浅代表信号的大小。这种衰减会导致 RNN 无法处理长期依赖。</p><h2 id="LSTM（长短时记忆神经网络Long-short-term-memory"><a href="#LSTM（长短时记忆神经网络Long-short-term-memory" class="headerlink" title="LSTM（长短时记忆神经网络Long short-term memory)"></a>LSTM（长短时记忆神经网络Long short-term memory)</h2><h3 id="与RNN的区别"><a href="#与RNN的区别" class="headerlink" title="与RNN的区别"></a>与RNN的区别</h3><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609185538836.png" alt="image-20240609185538836"></p><p><strong>·</strong> 原始RNN的隐藏层只有一个状态，即$h$，它对于短期输入非常敏感</p><p><strong>·</strong> 再增加一个状态$c$，来保存长期的状态，称为单元状态或者内部记忆单元，记录了当前时刻为止的所有历史信息。</p><h3 id="内部记忆单元C"><a href="#内部记忆单元C" class="headerlink" title="内部记忆单元C"></a>内部记忆单元C</h3><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609190147525.png" alt="image-20240609190147525"></p><ol><li><p>第一个开关，负责控制继续保存内部状态C（遗忘门）</p><p>遗忘门可以保存很久很久之前的信息</p><p>它决定了上一时刻的单元内部状态$c_{t-1}$有多少保留到当前内部时刻内部状态$c_t$</p></li><li><p>第二个开关，负责控制把当前内部候选状态输入到当前状态C（输入门）</p><p>它决定了当前时刻网络的输入$x_t$有多少保存到当前单元内部状态$c_t$</p></li><li><p>第三个开关，负责控制是否把内部状态C作为当前LSTM的输出（输出门）</p><p>它决定了内部状态$c_t$有多少输出到LSTM的当前输出值$h_t$</p></li></ol><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609190718664.png" alt="image-20240609190718664"></p><p><strong>核心思想</strong>：LSTM的关键在于细胞的状态整个(绿色的图表示的是一个cell)，和穿过细胞的那条水平线。</p><p>细胞状态类似于传送带。直接在整个链上运行，只有一些少量的线性交互。信息在上面流传保持不变会很容易。</p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609190919991.png" alt="image-20240609190919991"></p><p>若只有上面的那条水平线是没办法实现添加或者删除信息的。而是通过一种叫做 门（gates） 的结构来实现的。</p><p>门可以实现选择性地让信息通过，主要是通过一个 sigmoid 的神经层 和一个逐点相乘的操作来实现的。</p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609191001406.png" alt="image-20240609191001406"></p><h3 id="LSTM的3个门"><a href="#LSTM的3个门" class="headerlink" title="LSTM的3个门"></a>LSTM的3个门</h3><ol><li><p>遗忘门（控制内部记忆单元遗忘哪些历史信息）$f_t$</p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609191204577.png" alt="image-20240609191204577"></p><p>$f^t &#x3D; \sigma(W_f \cdot h^{t-1} + U_f \cdot x^t + b_f)$</p></li><li><p>输入门（控制内部记忆单元加入多少新信息）</p><p><strong>Part1</strong> </p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609191533333.png" alt="image-20240609191533333"></p><p>$i^t  &#x3D; \sigma (W_i h^{t-1} + U_ix^t + b_i)$</p><p>$\tilde{c}^t  &#x3D;  tanh(W_c h^{t-1} + U_c x^t + b_c)$</p><p>Step1: 通过输入门的sigmoid层决定加入哪些新信息</p><p>Step2: 再由tanh层通过$X$和$h$值，生成一个候选记忆向量。 </p><p><strong>Part2</strong></p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609192027548.png" alt="image-20240609192027548"></p><p>$c^t &#x3D; f^t * c^{t-1} + i^t * \tilde{c}^t$</p><p>新的内部记忆单元包括两部分<br>1 经过遗忘门过滤的旧状态信息<br>2 候选记忆向量与通过输入门决定的 $𝑖^𝑡$的乘积</p></li><li><p>输出门</p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609192228601.png" alt="image-20240609192228601"></p><p>$o^t &#x3D; \sigma(W_o h^{t-1} + U_o x^t + b_o)$</p><p>$h^t &#x3D; o^t * tanh(c^t)$</p><p>$c^t$通过tanh函数，将输出信息控制在-1到1之间。</p><p><strong>总结：</strong></p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609193920008.png" alt="image-20240609193920008"></p></li></ol><h3 id="缓解梯度消失和爆炸"><a href="#缓解梯度消失和爆炸" class="headerlink" title="缓解梯度消失和爆炸"></a>缓解梯度消失和爆炸</h3><p>由正向传播公式：$c^t &#x3D; f^t * c^{t-1} + i^t * \tilde{c}^t$</p><p>得到 $\frac{\partial c^{t+1}}{\partial c^t} &#x3D; f^t + …$</p><p>可以看到当$f^t &#x3D;1$时，就算其余项很小，梯度仍可以很好的导到上一时刻，此时即使层数较沈也不会发生梯度消失；当$f^t &#x3D; 0$时，即上一时刻的信号不影响当前时刻，梯度也不会传回去。</p><h3 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h3><p>误差使用交叉熵函数</p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609194737135.png" alt="image-20240609194737135"></p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609200610067.png" alt="image-20240609200610067"></p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609200711616.png" alt="image-20240609200711616"></p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609201125891-17179350868121.png" alt="image-20240609201125891"></p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609201155275.png" alt="image-20240609201155275"></p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609201223375.png" alt="image-20240609201223375"></p><h2 id="LSTM其他变体"><a href="#LSTM其他变体" class="headerlink" title="LSTM其他变体"></a>LSTM其他变体</h2><ol><li><p>合并遗忘门和输入门 $i_t + f_t$ &#x3D;1</p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609201410947.png" alt="image-20240609201410947"></p></li><li><p>GRU</p><p><img src="/2024/06/09/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240609201547466.png" alt="image-20240609201547466"></p><p>GRU只有两个门：更新门z和重置门r</p><p>更新门：遗忘多少历史信息和接受多少新信息。</p><p>重置门：候选状态中有多少信息是从历史信息中得到的。</p><p>与LSTM的比较：</p><ol><li>GRU少了一个门，也少了一个细胞状态$c_t$</li><li>GRU只需要重置门来控制是否要保留原来隐藏状态的信息，单步在限制当前信息的传入。</li><li>在 LSTM 中，虽然得到了新的细胞状态$ 𝒄_𝒕$，但是还不能直接输出，而是需要经过一个过滤的处理:；同样，在GRU 中, 虽然我们也得到了新的隐藏状态$\tilde{h}_t$， 但是还不能直接输出，而是通过更新门来控制最后的输出。</li></ol></li></ol><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><ol><li>RNN构造</li><li>RNN的梯度消失和梯度爆炸产生原因</li><li>LSTM结构及核心思想</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络</title>
    <link href="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h1><h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><p>卷积经常用在信号处理中，用于计算信号的延迟累积。</p><h3 id="一维卷积"><a href="#一维卷积" class="headerlink" title="一维卷积"></a>一维卷积</h3><p>时刻t收到的信号$y_t$ 为当前时刻产生的信息和以前时刻延迟信息的叠加: $y_t &#x3D; 1 \times x_t + 1&#x2F;2 \times x_{t-1} + 1&#x2F;4 \times x_{t-2}&#x3D; w_1x_t + w_2x_{t-1}+w_3 x_{t-2} &#x3D; \sum_{k&#x3D;1}^{3}w_k x_{t-k+1}$</p><p>$w_k$称为滤波器或者卷积核</p><p>给定一个输入信号序列$x$和滤波器$w$，卷积的输出：$y_t &#x3D; \sum_{k&#x3D;1}^K w_k x_{t-k+1}$</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608183211215.png" alt="image-20240608183211215"></p><p>不同的滤波器来提取信号序列中的不同特性</p><p>👉低通滤波：滤波器$[1&#x2F;3, 1&#x2F;3, 1&#x2F;3]$可以检测信号序列中的低频信息（如均值）</p><p>👉高通滤波：滤波器$[1, -2, 1]$可以检测信号中的高频信息（如边缘）</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608183710865.png" alt="image-20240608183710865"></p><p>引入滑动步长$S$和零填充$P$:</p><p>$S&#x3D;2$即卷积核每隔2步做一次卷积运算</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608183937333.png" alt="image-20240608183937333"></p><p>$P&#x3D;1$即原数据左右两边各填充一个0（避免重要信息的丢失）</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608184031995.png" alt="image-20240608184031995"></p><p><strong>卷积类型</strong>：按照输出长度可分为3类</p><p>$M$为输入序列的长度，$K$为窗口大小</p><ol><li>宽卷积：步长$S&#x3D;1$，两边不补零$P&#x3D;0$，卷积后输出长度为$M-K+1$</li><li>窄卷积：步长$S&#x3D;1$，两边补零$P&#x3D;K-1$，卷积输出长度为$M+K-1$</li><li>等宽卷积：步长$S&#x3D;1$，两端补零$P&#x3D;(K-1)&#x2F;2$，卷积后输出长度为$M$</li></ol><p>对一个步长为$S$，填充为$P$的卷积，输出的长度为：$|\frac{M+2P-K}{S}| + 1$</p><h3 id="二维卷积"><a href="#二维卷积" class="headerlink" title="二维卷积"></a>二维卷积</h3><p>在图像处理中，图像是以二维矩阵的形式输入到神经网络中，因此我们需要二维卷积。</p><p>一个输入信息$X$和滤波器$W$的二维卷积定义为：$Y&#x3D;W * X$</p><p>$y_{ij} &#x3D; \sum_{u&#x3D;1}^{U}\sum_{v&#x3D;1}^{V} w_{uv}x_{i-u+1, j-v+1}$</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608185512974.png" alt="image-20240608185512974"></p><p>步长和填充不同的情况：</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608190629458.png" alt="image-20240608190629458"></p><h2 id="卷积神经网络-1"><a href="#卷积神经网络-1" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><p>网络结构：</p><p>👉数据输入层（Input layer）</p><p>👉<a href="#convolution">卷积计算层（CONV layer）</a></p><ol><li>局部特征提取</li><li>训练中参数学习</li><li>每个卷积核提取特定模式的特征</li></ol><p>👉ReLU激励层（ReLU layer）</p><p>👉<a href="#pool">池化层（Pooling layer）</a></p><ol><li>降低数据维度，避免过拟合</li><li>增强局部感受野</li><li>提高平移不变性</li></ol><p>👉全连接层（FC layer）：特征提取到分类的桥梁</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608191126721.png" alt="image-20240608191126721"></p><h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h3><p><span id="convolution">卷积</span>代替全连接层  $h^{l+1} &#x3D; f(w * h^l + b)$</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608191945394.png" alt="image-20240608191945394"><strong>局部连接，权重共享，空间或者时间上的次采样</strong></p><p><strong>卷积与协相关</strong>：</p><p>协相关：核核输入数据对应相乘再求和</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608192448907.png" alt="image-20240608192448907"></p><p>卷积：核先翻转180度，再做协相关</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608192458655.png" alt="image-20240608192458655"></p><p>除非特殊声明，计算结果按照协相关来。</p><p><strong>多个卷积核</strong>：使用多个卷积核能增强卷积层的提取不同特征的能力</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608193340547.png" alt="image-20240608193340547"></p><p>输入$[7 \times 7 \times3] \rightarrow $ 经过卷积核$w_0[3 \times 3 \times 3]+b_0, w_1[3 \times 3 \times 3]+b_1 \rightarrow$ 结果$[3 \times 3 \times 2]$</p><p>(两个卷积核的大小必须一致)</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608194027267.png" alt="image-20240608194027267"></p><p>3通道图像的卷积层：经过多少个卷积核，就会产生多少通道特征图</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608194917125.png" alt="image-20240608194917125"></p><h3 id="池化层或汇聚层（Pooling-Layers）"><a href="#池化层或汇聚层（Pooling-Layers）" class="headerlink" title="池化层或汇聚层（Pooling Layers）"></a>池化层或汇聚层（Pooling Layers）</h3><p>卷积层虽然可以显著减少连接的个数，但是每一个特征映射的神经元个数并没有显著减少。</p><p>下面是最大<span id="pool">池化是</span>的作用方式：</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608195911957.png" alt="image-20240608195911957"></p><p>卷积网络是由卷积层、汇聚层、全连接层交叉堆叠而成的</p><p>经典结构如下：一个卷积块为连续$M$个卷积层和$b$个汇聚层。一个卷积网络可以堆叠$N$个连续的卷积块，然后在接着$K$个全连接层。</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608200153512.png" alt="image-20240608200153512"></p><h2 id="误差反向传播"><a href="#误差反向传播" class="headerlink" title="误差反向传播"></a>误差反向传播</h2><h3 id="卷积层的反向传播"><a href="#卷积层的反向传播" class="headerlink" title="卷积层的反向传播"></a>卷积层的反向传播</h3><ol><li>误差的传播</li></ol><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608201429497.png" alt="image-20240608201429497"></p><ol start="2"><li><p>权重梯度的计算</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608201549172.png" alt="image-20240608201549172"></p></li></ol><h3 id="池化层的反向传播"><a href="#池化层的反向传播" class="headerlink" title="池化层的反向传播"></a>池化层的反向传播</h3><p>误差的传播</p><p>对最大池化，下一层的误差项会原封不动的传给上一层对应区块的最大值所对应的神经元，而其他神经元的误差项都是0。（平均池化就是每个误差项系数为1&#x2F;K）</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608201707278.png" alt="image-20240608201707278"></p><h2 id="其他卷积种类"><a href="#其他卷积种类" class="headerlink" title="其他卷积种类"></a>其他卷积种类</h2><h3 id="空洞卷积"><a href="#空洞卷积" class="headerlink" title="空洞卷积"></a>空洞卷积</h3><p>通过给卷积核插入“空洞”来变相地增加其大小，以增加输出单元的感受野</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608203139129.png" alt="image-20240608203139129"></p><h3 id="转置卷积-微步卷积"><a href="#转置卷积-微步卷积" class="headerlink" title="转置卷积&#x2F;微步卷积"></a>转置卷积&#x2F;微步卷积</h3><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608203709599.png" alt="image-20240608203709599"></p><h3 id="可分离卷积"><a href="#可分离卷积" class="headerlink" title="可分离卷积"></a>可分离卷积</h3><p>👉空间可分离卷积</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608203931153.png" alt="image-20240608203931153"></p><p>👉深度可分离卷积</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608204002547.png" alt="image-20240608204002547"></p><h2 id="经典卷积网络"><a href="#经典卷积网络" class="headerlink" title="经典卷积网络"></a>经典卷积网络</h2><p><strong>残差网络</strong></p><p>残差网络（Residual Network，ResNet）是通过给非线性的卷积层增加<strong>直连边</strong>的方式来提高信息的传播效率。</p><p><img src="/2024/06/08/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608204534887.png"></p><p><strong>好处：</strong></p><ol><li>能够解决梯度消失问题，适用于深层结构。</li><li>加速了模型训练收敛速度，使得模型更容易地学习到恒等映射（identity mapping）或者近似于恒等映射的变换。</li><li>即学习输入与目标之间的差异，而不是直接学习输出。这样的设计使得网络可以更好地适应复杂的数据分布，提高了网络的表达能力</li></ol><h2 id="CNN的优缺点"><a href="#CNN的优缺点" class="headerlink" title="CNN的优缺点"></a>CNN的优缺点</h2><p><strong>优点：</strong></p><ol><li>共享卷积核，对高维数据处理无压力</li><li>无需手动提取特征，训练好合适的权重，可以获取好的特征</li><li>分类效果好</li></ol><p><strong>缺点：</strong></p><ol><li>需要调参，还需要大样本，训练要GPU</li><li>物理含义不明确</li></ol><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ol><li>卷积网络的三个结构特征：共享权值，局部连接，时间或空间上的次采样</li><li>卷积的定义，以及各式各样的卷积</li><li>卷积网络结构（卷积块的构成+全连接层）</li><li>理解残差网络的机理</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基于图片生成古诗</title>
    <link href="/2024/06/07/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E5%8F%A4%E8%AF%97/"/>
    <url>/2024/06/07/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E5%8F%A4%E8%AF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="基于图片生成古诗"><a href="#基于图片生成古诗" class="headerlink" title="基于图片生成古诗"></a>基于图片生成古诗</h1><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>我们在看图说话时，一般都是先看看图片上有什么内容，比如一张图里有山有水还有很多的植物，那我们对这张图的第一印象就是一张风景图，然后我们再根据图片上某一个具体的景物做详细的描述。</p><p>想让机器看图生成古诗，可以表示为如下步骤：</p><ol><li>对图像分类，比如这个图像是风景图，再确切一点，是有湖、骛、荷花的风景图。这样就可以得到这个图的关键词。</li><li>由上一步得到的关键词，通过古诗生成模型，来生成有关图片的古诗。</li></ol><p>下面，将把这个项目分成以下几个部分：图片分类、古诗生成、网页搭建。</p><h3 id="图片分类"><a href="#图片分类" class="headerlink" title="图片分类"></a>图片分类</h3><p>自己重新训练47%准确率</p><p>采用ResNet50预训练模型，微调后准确率在65%左右</p><p>图片——&gt;标签——&gt;关键词</p><p>如：输入图像</p><p><img src="/2024/06/07/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E5%8F%A4%E8%AF%97/image-20240616202651925.png" alt="image-20240616202651925"></p><p>得到类别和具体标签：</p><p><img src="/2024/06/07/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E5%8F%A4%E8%AF%97/image-20240616202721506.png" alt="image-20240616202721506"></p><h2 id="诗句生成"><a href="#诗句生成" class="headerlink" title="诗句生成"></a>诗句生成</h2><h3 id="关键词的构造"><a href="#关键词的构造" class="headerlink" title="关键词的构造"></a>关键词的构造</h3><p>在上一节得到了具体类别后，要建立一个标签（英文）到关键词（字或者词）的映射，根据语义手动构造即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_label_key_dict</span>():<br>    fileHandle = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;label_key_dict.txt&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>    <span class="hljs-comment"># 图片标签与key_word对应关系</span><br>    l1 = [<span class="hljs-string">&#x27;江海湖&#x27;</span>, <span class="hljs-string">&#x27;鱼游水&#x27;</span>, <span class="hljs-string">&#x27;鱼&#x27;</span>]<br>    l2 = [<span class="hljs-string">&#x27;春花&#x27;</span>, <span class="hljs-string">&#x27;秋落&#x27;</span>, <span class="hljs-string">&#x27;春红&#x27;</span>, <span class="hljs-string">&#x27;春风&#x27;</span>, <span class="hljs-string">&#x27;秋凉&#x27;</span>, <span class="hljs-string">&#x27;枝&#x27;</span>, <span class="hljs-string">&#x27;桃&#x27;</span>]<br>    l3 = [<span class="hljs-string">&#x27;杯&#x27;</span>, <span class="hljs-string">&#x27;盘&#x27;</span>]<br>    l4 = [<span class="hljs-string">&#x27;桃&#x27;</span>, <span class="hljs-string">&#x27;枝&#x27;</span>]<br>    l5 = [<span class="hljs-string">&#x27;金&#x27;</span>, <span class="hljs-string">&#x27;盘&#x27;</span>]<br>    l6 = [<span class="hljs-string">&#x27;飞&#x27;</span>, <span class="hljs-string">&#x27;飞高&#x27;</span>]<br>    l7 = [<span class="hljs-string">&#x27;山&#x27;</span>, <span class="hljs-string">&#x27;野&#x27;</span>]<br>    l8 = [<span class="hljs-string">&#x27;楼&#x27;</span>, <span class="hljs-string">&#x27;高&#x27;</span>, <span class="hljs-string">&#x27;阁&#x27;</span>]<br>    l9 = [<span class="hljs-string">&#x27;树&#x27;</span>, <span class="hljs-string">&#x27;林&#x27;</span>, <span class="hljs-string">&#x27;枝&#x27;</span>]<br>    l10 = [<span class="hljs-string">&#x27;车&#x27;</span>, <span class="hljs-string">&#x27;车路&#x27;</span>]<br>    label_key_dict = &#123;<span class="hljs-string">&#x27;beaver&#x27;</span>: l1, <span class="hljs-string">&#x27;dolphin&#x27;</span>: l1, <span class="hljs-string">&#x27;otter&#x27;</span>: l1, <span class="hljs-string">&#x27;seal&#x27;</span>: l1, <span class="hljs-string">&#x27;aquarium_fish&#x27;</span>: l1, <span class="hljs-string">&#x27;flatfish&#x27;</span>: l1,<br>                        <span class="hljs-string">&#x27;ray&#x27;</span>: l1, <span class="hljs-string">&#x27;shark&#x27;</span>: l1, <span class="hljs-string">&#x27;trout&#x27;</span>: l1, <span class="hljs-string">&#x27;whale&#x27;</span>: l1, <span class="hljs-string">&#x27;orchid&#x27;</span>: l2, <span class="hljs-string">&#x27;poppie&#x27;</span>: l2, <span class="hljs-string">&#x27;rose&#x27;</span>: l2,<br>                        <span class="hljs-string">&#x27;sunflower&#x27;</span>: l2, <span class="hljs-string">&#x27;tulip&#x27;</span>: l2, <span class="hljs-string">&#x27;bottle&#x27;</span>: l3, <span class="hljs-string">&#x27;bowl&#x27;</span>: l3, <span class="hljs-string">&#x27;can&#x27;</span>: l3, <span class="hljs-string">&#x27;cup&#x27;</span>: l3,<br>                        <span class="hljs-string">&#x27;plate&#x27;</span>: l3, <span class="hljs-string">&#x27;apple&#x27;</span>: l4, <span class="hljs-string">&#x27;mushroom&#x27;</span>: l4, <span class="hljs-string">&#x27;orange&#x27;</span>: l4, <span class="hljs-string">&#x27;pear&#x27;</span>: l4, <span class="hljs-string">&#x27;sweet_pepper&#x27;</span>: l4,<br>                        <span class="hljs-string">&#x27;clock&#x27;</span>: l5, <span class="hljs-string">&#x27;computer keyboard&#x27;</span>: l5, <span class="hljs-string">&#x27;lamp&#x27;</span>: l5, <span class="hljs-string">&#x27;telephone&#x27;</span>: l5, <span class="hljs-string">&#x27;television&#x27;</span>: l5,<br>                        <span class="hljs-string">&#x27;bed&#x27;</span>: l5, <span class="hljs-string">&#x27;chair&#x27;</span>: l5, <span class="hljs-string">&#x27;couch&#x27;</span>: l5, <span class="hljs-string">&#x27;table&#x27;</span>: l5, <span class="hljs-string">&#x27;wardrobe&#x27;</span>: l5,<br>                        <span class="hljs-string">&#x27;bee&#x27;</span>: l6, <span class="hljs-string">&#x27;beetle&#x27;</span>: l6, <span class="hljs-string">&#x27;butterfly&#x27;</span>: l6, <span class="hljs-string">&#x27;caterpillar&#x27;</span>: l6, <span class="hljs-string">&#x27;cockroach&#x27;</span>: l6,<br>                        <span class="hljs-string">&#x27;bear&#x27;</span>: l7, <span class="hljs-string">&#x27;leopard&#x27;</span>: l7, <span class="hljs-string">&#x27;lion&#x27;</span>: l7, <span class="hljs-string">&#x27;tiger&#x27;</span>: l7, <span class="hljs-string">&#x27;wolf&#x27;</span>: l7,<br>                        <span class="hljs-string">&#x27;bridge&#x27;</span>: [<span class="hljs-string">&#x27;桥&#x27;</span>], <span class="hljs-string">&#x27;castle&#x27;</span>: l8, <span class="hljs-string">&#x27;house&#x27;</span>: l8, <span class="hljs-string">&#x27;road&#x27;</span>: [<span class="hljs-string">&#x27;路&#x27;</span>, <span class="hljs-string">&#x27;道&#x27;</span>], <span class="hljs-string">&#x27;skyscraper&#x27;</span>: l8,<br>                        <span class="hljs-string">&#x27;cloud&#x27;</span>: [<span class="hljs-string">&#x27;云&#x27;</span>], <span class="hljs-string">&#x27;forest&#x27;</span>: [<span class="hljs-string">&#x27;林&#x27;</span>], <span class="hljs-string">&#x27;mountain&#x27;</span>: [<span class="hljs-string">&#x27;山&#x27;</span>], <span class="hljs-string">&#x27;plain&#x27;</span>: [<span class="hljs-string">&#x27;平&#x27;</span>], <span class="hljs-string">&#x27;sea&#x27;</span>: [<span class="hljs-string">&#x27;海&#x27;</span>],<br>                        <span class="hljs-string">&#x27;camel&#x27;</span>: [<span class="hljs-string">&#x27;沙&#x27;</span>], <span class="hljs-string">&#x27;cattle&#x27;</span>: l7, <span class="hljs-string">&#x27;chimpanzee&#x27;</span>: l7, <span class="hljs-string">&#x27;elephant&#x27;</span>: l7, <span class="hljs-string">&#x27;kangaroo&#x27;</span>: l7,<br>                        <span class="hljs-string">&#x27;fox,&#x27;</span>: l7, <span class="hljs-string">&#x27;porcupine&#x27;</span>: l7, <span class="hljs-string">&#x27;possum&#x27;</span>: l7, <span class="hljs-string">&#x27;raccoon&#x27;</span>: l7, <span class="hljs-string">&#x27;skunk&#x27;</span>: l7,<br>                        <span class="hljs-string">&#x27;crab&#x27;</span>: [<span class="hljs-string">&#x27;鱼&#x27;</span>], <span class="hljs-string">&#x27;lobster&#x27;</span>: [<span class="hljs-string">&#x27;鱼&#x27;</span>], <span class="hljs-string">&#x27;snail&#x27;</span>: [<span class="hljs-string">&#x27;地&#x27;</span>], <span class="hljs-string">&#x27;spider&#x27;</span>: [<span class="hljs-string">&#x27;地&#x27;</span>], <span class="hljs-string">&#x27;worm&#x27;</span>: [<span class="hljs-string">&#x27;地&#x27;</span>],<br>                        <span class="hljs-string">&#x27;baby&#x27;</span>: [<span class="hljs-string">&#x27;儿&#x27;</span>, <span class="hljs-string">&#x27;小子&#x27;</span>], <span class="hljs-string">&#x27;man&#x27;</span>: [<span class="hljs-string">&#x27;夫&#x27;</span>], <span class="hljs-string">&#x27;womam&#x27;</span>: [<span class="hljs-string">&#x27;女&#x27;</span>], <span class="hljs-string">&#x27;boy&#x27;</span>: [<span class="hljs-string">&#x27;郎&#x27;</span>], <span class="hljs-string">&#x27;girl&#x27;</span>: [<span class="hljs-string">&#x27;女&#x27;</span>],<br>                        <span class="hljs-string">&#x27;crocodile&#x27;</span>: l7, <span class="hljs-string">&#x27;dinosaur&#x27;</span>: l7, <span class="hljs-string">&#x27;lizard&#x27;</span>: l7, <span class="hljs-string">&#x27;snake&#x27;</span>: l7, <span class="hljs-string">&#x27;turtle&#x27;</span>: l7,<br>                        <span class="hljs-string">&#x27;hamster&#x27;</span>: l7, <span class="hljs-string">&#x27;mouse&#x27;</span>: l7, <span class="hljs-string">&#x27;rabbit&#x27;</span>: l7, <span class="hljs-string">&#x27;shrew&#x27;</span>: l7, <span class="hljs-string">&#x27;squirrel&#x27;</span>: l7,<br>                        <span class="hljs-string">&#x27;maple_tree&#x27;</span>: l9, <span class="hljs-string">&#x27;oak_tree&#x27;</span>: l9, <span class="hljs-string">&#x27;palm_tree&#x27;</span>: l9, <span class="hljs-string">&#x27;pine_tree&#x27;</span>: l9, <span class="hljs-string">&#x27;willow_tree&#x27;</span>: l9,<br>                        <span class="hljs-string">&#x27;bicycle&#x27;</span>: l10, <span class="hljs-string">&#x27;bus&#x27;</span>: l10, <span class="hljs-string">&#x27;motorcycle&#x27;</span>: l10, <span class="hljs-string">&#x27;pickup truck&#x27;</span>: l10, <span class="hljs-string">&#x27;train&#x27;</span>: l10,<br>                        <span class="hljs-string">&#x27;lawn_mower&#x27;</span>: l10, <span class="hljs-string">&#x27;rocket&#x27;</span>: l10, <span class="hljs-string">&#x27;streetcar&#x27;</span>: l10, <span class="hljs-string">&#x27;tank&#x27;</span>: l10, <span class="hljs-string">&#x27;tractor&#x27;</span>: l10&#125;<br>    pickle.dump(label_key_dict, fileHandle)<br>    fileHandle.close()  <br></code></pre></td></tr></table></figure><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><p>样本全部选择的是五言绝句。</p><p>把样本全部处理成形如（[千山鸟飞绝，万径人踪灭，孤舟蓑笠翁，独钓寒江雪]）的形式</p><p>提取诗句中的所有字，统计频率，按照出现次数递减排序，给这些字从0开始编号</p><p>word ——&gt;id ——&gt;word</p><p>由此也可以得到诗句的向量（对于诗句，开头字符BOS定为’[‘（id &#x3D;2），结尾字符EOS定为’]’（id &#x3D;3））都是五言绝句，不需要填充</p><p>使用word2vec对字向量训练，输入一个关键字能得到与其语义相近的关键字</p><p>上一节得到的图像标签”castle”—(label_key_dict)—&gt;[‘楼’, ‘高’, ‘阁’]， 可通过word2vec得到其相近的关键字</p><h3 id="数据输入与输出"><a href="#数据输入与输出" class="headerlink" title="数据输入与输出"></a>数据输入与输出</h3><p>X（Decoder输入：诗句）</p><p>Y（Decoder输出：诗句）</p><p>Z（Encoder输入：关键字构成的向量）<br>下图是X和Y的构造方法</p><p><img src="/2024/06/07/%E5%9F%BA%E4%BA%8E%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E5%8F%A4%E8%AF%97/image-20240616205650612.png" alt="image-20240616205650612"></p><p>对关键字向量Z，每个诗句对应固定容量为4的字向量，通过图片得到的标签可再经过word2vec得到与其词义相近的字，组成关键字向量。</p><h3 id="模型构建"><a href="#模型构建" class="headerlink" title="模型构建"></a>模型构建</h3><p>采用transformer模型</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>大模型的高效微调</title>
    <link href="/2024/06/05/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%AB%98%E6%95%88%E5%BE%AE%E8%B0%83/"/>
    <url>/2024/06/05/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%AB%98%E6%95%88%E5%BE%AE%E8%B0%83/</url>
    
    <content type="html"><![CDATA[<h1 id="参数高效微调"><a href="#参数高效微调" class="headerlink" title="参数高效微调"></a>参数高效微调</h1><h1 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt-"></a>Prompt-</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-最小生成树的生成</title>
    <link href="/2024/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E7%94%9F%E6%88%90/"/>
    <url>/2024/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h1 id="最小生成树的生成"><a href="#最小生成树的生成" class="headerlink" title="最小生成树的生成"></a>最小生成树的生成</h1><p>定义：把无向图的全部n个顶点和n-1条边构成的生成树，其边的权值最小的树称为该图的最小生成树。</p><p>实现方法：</p><ol><li>prim方法：从任意一个起点开始，以贪心的策略，每次只选择一个距离当前联通部分最小的点加入生成树，直至所有点都被加入该树为止。</li><li>kruskal方法：首先把所有的边按权重从小到大排序，然后从权重最小的边开始添加，只要不会形成环就添加这条边，直到所有的点都连接起来。</li></ol><h2 id="Prim方法"><a href="#Prim方法" class="headerlink" title="Prim方法"></a>Prim方法</h2><p><img src="/2024/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E7%94%9F%E6%88%90/image-20240605185023203.png" alt="image-20240605185023203"></p><p>首先，我们需要任意选择一个起点，这里选节点1作为起点。dist[1] &#x3D; 0，其余的dist全为0x3f</p><p>然后，从所有节点的dist数组里面找到最小的节点加到联通部分。</p><p>更新所有与该节点相连的点的dist数组。</p><p>一次更新过程如下图所示</p><p><img src="/2024/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E7%94%9F%E6%88%90/image-20240605191803958.png" alt="image-20240605191803958"></p><p>下一次更新：</p><p><img src="/2024/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E7%94%9F%E6%88%90/image-20240605192122070.png" alt="image-20240605192122070"></p><p>下面是代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><span class="hljs-type">int</span> g[N][N];<span class="hljs-comment">//存储图</span><br><span class="hljs-type">int</span> dist[N];<span class="hljs-comment">//存储每个节点到当前联通部分的距离</span><br><span class="hljs-type">int</span> state[N];<span class="hljs-comment">//存储每个点是否被加入联通部分中</span><br><span class="hljs-type">int</span> pre[N];<span class="hljs-comment">//每个点联通时的前置节点</span><br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getpath</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//先将所有节点的前置节点置-1</span><br>    <span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(pre));<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(dist));<br>    <span class="hljs-comment">//将1节点的距离置0</span><br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> t= <span class="hljs-number">0</span>; t&lt;n; t++)&#123;<br>        <span class="hljs-comment">//查找所有节点中距离联通部分最近的点，加入联通部分</span><br>        <span class="hljs-type">int</span> midist = <span class="hljs-number">0x3f</span>;<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">-1</span>;<br>        <span class="hljs-comment">//设置t=-1是为了保留孤立点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            <span class="hljs-keyword">if</span>((index==<span class="hljs-number">-1</span> || dist[i]&lt;dist[index]) &amp;&amp; state[i]==<span class="hljs-number">0</span>)&#123;<br>                midist = dist[i];<br>                index = i;<br>            &#125;<br>            <br>        &#125;<br>        <span class="hljs-comment">//如果是孤立点 无法产生最小生成树</span><br>        <span class="hljs-keyword">if</span>(dist[index] == <span class="hljs-number">0x3f3f3f3f</span>)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;impossible&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//此时找到index节点，将其加入联通部分</span><br>        state[index] = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//cout&lt;&lt;&quot;index: &quot;&lt;&lt;index&lt;&lt;&quot; midist: &quot;&lt;&lt;midist&lt;&lt;endl;</span><br>        res += midist;<br>        <span class="hljs-comment">//更新所有与indx节点相连的点 到联通部分的距离</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            <span class="hljs-comment">//cout&lt;&lt;&quot;dist[i]&quot;&lt;&lt;dist[i]&lt;&lt;&quot; g[i][index]&quot;&lt;&lt;g[i][index]&lt;&lt;endl;</span><br>            <span class="hljs-keyword">if</span>(state[i]==<span class="hljs-number">0</span> &amp;&amp; (dist[i] &gt; g[i][index]))&#123;<br>                dist[i] = <span class="hljs-built_in">min</span>(dist[i], g[i][index]);<br>                <span class="hljs-comment">//cout&lt;&lt;&quot;i: &quot;&lt;&lt;i&lt;&lt;&quot;dist[i]&quot;&lt;&lt;dist[i]&lt;&lt;endl;</span><br>                <br>            &#125;<br>        &#125;<br>    <br>    &#125;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    <br>    <br>    <br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(g));<br>    <br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">int</span> a,b,w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;w;<br>        g[a][b] = g[b][a] =<span class="hljs-built_in">min</span>(w, g[a][b]);<br>    &#125;<br>    <br>    <span class="hljs-built_in">getpath</span>();<br>    <br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="kruskal方法"><a href="#kruskal方法" class="headerlink" title="kruskal方法"></a>kruskal方法</h2><p><strong>方法</strong>：将所有边按从小到大的顺序排序，一条一条边的尝试加入结果集，如果正在尝试加入的这条边加入后会产生环路，则放弃该边，选择下一条边，直至选完n-1条边。</p><p><img src="/2024/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%9A%84%E7%94%9F%E6%88%90/image-20240605202553078.png" alt="image-20240605202553078"></p><p><strong>判断环路产生</strong>：使用并查集的方法。使用一个代表数组存储数据，如p&#x3D;[0,0,0,3,3]的意思是原数组a[0]&#x3D;a[1]&#x3D;a[2]，他们的代表元素是a[0]；a[3]&#x3D;a[4],他们的代表元素是a[3]。</p><ol><li><strong>并</strong>：如把[1,2,3]和[4,5]合并，只需要把p数组的p[3]修改成0即可</li><li><strong>查</strong>：修改后，如果想查a[4]，通过查找p数组，发现a[4]&#x3D;a[3], 再查找p数组a[3]&#x3D; a[0]，由此就查到了a[4]&#x3D; a[0]</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"># 找到a的代表元素<br><span class="hljs-meta"># p[0,0,0,1,3] 如果想找到4的代表元素，p[4]= p[3]=p[1]=p[0]</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a!=p[a])<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(p[a]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[a];<br>&#125;<br></code></pre></td></tr></table></figure><p>代码实现：</p><p>边的存储：使用结构体struct E{int a,  b,  w;}</p><p>排序边：构造compare(const E &amp; a, const E &amp; b)函数比较</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>&#123;<br>    <span class="hljs-type">int</span> a,b,w;<br>&#125;edg[<span class="hljs-number">200010</span>];<br><br><span class="hljs-type">int</span> p[<span class="hljs-number">200010</span>];<br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compare</span><span class="hljs-params">(Edge a, Edge b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.w &lt; b.w;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findp</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a != p[a])&#123;<br>        p[a] = <span class="hljs-built_in">findp</span>(p[a]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[a];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> cnt =<span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        <span class="hljs-type">int</span> pa = <span class="hljs-built_in">findp</span>(edg[i].a);<br>        <span class="hljs-type">int</span> pb = <span class="hljs-built_in">findp</span>(edg[i].b);<br>        <span class="hljs-keyword">if</span>(pa!=pb)&#123;<br>            res += edg[i].w;<br>            p[pa] = pb;<br>            cnt ++;<br>            <br>        &#125;<br>       <br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(cnt&lt;n<span class="hljs-number">-1</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;impossible&quot;</span>&lt;&lt;endl;<br>       <br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        cout&lt;&lt;res&lt;&lt;endl;<br>        <br>    &#125;<br>&#125;<br>    <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        p[i] = i;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; i++)&#123;<br>        cin&gt;&gt;edg[i].a&gt;&gt;edg[i].b&gt;&gt;edg[i].w;<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(edg+<span class="hljs-number">1</span>, edg+m+<span class="hljs-number">1</span>, compare);<br>    <br>    <span class="hljs-built_in">kruskal</span>();<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>大语言模型介绍（一）</title>
    <link href="/2024/06/04/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/06/04/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="大语言模型"><a href="#大语言模型" class="headerlink" title="大语言模型"></a>大语言模型</h1><h1 id="语言模型的发展历程"><a href="#语言模型的发展历程" class="headerlink" title="语言模型的发展历程"></a>语言模型的发展历程</h1><p>语言模型旨在对于人类语言的内在规律进行建模，从而准确预测 词序列中未来（或缺失）词或词元（Token）的概率。根据所采用技术方法的不同， 针对语言模型的研究工作可以分为以下四个主要发展阶段：</p><ol><li><p>**统计语言模型（SLM)**：统计语言模型使用马尔可夫假设（MarkovAssumption）来建立语言序列的预测模型，通常是根据词序 列中若干个连续的上下文单词来预测下一个词的出现概率，即根据一个固定长度的前缀来预测目标单词。</p><p>如：N-gram模型，<strong>某一个词语出现的概率只由其前面的n−1个词语所决定</strong>。</p><p>$p(S)&#x3D;p(w_1w_2⋯w_n)&#x3D;p(w_1)p(w_2∣w_1)⋯p(w_n∣w_n−1)$</p><p>$p(冰激凌|我要去吃)&#x3D;p(冰激凌|吃)$ </p><p>对于高阶统计语言模型来说，随着阶数𝑛的增加，需要估计的转移概率项数将会指数级增长，经常会受到“维数灾难”（CurseofDimensionality） 的困扰。</p></li><li><p>**神经语言模型（NLM)**：神经语言模型使用神经网络来建模文本序列的生成，如循环神经网络（RecurrentNeuralNetworks,RNN）。通过引入WordEmbedding技术，能够有效克服统计语言模型中的数据稀疏问题，稠密向量的非零表征对于复杂语言模型的搭建非常友好。</p><p>Word2vec 是一个两层神经网络，通过“向量化”单词来处理文本。它的<strong>输入是一个文本语料库</strong>，它的<strong>输出是一组向量</strong>：表示该语料库中单词的特征向量。</p><p><img src="/2024/06/04/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89/image-20240604214251379.png" alt="image-20240604214251379"></p></li><li><p><strong>预训练语言模型（PLM)<strong>：与早期的词嵌入模型相 比，预训练语言模型在</strong>训练架构</strong>与<strong>训练数据</strong>两个方面进行了改进与创新。ELMo使用大量的无标注数据训练双向LST网络预训练完成后所得到的biLSTM可以用来学 习上下文感知的单词表示。进一 步，ELMo可以根据下游任务数据对biLSTM网络进行微调（Fine-Tuning），从而实现面向特定任务的模型优化。在2017 年，谷歌提出了基于自注意力机制（Self-Attention）的Transformer模型，通过自注意力机制建模长程序列关系。基于Transformer架构，谷歌进一步提出了预训练语言模型BERT，采用了仅有编码器的Transformer架构，并通过在大规模无标注数据上使用专门设计的预训练任务来学习双向语言模型。GPT-1采用了仅有解码器的Transformer架构，以及基于下一个词元预测的预训练任务进行模型的训练。</p><p>以ELMo、BERT、GPT-1为代表的预训练语言模型确立了“<strong>预训练-微调</strong>”这一任务求解范式。其中，预训练阶段旨在通过大规模无标注文本建立模型 的基础能力，而微调阶段则使用有标注数据对于模型进行特定任务的适配，从而更好地解决下游的自然语言处理任务。</p><p><img src="/2024/06/04/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89/image-20240604214907303.png" alt="image-20240604214907303"></p></li><li><p><strong>大语言模型（LLM)<strong>： 研究人员发现，通过规模扩展 （如增加模型参数规模或数据规模）通常会带来下游任务的模型性能提升，这种现象通常被称为“</strong>扩展法则</strong>”（ScalingLaw）。一些研究工作尝试训练更大的预 训练语言模型（例如175B参数的GPT-3和540B参数的PaLM）来探索扩展语言 模型所带来的性能极限。这些大规模的预训练语言模型在解决复杂任务时表现出 了与小型预训练语言模型（例如330M参数的BERT和1.5B参数的GPT-2）不同 的行为。</p></li></ol><h2 id="大语言模型的构建过程"><a href="#大语言模型的构建过程" class="headerlink" title="大语言模型的构建过程"></a>大语言模型的构建过程</h2><p>神经网络是一种具有特定模型结构的函数形式，而大语言模型则是一种基于 Transformer 结构的神经网络模型。因此，可以将大语言模型看作一种拥有大规模参数的函数，它的构建过程就是使用训练数据对于模型参数的拟合过程。  大语言模型的优化目标更加泛化，不仅仅是为了解决某一种或者某一类特定任务，而是希望能够<strong>作为通用任务的求解器</strong>。为了实现这一宏大的目标，大语言模型的构建过程需要更为复杂、精细的训练方法。一般来说，这个训练过程可以分为<strong>大规模预训练</strong>和<strong>指令微调与人类对齐</strong>两个阶段 。</p><h3 id="大规模预训练"><a href="#大规模预训练" class="headerlink" title="大规模预训练"></a>大规模预训练</h3><p>预训练是指使用与下游任务无关的大规模数据进行模型参数的初始训练，可以认为是<strong>为模型参数找到一个较好的“初值点”</strong>。 大规模预训练本质上是在做一个世界知识的压缩，从而能够学习到一个<strong>编码世界知识</strong>的参数模型，这个模型能够通过解压缩所需要的知识来解决真实世界的任务。  </p><p>为了预训练大语言模型，需要准备大规模的文本数据，并且进行严格的清洗，去除掉可能包含有毒有害的内容，最后将清洗后的数据进行词元化（Tokenization）流，并且切分成批次（Batch），用于大语言模型的预训练。  </p><h3 id="指令微调与人类对齐"><a href="#指令微调与人类对齐" class="headerlink" title="指令微调与人类对齐"></a>指令微调与人类对齐</h3><p>但是由于预训练任务形式所限，这些模型更擅长于文本补全，并不适合直接解决具体的任务。比较广泛使用的微调技术是“指令微调”（也叫做有监督微调， Supervised Fine-tuning, SFT），通过使用任务输入与输出的配对数据进行模型训练，可以使得语言模型较好地掌握通过问答形式进行任务求解的能力。 与预训练相比，指令微调通常来说需要的指令实例数据规模要小的多。  </p><p> 除了提升任务的解决能力外，还需要将大语言模型与人类的期望、需求以及价值观对齐（Alignment），这对于大模型的部署与应用具有重要的意义。OpenAI在 2022 年初发布了 InstructGPT 的学术论文，系统地介绍了如何将语言模型进行人类对齐。具体来说，主要引入了基于人类反馈的强化学习对齐方法 RLHF （Reinforcement Learning from Human Feedback），在指令微调后使用强化学习加强模型的对齐能力。在 RLHF 算法中，需要训练一个符合人类价值观的奖励模型（Reward Model）。    </p><h3 id="扩展法则"><a href="#扩展法则" class="headerlink" title="扩展法则"></a>扩展法则</h3><p>  大语言模型采用了与小型预训练语言模型相似的神经网络结构（基于注意力机制的 Transformer 架构）和预训练方法（如语言建模）。但是通过<strong>扩展参数规模、数据规模和计算算力</strong>，大语言模型的能力显著超越了小型语言模型的能力。有趣的是，这种通过扩展所带来的性能提升通常显著高于通过改进架构、算法等方面所带来的改进。  </p><p>当算力 𝐶 给定的情况下，最优的模型参数规模和数据规模由指数系数 𝑎 和 𝑏 分别确定。 𝑎 和 𝑏 决定了参数规模和数据规模的资源分配优先级：当 𝑎 &gt; 𝑏时，应该用更多的算力去提高参数规模；当 𝑏 &gt; 𝑎 时，应该用更多的算力去提高数据规模。尽管 KM 扩展法则和 Chinchilla 扩展法则具有相似的公式形式，但是在模型规模和数据规模的扩展上存在一定的差异。随着算力预算的增加， KM 扩展法则（𝑎 ≈ 0.73, 𝑏 ≈ 0.27  ）倾向于将更大的预算分配给模型规模的增加，而不是分配给数据规模的增加；而 Chinchilla 扩展法则主张两种规模参数应该以等比例关系增加（𝑎 ≈ 0.46, 𝑏 ≈ 0.54 ）。</p><p>越来越多的工作表明，现有的预训练语言模型对于数据的需求量远高于这些扩展法则中所给出的估计规模。例如， LLaMA-2 (7B) 的模型就使用了 2T 的词元进行训练，很多更小的模型也能够通过使用超大规模的预训练数据获得较大的模型性能提升。  </p><h3 id="涌现能力"><a href="#涌现能力" class="headerlink" title="涌现能力"></a>涌现能力</h3><p>大语言模型的涌现能力被非形式化定义为“在小型模型中不存在但在大模型中出现的能力”，具体是指当模型扩展到一定规模时，模型的特定任务性能突然出现显著跃升的趋势，远超过随机水平。  </p><ol><li><p>上下文学习</p><p>上下文学习能力在 GPT-3 的论文中被正式提出。具体方式为，在提示中为语言模型提供自然语言指令和多个任务示例（Demonstration），无需显式的训练或梯度更新，仅输入文本的单词序列就能为测试样本生成预期的输出。  </p></li><li><p>指令遵循</p><p>指令遵循能力是指大语言模型能够按照自然语言指令来执行对应的任务。为了获得这一能力，通常需要使用自然语言描述的多任务示例数据集进行微调，称为指令微调（Instruction Tuning）或监督微调（Supervised Fine-tuning）。通过指令微调，大语言模型可以在没有使用显式示例的情况下按照任务指令完成新任务，有效提升了模型的泛化能力。  </p></li><li><p>逐步推理</p><p>对于小型语言模型而言，通常很难解决涉及多个推理步骤的复杂任务（如数学应用题），而大语言模型则可以利用思维链（Chain-of-Thought, CoT）提示策略来加强推理性能。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-图的创建与遍历</title>
    <link href="/2024/06/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86/"/>
    <url>/2024/06/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="有向图的拓扑排序"><a href="#有向图的拓扑排序" class="headerlink" title="# 有向图的拓扑排序"></a># 有向图的拓扑排序</h1><h2 id="图的创建与遍历"><a href="#图的创建与遍历" class="headerlink" title="图的创建与遍历"></a>图的创建与遍历</h2><p>给定节点数和边数，以及构成每条边的两个节点。</p><p><strong>构造图</strong>：</p><p><img src="/2024/06/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86/Users\TJL\AppData\Roaming\Typora\typora-user-images\image-20240603193735331.png" alt="image-20240603193735331"></p><p>要存储上面的图，需要h[N], e[N], ne[N]来表示</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> h[N];<span class="hljs-comment">//存放节点a第一个邻接节点的索引idx</span><br><span class="hljs-type">int</span> e[N];<span class="hljs-comment">//存放索引为idx的边的指向的节点值a</span><br><span class="hljs-type">int</span> ne[N];<span class="hljs-comment">//存放索引idx的与其共享同一个起始点的边的索引idx</span><br><span class="hljs-type">int</span> idx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">int</span> a,b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-built_in">add</span>(a,b);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>        <span class="hljs-comment">//对点i求其所连接的边</span><br>        cout&lt;&lt;<span class="hljs-string">&quot;以节点&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;为起始点，与其相邻的边有：&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = h[i]; j!=<span class="hljs-number">-1</span>; j = ne[j])&#123;<br>            <span class="hljs-type">int</span> eb = e[j];<br>            cout&lt;&lt;eb&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <br>        &#125;<br>        cout&lt;&lt;endl;<br>        <br>    &#125; <br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/06/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86/Users\TJL\AppData\Roaming\Typora\typora-user-images\image-20240603193821500.png" alt="image-20240603193821500"></p><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p><strong>拓扑排序</strong>：</p><p>若一个由图中所有点构成的序列 A 满足：对于图中的每条边 (𝑥,𝑦)，𝑥 在 𝐴 中都出现在 𝑦 之前，则称 𝐴 是该图的一个拓扑序列。</p><p>如：下面的图，能找到序列：1 —— 2 —— 4 —— 3 ——5构成一条拓扑序列</p><p><img src="/2024/06/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%81%8D%E5%8E%86/Users\TJL\AppData\Roaming\Typora\typora-user-images\image-20240603194203015.png" alt="image-20240603194203015"></p><p><strong>判断方法</strong>：</p><ol><li>删除一个入度为0的节点，加入结果集合</li><li>将上述节点对应的有向边都删除，重复第一步</li><li>直到最后没有节点，则该图可找出拓扑序列</li></ol><p><strong>代码实现重点</strong>：</p><ol><li>现把入度为0的节点加到集合的，后面删除该节点对应的边时要先删除：可以使用队列存储</li><li>删除节点a对应的有向边：可以遍历a为起始的连接边，将这些对应的点的入度-1即可</li><li>直到最后没有节点：队列为空时，结果集为整个图的节点个数</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>用一个d[N]数组来存储每个点的入度数</p><p>队列q存储所有入度为0的节点</p><p>数组v存储答案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><br><span class="hljs-type">int</span> e[N], ne[N],h[N];<br><span class="hljs-type">int</span> d[N];<span class="hljs-comment">//计算每个点的入度数</span><br><span class="hljs-type">int</span> idx;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> sum;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//找度为0的点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(d[i]==<span class="hljs-number">0</span>)&#123;<br>            q.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        v.<span class="hljs-built_in">push_back</span>(u);<br>        sum++;<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = h[u]; j!=<span class="hljs-number">-1</span>; j=ne[j])&#123;<br>            <span class="hljs-type">int</span> c = e[j];<br>            d[c]--;<br>            <span class="hljs-keyword">if</span>(d[c]==<span class="hljs-number">0</span>)&#123;<br>                q.<span class="hljs-built_in">push</span>(c);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(sum == n)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i : v)&#123;<br>            cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>    <br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">int</span> a,b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span> ;i&lt;m ;i++)&#123;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-built_in">add</span>(a,b);<br>        d[b]++;<br>    &#125;<br>    <span class="hljs-built_in">topsort</span>();<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前馈神经网络</title>
    <link href="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="前馈神经网络"><a href="#前馈神经网络" class="headerlink" title="前馈神经网络"></a>前馈神经网络</h1><h2 id="感知机模型"><a href="#感知机模型" class="headerlink" title="感知机模型"></a>感知机模型</h2><h3 id="单层感知机"><a href="#单层感知机" class="headerlink" title="单层感知机"></a>单层感知机</h3><p>输入层：感知层，n个神经节点，无信息处理能力，只负责引入外部信息X。</p><p>处理层：m个神经接点，每节点均有信息处理能力，m个节点向外部处理输出信息，构成输出列向量Y。</p><p>两层间连接权值用权值列向量$W_j$表示，m个权向量构成单层感知器的权值矩阵W。</p><span id="more"></span><p>$W_j&#x3D;[w_{1j} w_{2j} …w{ij}…w_{nj}]^T $</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608180125854.png" alt="image-20240608180125854"></p><p>离散型单计算层感知器采用符号型转移函数，则j节点输出为：</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608180228313.png" alt="image-20240608180228313"></p><h4 id="单计算节点感知机"><a href="#单计算节点感知机" class="headerlink" title="单计算节点感知机"></a>单计算节点感知机</h4><p>单计算节点感知器实际上就是一个M-P神经元模型。</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608180257486.png" alt="image-20240608180257486"></p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608180319370.png" alt="image-20240608180319370"></p><p><strong>功能：</strong></p><p>输入向量$X&#x3D;[x_1 x_2 …x_n]^T$,则n个输入分量构成几何n维空间，</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608180355265.png" alt="image-20240608180355265"></p><p>该超平面将样本分成2类。</p><p>一个简单的单计算节点感知器具有分类功能，其分类原理是将分类知识存储于感知器的权向量（包括阈值）中，由权向量确定的分类判决界面（线），可将输入模式分为两类。</p><p>举例：</p><ol><li><p>功能”<strong>与</strong>“</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608180432426.png" alt="image-20240608180432426"></p></li><li><p>功能”<strong>或</strong>“</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608180443134.png" alt="image-20240608180443134"></p></li><li><p>功能”<strong>异或</strong>”</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608180456415.png" alt="image-20240608180456415"></p><p>确定的分类判决方程是线性方程,因而只能解决线性可分问题的分类,不能解决线性不可分问题.<br>这称为单计算层感知器的局限性.</p></li></ol><h3 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h3><p>单计算层感知器只能解决线性可分问题,多层感知器可解决线性不可分问题。</p><p>输出层节点以隐层两节点y1,y2的输出作为输入,其结构也相当于一个符号单元。</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608180510130.png" alt="image-20240608180510130"></p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608180521772.png" alt="image-20240608180521772"></p><p>1、2两符号单元确定两条分界直线s1和s2,可构成开放式凸域。</p><p>双隐层感知器足以解决任何复杂分类问题，为提高感知器分类能力，可采用<strong>非线性连续函数</strong>作为神经元节点的转移函数，使区域边界变成曲线，可形成连续光滑曲线域。</p><h2 id="神经元"><a href="#神经元" class="headerlink" title="神经元"></a>神经元</h2><p>单个神经细胞只有两种状态：兴奋和抑制</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240607175753581.png" alt="image-20240607175753581"></p><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><p><strong>·</strong> 激活函数的性质：</p><ol><li>连续并可导的非线性函数（允许在少数点上不可导）</li><li>激活函数及其导数要尽可能的简单</li><li>激活函数的导数的值域要在有关合适的区间内</li><li>单调递增</li></ol><p><strong>·</strong> 常见的激活函数：</p><ol><li><p>S型</p><p>$\sigma(x) &#x3D; \frac{1}{1+e^{-x}}$</p><p>$\tanh(x)&#x3D;\frac{e^x - e^{-x}}{e^x + e^{-x}} &#x3D; 2\sigma(2x)-1$</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240607180731494.png" alt="image-20240607180731494"></p><p><strong>饱和函数：</strong>当$x$趋向无穷大时，其导数置趋于0</p><p>S型激活函数时饱和函数。（可能会导致梯度消失问题）</p><p>Tanh函数时零中心化的，logistic函数的输出恒大于0</p></li><li><p>斜坡型</p><p>$ReLU(x) &#x3D; \begin{cases}    x, &amp; \text{if } x &gt; 0 \    0, &amp; \text{if } x \leq 0 \end{cases}&#x3D;max(x,0)$</p><p>具有单侧抑制，宽兴奋边界，能在一定程度是缓解梯度消失问题 （ReLU 在正区间（x &gt; 0）上的梯度恒为 1，这意味着在正区间内，梯度不会消失。相比之下，一些传统的激活函数（如 Sigmoid 和 Tanh）在输入值较大或较小时会接近饱和，导致梯度消失，使得网络的训练速度变慢。）</p><p>$LeakyReLU(x) &#x3D; \begin{cases}    x, &amp; \text{if } x &gt; 0 \    \gamma x, &amp; \text{if } x \leq 0 \end{cases} &#x3D; max(0,x) + \gamma min(0,x)$</p><p>$PReLU(x) &#x3D; \begin{cases}    x, &amp; \text{if } x &gt; 0 \    \gamma_i x, &amp; \text{if } x \leq 0 \end{cases} &#x3D; max(0,x) + \gamma_i min(0,x)$</p><p>近似零中心化的非线性函数</p><p>$ELU(x) &#x3D; \begin{cases}    x, &amp; \text{if } x &gt; 0 \    \gamma (e^x-1), &amp; \text{if } x \leq 0 \end{cases} &#x3D; max(0,x) +  min(0,\gamma(e^x-1))$</p><p>ReLU的平滑版本：</p><p>$softplus(x) &#x3D; log(1+e^x)$</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240607182142681.png" alt="image-20240607182142681"></p><p><strong>死亡ReLU问题：</strong>一些神经元的输出始终为零，导致这些神经元对于网络的训练没有贡献，失去了激活的能力。可使用LeakyReLU缓解</p></li><li><p>复合函数</p><p>自门控激活函数</p><p>$swish(x) &#x3D; x\sigma(\beta x)$</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240607182656843.png" alt="image-20240607182656843"></p></li></ol><p>常见激活函数及其导数</p><table><thead><tr><th>激活函数</th><th>函数</th><th>导数</th></tr></thead><tbody><tr><td>Logistic函数</td><td>$f(x)&#x3D;\frac{1}{1+e^{-x}}$</td><td>$f^{‘}(x) &#x3D; f(x)(1-f(x)) $</td></tr><tr><td>Tanh函数</td><td>$f(x)&#x3D;\frac{e^x - e^{-x}}{e^x + e^{-x}}$</td><td>$f^{‘}(x) &#x3D; 1 - f^2(x)$</td></tr><tr><td>ReLU函数</td><td>$f(x) &#x3D; max(0,x)$</td><td>$f^{‘}(x) &#x3D; I(x&gt;0)$</td></tr><tr><td>ELU函数</td><td>$f(x) &#x3D; max(0,x)+min(0, \gamma(e^x-1))$</td><td>$f^{‘}(x) &#x3D; I(x&gt;0) + I(x\leq0)\gamma e^x$</td></tr><tr><td>SoftPlus函数</td><td>$f(x) &#x3D; log(1+ e^x)$</td><td>$f^{‘}(x) &#x3D; \frac{1}{1+e^{-x}}$</td></tr></tbody></table><h3 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h3><p>人工神经网络主要由大量的神经元以及它们之间的有向连接构成。</p><p>需要考虑三方面：</p><ol><li><p>神经元的激活规则</p></li><li><p>网络的拓扑结构</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240607184301479.png" alt="image-20240607184301479"></p></li><li><p>学习算法</p></li></ol><h2 id="前馈神经网络-1"><a href="#前馈神经网络-1" class="headerlink" title="前馈神经网络"></a>前馈神经网络</h2><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><p>各神经元分别属于不同层，层内无连接</p><p>相邻两层之间的神经元全部两两连接</p><p>网络中无反馈，信号从输入层想输出层单向传播，可用一个有向无环图表示。</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240607184828035.png" alt="image-20240607184828035"></p><h3 id="信息传递过程"><a href="#信息传递过程" class="headerlink" title="信息传递过程"></a>信息传递过程</h3><p>对第$l$层，其净输入$z^l &#x3D; W^la^{l-1}+b^l$，其输出为$a^l &#x3D; f(z^l)$</p><p>前馈计算为：$x &#x3D; a^0 \rightarrow  z^1 \rightarrow a^1 \rightarrow z^2 \rightarrow a^{L-1} \rightarrow z^L \rightarrow a^L $</p><h3 id="通用近似定理"><a href="#通用近似定理" class="headerlink" title="通用近似定理"></a>通用近似定理</h3><p>也叫<strong>万能逼近定理</strong></p><p>对于具有线性输出层和至少一个使用“挤压”性质的激活函数的隐藏层组成的前馈神经网络，只要其隐藏层神经元的数量足够，它可以以任意的精度来近似任何从一个定义在实数空间中的有界闭集函数。</p><h3 id="参数学习"><a href="#参数学习" class="headerlink" title="参数学习"></a>参数学习</h3><p>如果使用Softmax回归分类器，相当于网络最后一层设置C 个神经元，其输出经过Softmax函数进行归一化后可以作为每个类的条件概率。</p><p>$\hat{y} &#x3D; softmax(z^L)$</p><p>采用交叉熵损失函数，对样本$(x,y)$，其损失函数为：</p><p>$L(y,\hat{y}) &#x3D; -y^Tlog\hat{y}$</p><p>给定训练集为$𝐷 &#x3D; {(𝒙^{(𝑛)}, 𝑦^{(𝑛)} )}_{𝑛&#x3D;1}^𝑁$ ，将每个样本输入给前馈神经网络，得到网络输出$\hat{𝑦}^{(𝑛)}$ ，其在数据集D上的结构化风险函数为：</p><p>$R(W,b) &#x3D; \frac{1}{N}\sum_{n&#x3D;1}^{N}L(y^n, \hat{y}^n)+ \frac{1}{2} \lambda ||W||^2$</p><p>梯度下降：</p><p>$W^l \leftarrow W^l - \alpha\frac{\partial R(W,b)}{\partial W^l} $</p><p>$b^l \leftarrow b^l - \alpha\frac{\partial R(W,b)}{\partial b^l} $</p><h3 id="反向传播算法"><a href="#反向传播算法" class="headerlink" title="反向传播算法"></a>反向传播算法</h3><p><strong>Step1:</strong>  顺序表示梯度公式</p><p>由公式$z^l &#x3D; W^la^{l-1}+b^l$得：</p><p>$\frac{\partial L(y,\hat{y})}{\partial w_{ij}^l} &#x3D; \frac{\partial L(y,\hat{y})}{\partial \mathbf{z}^l } \frac{\partial \mathbf{z}^l}{\partial w_{ij}^l} $ , $\frac{\partial L(y,\hat{y})}{\partial \mathbf{b}^l} &#x3D; \frac{\partial L(y,\hat{y})}{\partial \mathbf{z}^l } \frac{\partial \mathbf{z}^l}{\partial \mathbf{b}^l} $</p><p>这里的$\mathbf{z}, \mathbf{b}$都是m维的向量</p><p>$\frac{\partial \mathbf{z}^l}{\partial w_{ij}^l} &#x3D; [ \frac{\partial z^l_1}{\partial w_{ij}^l}, \frac{\partial z^l_2}{\partial w_{ij}^l},…,\frac{\partial z^l_{i}}{\partial w_{ij}^l},…,\frac{\partial z^l_m}{\partial w_{ij}^l}] &#x3D; [0,0,…,\frac{\partial a^{l-1} \mathbf{w}_{i:}^l+b^{l}<em>i}{\partial w</em>{ij}^l},..,0] &#x3D; [0,0,…,a^{l-1}_j,0]$</p><p>同理，将$a_j^{l-1}$看作$1$，可得：</p><p>$\frac{\partial \mathbf{z}^l}{\partial \mathbf{b}^l} &#x3D; \mathbf{I}_m$</p><p>再令，$ \frac{\partial L(y,\hat{y})}{\partial \mathbf{z}^l }  &#x3D;  \mathbf{\delta}^l$，则损失函数对参数z，b求导最后可以写作：</p><p>$\frac{\partial L(y,\hat{y})}{\partial w_{ij}^l} &#x3D; \delta^l_i a_j^{l-1} $</p><p>$\frac{\partial L(y,\hat{y})}{\partial \mathbf{b}^l} &#x3D; \bold{\delta}^l$</p><p><strong>Step2:</strong>  根据递推公式表示$\bold{\delta}^l$</p><p>$\mathbf{z}^{l+1} &#x3D; \mathbf{W}^{l+1} \mathbf{a}^{l} + \mathbf{b}^{l+1}$</p><p>$\mathbf{a}^l &#x3D; f(\mathbf{z}^l)$</p><p>即$\mathbf{z}^l \rightarrow \mathbf{a}^l \rightarrow \mathbf{z}^{l+1}$</p><p>$\bold{\delta}^l &#x3D; \frac{\partial L(y,\hat{y})}{\partial \mathbf{z}^l }  &#x3D; \frac{\partial L(y,\hat{y})}{\partial \mathbf{z}^{l+1} } \frac{\partial \mathbf{z}^{l+1}}{\partial \mathbf{a}^l } \frac{\partial \mathbf{a}^l}{\partial \mathbf{z}^l }  &#x3D; \mathbf{\delta^{l+1}} (\mathbf{W}^{l+1})^T diag(f^{‘}(\mathbf{z}^l)) &#x3D; f^{‘}(\mathbf{z}^l) \odot \mathbf{\delta^{l+1}} (\mathbf{W}^{l+1})^T$</p><p>随机梯度下降训练过程：</p><p>输入：训练数据，验证数据</p><p>首先 随机初始化参数$\mathbf{W}, \mathbf{b}$</p><p>重复以下操作：</p><p>  对样本随机重排</p><p>  for n &#x3D;1 .. N do:</p><ol><li><p>选择一个样本$(\mathbf{x}^n, y^n)$，计算前馈的每一层的净输入$\mathbf{z}^l$和激活值$\mathbf{a}^l$，并计算每一层的误差$\bold{\delta}^l$，这个可以通过step2的公式计算</p></li><li><p>反向传播，计算每层的偏导，可用step1的公式计算</p><p>$\frac{\partial L(y,\hat{y})}{\partial w_{ij}^l} &#x3D; \delta^l_i a_j^{l-1} $</p><p>$\frac{\partial L(y,\hat{y})}{\partial \mathbf{b}^l} &#x3D; \bold{\delta}^l$</p></li><li><p>更新参数</p><p>$W^l \leftarrow W^l - \alpha\frac{\partial R(W,b)}{\partial W^l} $</p><p>$b^l \leftarrow b^l - \alpha\frac{\partial R(W,b)}{\partial b^l} $</p></li></ol><p>  end</p><p>直至模型在验证集上的错误率不在下降</p><p>举例：</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608170939640.png" alt="image-20240608170939640"></p><p>先按传播顺序计算出各个净输入和激活值</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/image-20240608171752988.png" alt="image-20240608171752988"></p><ol><li><p>计算输出层</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/56d0197d29a72eaa8310d7fedd501891-17178392786981.png" alt="img"></p><p>计算这层的误差：$\mathbf{\delta}^l &#x3D; \hat{y} (1- \hat{y}) (\hat{y} - y)$</p><p>更新权值：$\frac{\partial L(y,\hat{y})}{\partial w_{ij}^l} &#x3D; \delta^l_i a_j^{l-1}$</p></li><li><p>计算隐藏层</p><p><img src="/2024/06/03/%E5%89%8D%E9%A6%88%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/56d0197d29a72eaa8310d7fedd501891.png" alt="img"></p><p>计算这层的误差：$\mathbf{\delta}^l &#x3D; \hat{y} (1- \hat{y}) \sum(\mathbf{\delta}^{l+1}<em>j)w</em>{ij}$</p><p>更新权值：$\frac{\partial L(y,\hat{y})}{\partial w_{ij}^l} &#x3D; \delta^l_i a_j^{l-1}$</p></li></ol><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ol><li>前馈神经网络特点</li><li>激活函数的定义及其导数</li><li>反向传播算法</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>预训练模型</title>
    <link href="/2024/06/02/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/06/02/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="预训练模型"><a href="#预训练模型" class="headerlink" title="预训练模型"></a>预训练模型</h1><h2 id="预训练简介"><a href="#预训练简介" class="headerlink" title="预训练简介"></a>预训练简介</h2><p><strong>预训练</strong>：通过子监督学习从大规模数据里获取与具体任务无关的预训练模型的过程。</p><p>预训练任务：</p><ol><li><p>掩码语言模型（编码器）：将一些位置的token替换成特殊的[MASK]字符，预测这些被替换的字符</p><p><img src="/2024/06/02/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/Users\TJL\AppData\Roaming\Typora\typora-user-images\image-20240602212830234.png" alt="image-20240602212830234"></p><p>只计算掩码部分的loss，其余部分不计算loss</p><span id="more"></span></li><li><p>因果语言模型（解码器）：输入完整序列，基于上文预测当前token</p><p><img src="/2024/06/02/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/Users\TJL\AppData\Roaming\Typora\typora-user-images\image-20240602213105457.png" alt="image-20240602213105457"></p><p>eos代表句子结束</p></li><li><p>序列到序列模型：编码器解码器方式，预测部分放到解码器里面</p><p>只计算解码器的loss，不计算解码器部分</p></li></ol><h2 id="文本摘要"><a href="#文本摘要" class="headerlink" title="文本摘要"></a>文本摘要</h2><p><strong>文本摘要：</strong>输入长文本，将长文本转成简短的摘要</p><p>任务类别：单文档单语言摘要</p><p>评价指标：Rouge-1(基于1-gram) Rouge-2(基于2-gram) Rouge-L(基于LCS)</p><table><thead><tr><th>原始文本</th><th>1-gram</th><th>2-gram</th></tr></thead><tbody><tr><td>今天不错</td><td>今 天 不 错</td><td>今天 天不 不错</td></tr><tr><td>今天太阳不错</td><td>今 天 太 阳 不 错</td><td>今天 天太 太阳 阳不 不错</td></tr></tbody></table><p>Rouge-1   P &#x3D; 4&#x2F;4   R&#x3D;4&#x2F;6  F &#x3D; 2PR(P+R)</p><p>Rouge-2   P &#x3D; 2&#x2F;3   R&#x3D;2&#x2F;5</p><p>LCS(最长公共子序列)   P &#x3D; 4&#x2F;4   R&#x3D;4&#x2F;6</p><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>input和labels分开处理，labels最后一定要有eos_token</p><p>labels不仅是标签，还是解码器的输入</p><p>数据集：</p><h2 id="对话机器人"><a href="#对话机器人" class="headerlink" title="对话机器人"></a>对话机器人</h2><h1 id="参数微调fine-tuning"><a href="#参数微调fine-tuning" class="headerlink" title="参数微调fine-tuning"></a>参数微调fine-tuning</h1><h2 id="beat-fit"><a href="#beat-fit" class="headerlink" title="beat-fit"></a>beat-fit</h2><p>只对bias求梯度，其他的参数冻结</p><h2 id="prompt-Tuning"><a href="#prompt-Tuning" class="headerlink" title="prompt-Tuning"></a>prompt-Tuning</h2><p><img src="/2024/06/02/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/image-20240605211808432.png" alt="image-20240605211808432"></p><p>冻结主模型所有参数，在训练数据前加入一小段prompt，只训练prompt的embedding层。</p><p>hard prompt：指定prompt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">config = PromptTuningConfig(task_type=TaskType.CAUSAL_LM, prompt_tuning_init=PromptTuningInit.TEXT, <br>                            prompt_tuning_init_text = <span class="hljs-string">&quot;下面是一段人与机器人的对话。&quot;</span>,<br>                            num_virtual_tokens  = <span class="hljs-built_in">len</span>(tokenizer(<span class="hljs-string">&quot;下面是一段人与机器人的对话。&quot;</span>)[<span class="hljs-string">&quot;input_ids&quot;</span>]), <br>                            tokenizer_name_or_path = <span class="hljs-string">&quot;Langboat/bloom-389m-zh&quot;</span>)<br><br><br></code></pre></td></tr></table></figure><p>soft prompt：不指定prompt，让模型自行学习  ，对模型需要进行适配多轮才能有好效果</p><h2 id="P-Tuning"><a href="#P-Tuning" class="headerlink" title="P-Tuning"></a>P-Tuning</h2><p><img src="/2024/06/02/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/image-20240605212049075.png" alt="image-20240605212049075"></p><p>在Prompt-Tuning基础上，对prompt部分进行进一步的编码计算，加速收敛。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> peft <span class="hljs-keyword">import</span> PromptEncoderConfig, TaskType, get_peft_model, PromptEncoderReparameterizationType<br><br>config = PromptEncoderConfig(task_type = TaskType.CAUSAL_LM, num_virtual_tokens = <span class="hljs-number">10</span>, <br>                             encoder_reparameterization_type = PromptEncoderReparameterizationType.LSTM,<br>                             encoder_dropout = <span class="hljs-number">0.1</span>, encoder_num_layers = <span class="hljs-number">2</span>, encoder_hidden_size =<span class="hljs-number">1024</span><br>                             )<br>config<br></code></pre></td></tr></table></figure><h2 id="Prefix-Tuning"><a href="#Prefix-Tuning" class="headerlink" title="Prefix-Tuning"></a>Prefix-Tuning</h2><p>past_key_values：Transformer模型中历史计算过的key和value的结果，会存在重复计算，可将结果缓存。</p><p>通过past_key_values的形式将可学习的部分放到了模型中的每一层，这部分内容又称为前缀。</p><p><img src="/2024/06/02/%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/image-20240605214006018.png" alt="image-20240605214006018"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Transformer</title>
    <link href="/2024/06/02/Transformer/"/>
    <url>/2024/06/02/Transformer/</url>
    
    <content type="html"><![CDATA[<h1 id="Transformer的理解"><a href="#Transformer的理解" class="headerlink" title="Transformer的理解"></a>Transformer的理解</h1><h1 id="transformer"><a href="#transformer" class="headerlink" title="transformer"></a>transformer</h1><p><img src="https://img-blog.csdnimg.cn/direct/8a8c78c6941948a1827a013fe1da2bb3.png" alt="在这里插入图片描述"></p><h1 id="ENCODER"><a href="#ENCODER" class="headerlink" title="ENCODER"></a>ENCODER</h1><p><img src="https://img-blog.csdnimg.cn/direct/e93387aeabd749789fcb9379ef913203.png" alt="在这里插入图片描述"></p><h2 id="输入部分"><a href="#输入部分" class="headerlink" title="输入部分"></a>输入部分</h2><p>对拆分后的语句x &#x3D; [batch_size, seq_len]进行以下操作</p><span id="more"></span><ol><li>Embedding<br>将离散的输入（如单词索引或其他类别特征）转换为稠密的实数向量，以便可以在神经网络中使用。</li><li>位置编码<br>与RNN相比，RNN是一个字一个字的输入，自然每个字的顺序关系信息就会保留下来。但在Encoder中，一个句子的每一个字（词）是并行计算的（下一节解释），所以我们在输入的时候需要提前引入位置信息。<br>位置信息由： pos（一句话中的第几个字） 和 i （这个字编码成向量后的第i维) 来确定<br>下面是Positional Encoding的公式：<br>i为 偶 数 时 ,  $PE_{pos, i}&#x3D; sin( pos&#x2F; 10000^{2i&#x2F; d_{model}})$<br>i为 奇 数 时 ,  $PE_{pos, i}&#x3D; cos( pos&#x2F; 10000^{2i&#x2F; d_{model}})$<br>$d_{model}$指想用多长的 vector 来表达一个词(embedding_dim)</li></ol><p>通过输入部分<br>x： [batch_size, seq_len, embedding_dim]</p><p><img src="https://img-blog.csdnimg.cn/direct/2cd5cdb5641248179485166cd2044e44.png" alt="在这里插入图片描述"></p><h2 id="多头注意力机制"><a href="#多头注意力机制" class="headerlink" title="多头注意力机制"></a>多头注意力机制</h2><ol><li>单头注意力机制<br>对一句话中第i个字的字向量$a_i$，产生三个矩阵Q, K ，V<br>Q,K,V的维度都为[batch_size, seq_len, embedding_dim]</li></ol><p>将$a_i$分别与上面三个矩阵相乘，得到三个向量$q_i, k_i, v_i$<br>如果要计算第1个字向量与句子中所有字向量的注意力：<br>将查询向量$q_1$与 所有的字向量的键向量$k_i$相乘得到$alpha_{10}, alpha_{11},…,alpha_{1,seqlen}$<br>将这写数值进行softmax处理后， 分别与$v_i$相乘再合加得到最终结果$b_1$</p><p><img src="https://img-blog.csdnimg.cn/direct/1e55284965a44375b70d7f35a5869142.png" alt="在这里插入图片描述"></p><ol start="2"><li>多头注意力机制<br>把$Q,K,V$三个大矩阵变成n个小矩阵（seq_len, embedding_dim&#x2F;n)     n&#x3D;8<br>用上节相同的方式计算8个矩阵，然后把每一个head-Attention计算出来的b矩阵拼在一起，作为输出</li></ol><h2 id="Add-LN"><a href="#Add-LN" class="headerlink" title="Add&amp;LN"></a>Add&amp;LN</h2><p>Add是用了残差神经网络的思想，也就是把Multi-Head Attention的输入的a矩阵直接加上Multi-Head Attention的输出b矩阵（好处是可以让网络训练的更深）得到的和 $\bar{b}$矩阵</p><p>再在经过Layer normalization（归一化，作用加快训练速度，加速收敛）把<br> 每一行（也就是每个句子）做归一为标准正态分布，最后得到$\hat{b}$<br>BN 和 LN：</p><ol><li>LN： 在一个样本内做归一化 适于RNN,transformer</li><li>BN： 对batch_size里面的样本按对应的特征做归一化  适于CNN<br><img src="https://img-blog.csdnimg.cn/direct/8f699727d3214959addb03e90822d558.png" alt="在这里插入图片描述"></li></ol><h2 id="Feed-forward前馈神经网络"><a href="#Feed-forward前馈神经网络" class="headerlink" title="Feed_forward前馈神经网络"></a>Feed_forward前馈神经网络</h2><p>把Add &amp; Layer normalization输出$\hat{b}$，经过两个全连接层，再经过Add &amp; Layer normalization得到最后输出 o 矩阵</p><h1 id="DECODER"><a href="#DECODER" class="headerlink" title="DECODER"></a>DECODER</h1><h2 id="masked-多头注意力机制"><a href="#masked-多头注意力机制" class="headerlink" title="masked_多头注意力机制"></a>masked_多头注意力机制</h2><p> 比如我们在中英文翻译时候，会先把”我是学生”整个句子输入到Encoder中，得到最后一层的输出后，才会在Decoder输入”S I am a student”（s表示开始）,但是”S I am a student”这个句子我们不会一起输入，而是在T0时刻先输入”S”预测，预测第一个词”I”；在下一个T1时刻，同时输入”S”和”I”到Decoder预测下一个单词”am”；然后在T2时刻把”S,I,am”同时输入到Decoder预测下一个单词”a”,依次把整个句子输入到Decoder,预测出”I am a student E”</p><h2 id="多头注意力机制-1"><a href="#多头注意力机制-1" class="headerlink" title="多头注意力机制"></a>多头注意力机制</h2><p>Decoder 的 Multi-Head Attention 的输入来自两部分，<br>K，V 矩阵来自Encoder的输出，<br>Q 矩阵来自 Masked Multi-Head Attention 的输出<br><img src="https://img-blog.csdnimg.cn/direct/3f06bddb5c124448b71e5df6a4c2429d.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>first-blog</title>
    <link href="/2024/06/02/first-blog/"/>
    <url>/2024/06/02/first-blog/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构复习篇1——哈夫曼树"><a href="#数据结构复习篇1——哈夫曼树" class="headerlink" title="数据结构复习篇1——哈夫曼树"></a>数据结构复习篇1——哈夫曼树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li><p>结点的带权路径：从根结点到该结点之间的路径长度与该结点的权的乘积</p></li><li><p>树的带权路径：所有叶子结点的带权路径长度之和</p><p>举例：</p><p><img src="/2024/06/02/first-blog/Users\TJL\AppData\Roaming\Typora\typora-user-images\image-20240602203936732.png" alt="image-20240602203936732"></p></li><li><p>哈夫曼树：将n个权值作为二叉树的n个叶子结点，若树的带权路径长度达到最小，则这棵树被称为哈夫曼树</p></li></ol><span id="more"></span><h2 id="构造哈夫曼树"><a href="#构造哈夫曼树" class="headerlink" title="构造哈夫曼树"></a>构造哈夫曼树</h2><p>给我们n个结点，如何构造出一颗哈夫曼树呢？</p><p>在这里，我们可以尝试使用贪心的策略，如果要是的WPL最小，那权值大的点应该放在深度很小的地方，权值小的点应该放到底层，即深度很大的地方。所以每次构造时选择两个权值最小的结点进行构造。</p><p>举例：给定4，7，9，10这四个结点，如何构造一个是的WPL最小的二叉树呢？</p><p><strong>·Step1:</strong> 从这个结点集合中选择权值最小的两个点，组成一个新结点。</p><p>在这个例子里面，选择 4 和 7 ，构造成新的点11</p><p><strong>·Step2:</strong> 把选过的结点从结点集合排出，新结点11加入结点集合，重复step1，直至结点集合里面只有一个结点为止。</p><p>根据上述步骤，最后组成的哈夫曼树如图所示。</p><p><img src="/2024/06/02/first-blog/Users\TJL\AppData\Roaming\Typora\typora-user-images\image-20240602204852758.png" alt="image-20240602204852758"></p><h2 id="代码实践"><a href="#代码实践" class="headerlink" title="代码实践"></a>代码实践</h2><p>对于上述的方法，很容易想到如果要构造一个哈夫曼树可以使用最小堆（priority_queue）实现。每次从堆中弹出的两个结点即是我们要取的构造新结点的组成结点。</p><p>这里，我们将二叉树扩展到K叉树，即每个父结点由K个字节的组成。</p><h3 id="荷马史诗"><a href="#荷马史诗" class="headerlink" title="荷马史诗"></a>荷马史诗</h3><p>引入问题：（该问题来自acwing<a href="https://www.acwing.com/problem/content/151/">149. 荷马史诗 - AcWing题库</a>)</p><p>一部《荷马史诗》中有 n 种不同的单词，从 1到 n 进行编号。其中第 i𝑖 种单词出现的总次数为 𝑤𝑖。</p><p>达达想要用 𝑘 进制串 𝑠𝑖 来替换第 𝑖 种单词，使得其满足如下要求:</p><p>对于任意的 1≤i,j≤n，i≠j1≤𝑖,𝑗≤𝑛，𝑖≠𝑗，都有：𝑠𝑖 不是 𝑠𝑗 的前缀。</p><p>现在达达想要知道，如何选择 𝑠𝑖，才能使替换以后得到的新的《荷马史诗》长度最小。</p><p>在确保总长度最小的情况下，达达还想知道最长的 𝑠𝑖 的最短长度是多少？</p><p>一个字符串被称为 k𝑘 进制字符串，当且仅当它的每个字符是 0 到 𝑘−1 之间（包括 0 和 𝑘−1）的整数。</p><p>字符串 𝑆𝑡𝑟1 被称为字符串 𝑆𝑡𝑟2 的前缀，当且仅当：存在 1≤t≤m1≤𝑡≤𝑚，使得 𝑆𝑡𝑟1&#x3D;𝑆𝑡𝑟2[1..𝑡]。</p><p>其中，𝑚 是字符串𝑆𝑡𝑟2 的长度，𝑆𝑡𝑟2[1..𝑡] 表示𝑆𝑡𝑟2 的前 𝑡 个字符组成的字符串。</p><p><strong>注意</strong>: 请使用 64 位整数进行输入输出、储存和计算。</p><p>输出文件包括 2 行。</p><p>第 1 行输出 1 个整数，为《荷马史诗》经过重新编码以后的最短长度。</p><p>第 2 行输出 1 个整数，为保证最短总长度的情况下，最长字符串 𝑠𝑖 的最短长度。</p><p>对于该问题，很明显可以看出需要我们构造一个k叉树使其$WPL$达到最小，另外，对于权值相同的结点，要优先考虑深度小的来构造，避免树的深度过大。</p><p>下面是代码实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>  LL;<br>priority_queue&lt;pair&lt;LL, <span class="hljs-type">int</span>&gt;, vector&lt;pair&lt;LL, <span class="hljs-type">int</span>&gt;&gt;, greater&lt;pair&lt;LL, <span class="hljs-type">int</span>&gt;&gt;&gt; h;<br><br><span class="hljs-type">int</span> n,k;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    LL a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>        cin&gt;&gt;a;<br>        h.<span class="hljs-built_in">push</span>(&#123;a,<span class="hljs-number">0</span>&#125;);<br>    &#125;<br>    <span class="hljs-comment">//对于填不满k叉树的结点，补0来处理</span><br>    <span class="hljs-keyword">while</span>((n<span class="hljs-number">-1</span>)%(k<span class="hljs-number">-1</span>))&#123;<br>        h.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;);<br>        n++;<br>    &#125;<br>    <br>    LL res = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(h.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)&#123;<br>        <br>        <span class="hljs-type">int</span> depth = <span class="hljs-number">0</span>;<br>        LL s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;k; i++)&#123;<br>            <span class="hljs-keyword">auto</span> p = h.<span class="hljs-built_in">top</span>();<br>            s += p.first;<br>            depth = <span class="hljs-built_in">max</span>(depth, p.second);<br>            h.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        res += s;<br>        h.<span class="hljs-built_in">push</span>(&#123;s, depth+<span class="hljs-number">1</span>&#125;);<br>        <br>        <br>    &#125;<br>    cout&lt;&lt;res&lt;&lt;endl;<br>    cout&lt;&lt;h.<span class="hljs-built_in">top</span>().second&lt;&lt;endl;<br>    <br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/06/02/hello-world/"/>
    <url>/2024/06/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
